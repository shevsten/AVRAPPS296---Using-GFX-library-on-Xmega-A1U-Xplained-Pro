
GFX_MONO_EXAMPLE11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f8a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00802000  00001f8a  0000201e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000213  00802030  00802030  0000204e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000204e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000020ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000348  00000000  00000000  000020f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000072ad  00000000  00000000  00002438  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a80  00000000  00000000  000096e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006af0  00000000  00000000  0000b165  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b08  00000000  00000000  00011c58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000310e9  00000000  00000000  00012760  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000047ec  00000000  00000000  00043849  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b0  00000000  00000000  00048035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000282a  00000000  00000000  000482e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	69 c2       	rjmp	.+1234   	; 0x4d4 <__ctors_end>
       2:	00 00       	nop
       4:	8d c2       	rjmp	.+1306   	; 0x520 <__bad_interrupt>
       6:	00 00       	nop
       8:	8b c2       	rjmp	.+1302   	; 0x520 <__bad_interrupt>
       a:	00 00       	nop
       c:	89 c2       	rjmp	.+1298   	; 0x520 <__bad_interrupt>
       e:	00 00       	nop
      10:	87 c2       	rjmp	.+1294   	; 0x520 <__bad_interrupt>
      12:	00 00       	nop
      14:	85 c2       	rjmp	.+1290   	; 0x520 <__bad_interrupt>
      16:	00 00       	nop
      18:	83 c2       	rjmp	.+1286   	; 0x520 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	81 c2       	rjmp	.+1282   	; 0x520 <__bad_interrupt>
      1e:	00 00       	nop
      20:	7f c2       	rjmp	.+1278   	; 0x520 <__bad_interrupt>
      22:	00 00       	nop
      24:	7d c2       	rjmp	.+1274   	; 0x520 <__bad_interrupt>
      26:	00 00       	nop
      28:	7b c2       	rjmp	.+1270   	; 0x520 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	79 c2       	rjmp	.+1266   	; 0x520 <__bad_interrupt>
      2e:	00 00       	nop
      30:	77 c2       	rjmp	.+1262   	; 0x520 <__bad_interrupt>
      32:	00 00       	nop
      34:	75 c2       	rjmp	.+1258   	; 0x520 <__bad_interrupt>
      36:	00 00       	nop
      38:	73 c2       	rjmp	.+1254   	; 0x520 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	71 c2       	rjmp	.+1250   	; 0x520 <__bad_interrupt>
      3e:	00 00       	nop
      40:	6f c2       	rjmp	.+1246   	; 0x520 <__bad_interrupt>
      42:	00 00       	nop
      44:	6d c2       	rjmp	.+1242   	; 0x520 <__bad_interrupt>
      46:	00 00       	nop
      48:	6b c2       	rjmp	.+1238   	; 0x520 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	69 c2       	rjmp	.+1234   	; 0x520 <__bad_interrupt>
      4e:	00 00       	nop
      50:	67 c2       	rjmp	.+1230   	; 0x520 <__bad_interrupt>
      52:	00 00       	nop
      54:	65 c2       	rjmp	.+1226   	; 0x520 <__bad_interrupt>
      56:	00 00       	nop
      58:	63 c2       	rjmp	.+1222   	; 0x520 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	61 c2       	rjmp	.+1218   	; 0x520 <__bad_interrupt>
      5e:	00 00       	nop
      60:	5f c2       	rjmp	.+1214   	; 0x520 <__bad_interrupt>
      62:	00 00       	nop
      64:	5d c2       	rjmp	.+1210   	; 0x520 <__bad_interrupt>
      66:	00 00       	nop
      68:	5b c2       	rjmp	.+1206   	; 0x520 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	59 c2       	rjmp	.+1202   	; 0x520 <__bad_interrupt>
      6e:	00 00       	nop
      70:	57 c2       	rjmp	.+1198   	; 0x520 <__bad_interrupt>
      72:	00 00       	nop
      74:	55 c2       	rjmp	.+1194   	; 0x520 <__bad_interrupt>
      76:	00 00       	nop
      78:	53 c2       	rjmp	.+1190   	; 0x520 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	51 c2       	rjmp	.+1186   	; 0x520 <__bad_interrupt>
      7e:	00 00       	nop
      80:	4f c2       	rjmp	.+1182   	; 0x520 <__bad_interrupt>
      82:	00 00       	nop
      84:	4d c2       	rjmp	.+1178   	; 0x520 <__bad_interrupt>
      86:	00 00       	nop
      88:	4b c2       	rjmp	.+1174   	; 0x520 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	49 c2       	rjmp	.+1170   	; 0x520 <__bad_interrupt>
      8e:	00 00       	nop
      90:	47 c2       	rjmp	.+1166   	; 0x520 <__bad_interrupt>
      92:	00 00       	nop
      94:	45 c2       	rjmp	.+1162   	; 0x520 <__bad_interrupt>
      96:	00 00       	nop
      98:	43 c2       	rjmp	.+1158   	; 0x520 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	41 c2       	rjmp	.+1154   	; 0x520 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	3f c2       	rjmp	.+1150   	; 0x520 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3d c2       	rjmp	.+1146   	; 0x520 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3b c2       	rjmp	.+1142   	; 0x520 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	39 c2       	rjmp	.+1138   	; 0x520 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	37 c2       	rjmp	.+1134   	; 0x520 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	35 c2       	rjmp	.+1130   	; 0x520 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	33 c2       	rjmp	.+1126   	; 0x520 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	31 c2       	rjmp	.+1122   	; 0x520 <__bad_interrupt>
      be:	00 00       	nop
      c0:	2f c2       	rjmp	.+1118   	; 0x520 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2d c2       	rjmp	.+1114   	; 0x520 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2b c2       	rjmp	.+1110   	; 0x520 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	29 c2       	rjmp	.+1106   	; 0x520 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	27 c2       	rjmp	.+1102   	; 0x520 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	25 c2       	rjmp	.+1098   	; 0x520 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	23 c2       	rjmp	.+1094   	; 0x520 <__bad_interrupt>
      da:	00 00       	nop
      dc:	21 c2       	rjmp	.+1090   	; 0x520 <__bad_interrupt>
      de:	00 00       	nop
      e0:	1f c2       	rjmp	.+1086   	; 0x520 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	1d c2       	rjmp	.+1082   	; 0x520 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	1b c2       	rjmp	.+1078   	; 0x520 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	19 c2       	rjmp	.+1074   	; 0x520 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	17 c2       	rjmp	.+1070   	; 0x520 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	15 c2       	rjmp	.+1066   	; 0x520 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	13 c2       	rjmp	.+1062   	; 0x520 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	11 c2       	rjmp	.+1058   	; 0x520 <__bad_interrupt>
      fe:	00 00       	nop
     100:	0f c2       	rjmp	.+1054   	; 0x520 <__bad_interrupt>
     102:	00 00       	nop
     104:	0d c2       	rjmp	.+1050   	; 0x520 <__bad_interrupt>
     106:	00 00       	nop
     108:	0c 94 20 0b 	jmp	0x1640	; 0x1640 <__vector_66>
     10c:	0c 94 78 0b 	jmp	0x16f0	; 0x16f0 <__vector_67>
     110:	07 c2       	rjmp	.+1038   	; 0x520 <__bad_interrupt>
     112:	00 00       	nop
     114:	05 c2       	rjmp	.+1034   	; 0x520 <__bad_interrupt>
     116:	00 00       	nop
     118:	03 c2       	rjmp	.+1030   	; 0x520 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	01 c2       	rjmp	.+1026   	; 0x520 <__bad_interrupt>
     11e:	00 00       	nop
     120:	ff c1       	rjmp	.+1022   	; 0x520 <__bad_interrupt>
     122:	00 00       	nop
     124:	fd c1       	rjmp	.+1018   	; 0x520 <__bad_interrupt>
     126:	00 00       	nop
     128:	fb c1       	rjmp	.+1014   	; 0x520 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	f9 c1       	rjmp	.+1010   	; 0x520 <__bad_interrupt>
     12e:	00 00       	nop
     130:	f7 c1       	rjmp	.+1006   	; 0x520 <__bad_interrupt>
     132:	00 00       	nop
     134:	f5 c1       	rjmp	.+1002   	; 0x520 <__bad_interrupt>
     136:	00 00       	nop
     138:	f3 c1       	rjmp	.+998    	; 0x520 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	f1 c1       	rjmp	.+994    	; 0x520 <__bad_interrupt>
     13e:	00 00       	nop
     140:	ef c1       	rjmp	.+990    	; 0x520 <__bad_interrupt>
     142:	00 00       	nop
     144:	ed c1       	rjmp	.+986    	; 0x520 <__bad_interrupt>
     146:	00 00       	nop
     148:	eb c1       	rjmp	.+982    	; 0x520 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	e9 c1       	rjmp	.+978    	; 0x520 <__bad_interrupt>
     14e:	00 00       	nop
     150:	e7 c1       	rjmp	.+974    	; 0x520 <__bad_interrupt>
     152:	00 00       	nop
     154:	e5 c1       	rjmp	.+970    	; 0x520 <__bad_interrupt>
     156:	00 00       	nop
     158:	e3 c1       	rjmp	.+966    	; 0x520 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	e1 c1       	rjmp	.+962    	; 0x520 <__bad_interrupt>
     15e:	00 00       	nop
     160:	df c1       	rjmp	.+958    	; 0x520 <__bad_interrupt>
     162:	00 00       	nop
     164:	dd c1       	rjmp	.+954    	; 0x520 <__bad_interrupt>
     166:	00 00       	nop
     168:	db c1       	rjmp	.+950    	; 0x520 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	d9 c1       	rjmp	.+946    	; 0x520 <__bad_interrupt>
     16e:	00 00       	nop
     170:	d7 c1       	rjmp	.+942    	; 0x520 <__bad_interrupt>
     172:	00 00       	nop
     174:	d5 c1       	rjmp	.+938    	; 0x520 <__bad_interrupt>
     176:	00 00       	nop
     178:	d3 c1       	rjmp	.+934    	; 0x520 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	d1 c1       	rjmp	.+930    	; 0x520 <__bad_interrupt>
     17e:	00 00       	nop
     180:	cf c1       	rjmp	.+926    	; 0x520 <__bad_interrupt>
     182:	00 00       	nop
     184:	cd c1       	rjmp	.+922    	; 0x520 <__bad_interrupt>
     186:	00 00       	nop
     188:	cb c1       	rjmp	.+918    	; 0x520 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	c9 c1       	rjmp	.+914    	; 0x520 <__bad_interrupt>
     18e:	00 00       	nop
     190:	0c 94 c8 0a 	jmp	0x1590	; 0x1590 <__vector_100>
     194:	c5 c1       	rjmp	.+906    	; 0x520 <__bad_interrupt>
     196:	00 00       	nop
     198:	c3 c1       	rjmp	.+902    	; 0x520 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	c1 c1       	rjmp	.+898    	; 0x520 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	bf c1       	rjmp	.+894    	; 0x520 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	bd c1       	rjmp	.+890    	; 0x520 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	bb c1       	rjmp	.+886    	; 0x520 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	b9 c1       	rjmp	.+882    	; 0x520 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	b7 c1       	rjmp	.+878    	; 0x520 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	b5 c1       	rjmp	.+874    	; 0x520 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	b3 c1       	rjmp	.+870    	; 0x520 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	b1 c1       	rjmp	.+866    	; 0x520 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	af c1       	rjmp	.+862    	; 0x520 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	ad c1       	rjmp	.+858    	; 0x520 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	ab c1       	rjmp	.+854    	; 0x520 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	a9 c1       	rjmp	.+850    	; 0x520 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	a7 c1       	rjmp	.+846    	; 0x520 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	a5 c1       	rjmp	.+842    	; 0x520 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	a3 c1       	rjmp	.+838    	; 0x520 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	a1 c1       	rjmp	.+834    	; 0x520 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	9f c1       	rjmp	.+830    	; 0x520 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	9d c1       	rjmp	.+826    	; 0x520 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	9b c1       	rjmp	.+822    	; 0x520 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	99 c1       	rjmp	.+818    	; 0x520 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	97 c1       	rjmp	.+814    	; 0x520 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	95 c1       	rjmp	.+810    	; 0x520 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	93 c1       	rjmp	.+806    	; 0x520 <__bad_interrupt>
	...

000001fc <__trampolines_end>:
     1fc:	ff 7e       	andi	r31, 0xEF	; 239
     1fe:	3c 18       	sub	r3, r12

00000200 <spin_indicator_data>:
     200:	18 3c 7e ff                                         .<~.

00000204 <sysfont_glyphs>:
     204:	00 00 00 00 00 00 00 20 20 20 20 20 00 20 50 50     .......     . PP
     214:	50 00 00 00 00 50 50 f8 50 f8 50 50 20 78 a0 70     P....PP.P.PP x.p
     224:	28 f0 20 c0 c8 10 20 40 98 18 60 90 a0 40 a8 90     (. ... @..`..@..
     234:	68 60 20 40 00 00 00 00 10 20 40 40 40 20 10 40     h` @..... @@@ .@
     244:	20 10 10 10 20 40 00 50 20 f8 20 50 00 00 20 20      ... @.P . P..  
     254:	f8 20 20 00 00 00 00 00 60 20 40 00 00 00 f8 00     .  .....` @.....
     264:	00 00 00 00 00 00 00 60 60 00 08 10 20 40 80 00     .......``... @..
     274:	70 88 98 a8 c8 88 70 20 60 20 20 20 20 70 70 88     p.....p `    pp.
     284:	08 10 20 40 f8 f8 10 20 10 08 88 70 10 30 50 90     .. @... ...p.0P.
     294:	f8 10 10 f8 80 f0 08 08 88 70 30 40 80 f0 88 88     .........p0@....
     2a4:	70 f8 08 10 20 40 40 40 70 88 88 70 88 88 70 70     p... @@@p..p..pp
     2b4:	88 88 78 08 10 60 00 60 60 00 60 60 00 00 60 60     ..x..`.``.``..``
     2c4:	00 60 20 40 08 10 20 40 20 10 08 00 00 f8 00 f8     .` @.. @ .......
     2d4:	00 00 80 40 20 10 20 40 80 70 88 08 10 20 00 20     ...@ . @.p... . 
     2e4:	70 88 08 68 a8 a8 70 70 88 88 88 f8 88 88 f0 88     p..h..pp........
     2f4:	88 f0 88 88 f0 70 88 80 80 80 88 70 e0 90 88 88     .....p.....p....
     304:	88 90 e0 f8 80 80 f0 80 80 f8 f8 80 80 e0 80 80     ................
     314:	80 70 88 80 80 98 88 70 88 88 88 f8 88 88 88 70     .p.....p.......p
     324:	20 20 20 20 20 70 38 10 10 10 10 90 60 88 90 a0          p8.....`...
     334:	c0 a0 90 88 80 80 80 80 80 80 f8 88 d8 a8 88 88     ................
     344:	88 88 88 88 c8 a8 98 88 88 70 88 88 88 88 88 70     .........p.....p
     354:	f0 88 88 f0 80 80 80 70 88 88 88 a8 90 68 f0 88     .......p.....h..
     364:	88 f0 a0 90 88 78 80 80 70 08 08 f0 f8 20 20 20     .....x..p....   
     374:	20 20 20 88 88 88 88 88 88 70 88 88 88 88 88 50        ......p.....P
     384:	20 88 88 88 a8 a8 d8 88 88 88 50 20 50 88 88 88      .........P P...
     394:	88 50 20 20 20 20 f8 08 10 20 40 80 f8 38 20 20     .P    ... @..8  
     3a4:	20 20 20 38 00 80 40 20 10 08 00 e0 20 20 20 20        8..@ ....    
     3b4:	20 e0 20 50 88 00 00 00 00 00 00 00 00 00 00 f8      . P............
     3c4:	40 20 10 00 00 00 00 00 00 70 08 78 88 78 80 80     @ .......p.x.x..
     3d4:	b0 c8 88 88 f0 00 00 70 80 80 88 70 08 08 68 98     .......p...p..h.
     3e4:	88 88 78 00 00 70 88 f8 80 70 30 48 40 e0 40 40     ..x..p...p0H@.@@
     3f4:	40 00 00 78 88 78 08 30 80 80 b0 c8 88 88 88 20     @..x.x.0....... 
     404:	00 60 20 20 20 70 10 00 30 10 10 90 60 40 40 48     .`   p..0...`@@H
     414:	50 60 50 48 60 20 20 20 20 20 70 00 00 d0 a8 a8     P`PH`     p.....
     424:	88 88 00 00 b0 c8 88 88 88 00 00 70 88 88 88 70     ...........p...p
     434:	00 00 f0 88 f0 80 80 00 00 68 98 78 08 08 00 00     .........h.x....
     444:	b0 c8 80 80 80 00 00 70 80 70 08 f0 40 40 e0 40     .......p.p..@@.@
     454:	40 48 30 00 00 88 88 88 98 68 00 00 88 88 88 50     @H0......h.....P
     464:	20 00 00 88 88 a8 a8 50 00 00 88 50 20 50 88 00      ......P...P P..
     474:	00 88 88 78 08 70 00 00 f8 10 20 40 f8 10 20 20     ...x.p.... @..  
     484:	40 20 20 10 20 20 20 20 20 20 20 40 20 20 10 20     @  .       @  . 
     494:	20 40                                                @

00000496 <spinner_choice4>:
     496:	53 74 72 69 6e 67 20 34 00                          String 4.

0000049f <spinner_choice3>:
     49f:	53 74 72 69 6e 67 20 33 00                          String 3.

000004a8 <spinner_choice2>:
     4a8:	53 74 72 69 6e 67 20 32 00                          String 2.

000004b1 <spinner_choice1>:
     4b1:	53 74 72 69 6e 67 00                                String.

000004b8 <spinnertitle3>:
     4b8:	4e 75 6d 62 65 72 73 32 3a 00                       Numbers2:.

000004c2 <spinnertitle2>:
     4c2:	4e 75 6d 62 65 72 73 3a 00                          Numbers:.

000004cb <spinnertitle>:
     4cb:	53 74 72 69 6e 67 73 3a 00                          Strings:.

000004d4 <__ctors_end>:
     4d4:	11 24       	eor	r1, r1
     4d6:	1f be       	out	0x3f, r1	; 63
     4d8:	cf ef       	ldi	r28, 0xFF	; 255
     4da:	cd bf       	out	0x3d, r28	; 61
     4dc:	df e3       	ldi	r29, 0x3F	; 63
     4de:	de bf       	out	0x3e, r29	; 62
     4e0:	00 e0       	ldi	r16, 0x00	; 0
     4e2:	0c bf       	out	0x3c, r16	; 60
     4e4:	18 be       	out	0x38, r1	; 56
     4e6:	19 be       	out	0x39, r1	; 57
     4e8:	1a be       	out	0x3a, r1	; 58
     4ea:	1b be       	out	0x3b, r1	; 59

000004ec <__do_copy_data>:
     4ec:	10 e2       	ldi	r17, 0x20	; 32
     4ee:	a0 e0       	ldi	r26, 0x00	; 0
     4f0:	b0 e2       	ldi	r27, 0x20	; 32
     4f2:	ea e8       	ldi	r30, 0x8A	; 138
     4f4:	ff e1       	ldi	r31, 0x1F	; 31
     4f6:	00 e0       	ldi	r16, 0x00	; 0
     4f8:	0b bf       	out	0x3b, r16	; 59
     4fa:	02 c0       	rjmp	.+4      	; 0x500 <__do_copy_data+0x14>
     4fc:	07 90       	elpm	r0, Z+
     4fe:	0d 92       	st	X+, r0
     500:	a0 33       	cpi	r26, 0x30	; 48
     502:	b1 07       	cpc	r27, r17
     504:	d9 f7       	brne	.-10     	; 0x4fc <__do_copy_data+0x10>
     506:	1b be       	out	0x3b, r1	; 59

00000508 <__do_clear_bss>:
     508:	22 e2       	ldi	r18, 0x22	; 34
     50a:	a0 e3       	ldi	r26, 0x30	; 48
     50c:	b0 e2       	ldi	r27, 0x20	; 32
     50e:	01 c0       	rjmp	.+2      	; 0x512 <.do_clear_bss_start>

00000510 <.do_clear_bss_loop>:
     510:	1d 92       	st	X+, r1

00000512 <.do_clear_bss_start>:
     512:	a3 34       	cpi	r26, 0x43	; 67
     514:	b2 07       	cpc	r27, r18
     516:	e1 f7       	brne	.-8      	; 0x510 <.do_clear_bss_loop>
     518:	0e 94 31 0c 	call	0x1862	; 0x1862 <main>
     51c:	0c 94 c3 0f 	jmp	0x1f86	; 0x1f86 <_exit>

00000520 <__bad_interrupt>:
     520:	6f cd       	rjmp	.-1314   	; 0x0 <__vectors>

00000522 <gfx_mono_spinctrl_draw_indicator>:
 * \param *spinner initialized gfx_mono_spinctrl struct
 * \param draw     true on draw, false on delete
 */
static void gfx_mono_spinctrl_draw_indicator(struct gfx_mono_spinctrl *spinner,
		bool draw)
{
     522:	0f 93       	push	r16
	if (draw) {
     524:	66 23       	and	r22, r22
     526:	39 f0       	breq	.+14     	; 0x536 <gfx_mono_spinctrl_draw_indicator+0x14>
		gfx_mono_put_bitmap(&gfx_mono_spinctrl_bitmap_indicator, 0,
     528:	fc 01       	movw	r30, r24
     52a:	44 85       	ldd	r20, Z+12	; 0x0c
     52c:	60 e0       	ldi	r22, 0x00	; 0
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	90 e2       	ldi	r25, 0x20	; 32
     532:	74 d5       	rcall	.+2792   	; 0x101c <gfx_mono_generic_put_bitmap>
     534:	07 c0       	rjmp	.+14     	; 0x544 <gfx_mono_spinctrl_draw_indicator+0x22>
				spinner->y);
	} else {
		gfx_mono_draw_filled_rect(0, spinner->y,
     536:	00 e0       	ldi	r16, 0x00	; 0
     538:	28 e0       	ldi	r18, 0x08	; 8
     53a:	44 e0       	ldi	r20, 0x04	; 4
     53c:	fc 01       	movw	r30, r24
     53e:	64 85       	ldd	r22, Z+12	; 0x0c
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	52 d5       	rcall	.+2724   	; 0xfe8 <gfx_mono_generic_draw_filled_rect>
				GFX_MONO_SPINCTRL_INDICATOR_WIDTH,
				GFX_MONO_SPINCTRL_INDICATOR_HEIGHT,
				GFX_PIXEL_CLR);
	}
}
     544:	0f 91       	pop	r16
     546:	08 95       	ret

00000548 <gfx_mono_spinctrl_draw_button>:
 *
 * \param draw       true on draw, false on delete
 * \param indicator  true on draw indicator, false on delete
 */
static void gfx_mono_spinctrl_draw_button(bool draw, bool indicator)
{
     548:	df 92       	push	r13
     54a:	ef 92       	push	r14
     54c:	ff 92       	push	r15
     54e:	0f 93       	push	r16
     550:	1f 93       	push	r17
     552:	cf 93       	push	r28
     554:	df 93       	push	r29
     556:	cd b7       	in	r28, 0x3d	; 61
     558:	de b7       	in	r29, 0x3e	; 62
     55a:	68 97       	sbiw	r28, 0x18	; 24
     55c:	cd bf       	out	0x3d, r28	; 61
     55e:	de bf       	out	0x3e, r29	; 62
     560:	18 2f       	mov	r17, r24
     562:	d6 2e       	mov	r13, r22
	uint8_t height;
	uint8_t offset;
	char string_buf[22];

	/* Clear bottom line */
	gfx_mono_draw_filled_rect(0,
     564:	00 e0       	ldi	r16, 0x00	; 0
     566:	27 e0       	ldi	r18, 0x07	; 7
     568:	40 e8       	ldi	r20, 0x80	; 128
     56a:	68 e1       	ldi	r22, 0x18	; 24
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	3c d5       	rcall	.+2680   	; 0xfe8 <gfx_mono_generic_draw_filled_rect>
			(SYSFONT_HEIGHT + 1) *
			GFX_MONO_SPINCTRL_MAX_ELEMENTS_IN_SPINCOLLECTION,
			GFX_MONO_LCD_WIDTH, SYSFONT_HEIGHT, GFX_PIXEL_CLR);

	snprintf(string_buf, sizeof(string_buf), "OK");
     570:	8f e4       	ldi	r24, 0x4F	; 79
     572:	9b e4       	ldi	r25, 0x4B	; 75
     574:	a0 e0       	ldi	r26, 0x00	; 0
     576:	8b 83       	std	Y+3, r24	; 0x03
     578:	9c 83       	std	Y+4, r25	; 0x04
     57a:	ad 83       	std	Y+5, r26	; 0x05
	gfx_mono_get_string_bounding_box(string_buf, &sysfont, &width, &height);
     57c:	9e 01       	movw	r18, r28
     57e:	2e 5f       	subi	r18, 0xFE	; 254
     580:	3f 4f       	sbci	r19, 0xFF	; 255
     582:	ae 01       	movw	r20, r28
     584:	4f 5f       	subi	r20, 0xFF	; 255
     586:	5f 4f       	sbci	r21, 0xFF	; 255
     588:	6a e0       	ldi	r22, 0x0A	; 10
     58a:	70 e2       	ldi	r23, 0x20	; 32
     58c:	ce 01       	movw	r24, r28
     58e:	03 96       	adiw	r24, 0x03	; 3
     590:	8e d3       	rcall	.+1820   	; 0xcae <gfx_mono_get_string_bounding_box>
	offset = (GFX_MONO_LCD_WIDTH - width) / 2;
     592:	89 81       	ldd	r24, Y+1	; 0x01
     594:	40 e8       	ldi	r20, 0x80	; 128
     596:	50 e0       	ldi	r21, 0x00	; 0
     598:	48 1b       	sub	r20, r24
     59a:	51 09       	sbc	r21, r1
     59c:	9a 01       	movw	r18, r20
     59e:	12 f4       	brpl	.+4      	; 0x5a4 <gfx_mono_spinctrl_draw_button+0x5c>
     5a0:	2f 5f       	subi	r18, 0xFF	; 255
     5a2:	3f 4f       	sbci	r19, 0xFF	; 255
     5a4:	79 01       	movw	r14, r18
     5a6:	f5 94       	asr	r15
     5a8:	e7 94       	ror	r14

	if (draw) {
     5aa:	11 23       	and	r17, r17
     5ac:	c1 f0       	breq	.+48     	; 0x5de <gfx_mono_spinctrl_draw_button+0x96>
		/* Draw OK button in the middle of the last line */
		gfx_mono_draw_string(string_buf, offset,
     5ae:	2a e0       	ldi	r18, 0x0A	; 10
     5b0:	30 e2       	ldi	r19, 0x20	; 32
     5b2:	48 e1       	ldi	r20, 0x18	; 24
     5b4:	6e 2d       	mov	r22, r14
     5b6:	ce 01       	movw	r24, r28
     5b8:	03 96       	adiw	r24, 0x03	; 3
     5ba:	21 d3       	rcall	.+1602   	; 0xbfe <gfx_mono_draw_string>
				(SYSFONT_HEIGHT + 1) *
				GFX_MONO_SPINCTRL_MAX_ELEMENTS_IN_SPINCOLLECTION,
				&sysfont);
		if (indicator) {
     5bc:	dd 20       	and	r13, r13
     5be:	39 f0       	breq	.+14     	; 0x5ce <gfx_mono_spinctrl_draw_button+0x86>
			/* Draw indicator arrow in front of button */
			gfx_mono_put_bitmap(&gfx_mono_spinctrl_bitmap_indicator,
     5c0:	6c ef       	ldi	r22, 0xFC	; 252
     5c2:	6e 0d       	add	r22, r14
     5c4:	48 e1       	ldi	r20, 0x18	; 24
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	90 e2       	ldi	r25, 0x20	; 32
     5ca:	28 d5       	rcall	.+2640   	; 0x101c <gfx_mono_generic_put_bitmap>
     5cc:	0f c0       	rjmp	.+30     	; 0x5ec <gfx_mono_spinctrl_draw_button+0xa4>
					offset - GFX_MONO_SPINCTRL_INDICATOR_WIDTH,
					(SYSFONT_HEIGHT + 1) *
					GFX_MONO_SPINCTRL_MAX_ELEMENTS_IN_SPINCOLLECTION);
		} else {
			/* Delete indicator */
			gfx_mono_draw_filled_rect(offset -
     5ce:	00 e0       	ldi	r16, 0x00	; 0
     5d0:	28 e0       	ldi	r18, 0x08	; 8
     5d2:	44 e0       	ldi	r20, 0x04	; 4
     5d4:	68 e1       	ldi	r22, 0x18	; 24
     5d6:	8c ef       	ldi	r24, 0xFC	; 252
     5d8:	8e 0d       	add	r24, r14
     5da:	06 d5       	rcall	.+2572   	; 0xfe8 <gfx_mono_generic_draw_filled_rect>
     5dc:	07 c0       	rjmp	.+14     	; 0x5ec <gfx_mono_spinctrl_draw_button+0xa4>
					GFX_MONO_SPINCTRL_INDICATOR_HEIGHT,
					GFX_PIXEL_CLR);
		}
	} else {
		/* Delete OK button */
		gfx_mono_draw_filled_rect(
     5de:	00 e0       	ldi	r16, 0x00	; 0
     5e0:	27 e0       	ldi	r18, 0x07	; 7
     5e2:	44 e1       	ldi	r20, 0x14	; 20
     5e4:	68 e1       	ldi	r22, 0x18	; 24
     5e6:	8c ef       	ldi	r24, 0xFC	; 252
     5e8:	8e 0d       	add	r24, r14
     5ea:	fe d4       	rcall	.+2556   	; 0xfe8 <gfx_mono_generic_draw_filled_rect>
				offset - GFX_MONO_SPINCTRL_INDICATOR_WIDTH,
				(SYSFONT_HEIGHT + 1) *
				GFX_MONO_SPINCTRL_MAX_ELEMENTS_IN_SPINCOLLECTION, 20,
				SYSFONT_HEIGHT, GFX_PIXEL_CLR);
	}
}
     5ec:	68 96       	adiw	r28, 0x18	; 24
     5ee:	cd bf       	out	0x3d, r28	; 61
     5f0:	de bf       	out	0x3e, r29	; 62
     5f2:	df 91       	pop	r29
     5f4:	cf 91       	pop	r28
     5f6:	1f 91       	pop	r17
     5f8:	0f 91       	pop	r16
     5fa:	ff 90       	pop	r15
     5fc:	ef 90       	pop	r14
     5fe:	df 90       	pop	r13
     600:	08 95       	ret

00000602 <gfx_mono_spinctrl_draw>:
 *
 * \param spinner  pointer to initialized gfx_mono_spinctrl struct
 * \param redraw   true if title of spinner should be drawn
 */
void gfx_mono_spinctrl_draw(struct gfx_mono_spinctrl *spinner, bool redraw)
{
     602:	cf 92       	push	r12
     604:	df 92       	push	r13
     606:	ef 92       	push	r14
     608:	ff 92       	push	r15
     60a:	0f 93       	push	r16
     60c:	1f 93       	push	r17
     60e:	cf 93       	push	r28
     610:	df 93       	push	r29
     612:	cd b7       	in	r28, 0x3d	; 61
     614:	de b7       	in	r29, 0x3e	; 62
     616:	29 97       	sbiw	r28, 0x09	; 9
     618:	cd bf       	out	0x3d, r28	; 61
     61a:	de bf       	out	0x3e, r29	; 62
     61c:	7c 01       	movw	r14, r24
	char string_buf[GFX_MONO_SPINCTRL_INT_SPINNER_WIDTH];
	uint8_t index;
	uint8_t offset;

	if (redraw) {
     61e:	66 23       	and	r22, r22
     620:	81 f0       	breq	.+32     	; 0x642 <gfx_mono_spinctrl_draw+0x40>
		/* Clear line */
		gfx_mono_draw_filled_rect(0, spinner->y, GFX_MONO_LCD_WIDTH,
     622:	00 e0       	ldi	r16, 0x00	; 0
     624:	27 e0       	ldi	r18, 0x07	; 7
     626:	40 e8       	ldi	r20, 0x80	; 128
     628:	dc 01       	movw	r26, r24
     62a:	1c 96       	adiw	r26, 0x0c	; 12
     62c:	6c 91       	ld	r22, X
     62e:	80 e0       	ldi	r24, 0x00	; 0
     630:	db d4       	rcall	.+2486   	; 0xfe8 <gfx_mono_generic_draw_filled_rect>
				SYSFONT_HEIGHT, GFX_PIXEL_CLR);
		/* Draw title */
		gfx_mono_draw_progmem_string((char PROGMEM_PTR_T)spinner->title,
     632:	2a e0       	ldi	r18, 0x0A	; 10
     634:	30 e2       	ldi	r19, 0x20	; 32
     636:	f7 01       	movw	r30, r14
     638:	44 85       	ldd	r20, Z+12	; 0x0c
     63a:	65 e0       	ldi	r22, 0x05	; 5
     63c:	80 81       	ld	r24, Z
     63e:	91 81       	ldd	r25, Z+1	; 0x01
     640:	07 d3       	rcall	.+1550   	; 0xc50 <gfx_mono_draw_progmem_string>
				GFX_MONO_SPINCTRL_INDICATOR_WIDTH + 1,
				spinner->y, &sysfont);
	}

	if (spinner->in_focus) {
     642:	d7 01       	movw	r26, r14
     644:	1d 96       	adiw	r26, 0x0d	; 13
     646:	8c 91       	ld	r24, X
     648:	1d 97       	sbiw	r26, 0x0d	; 13
     64a:	88 23       	and	r24, r24
     64c:	39 f0       	breq	.+14     	; 0x65c <gfx_mono_spinctrl_draw+0x5a>
 */
static void gfx_mono_spinctrl_draw_spin_indicator(struct gfx_mono_spinctrl
		*spinner, bool draw)
{
	if (draw) {
		gfx_mono_put_bitmap(&gfx_mono_spinctrl_bitmap_spin_indicator,
     64e:	1c 96       	adiw	r26, 0x0c	; 12
     650:	4c 91       	ld	r20, X
     652:	6c e7       	ldi	r22, 0x7C	; 124
     654:	85 e0       	ldi	r24, 0x05	; 5
     656:	90 e2       	ldi	r25, 0x20	; 32
     658:	e1 d4       	rcall	.+2498   	; 0x101c <gfx_mono_generic_put_bitmap>
     65a:	07 c0       	rjmp	.+14     	; 0x66a <gfx_mono_spinctrl_draw+0x68>
				GFX_MONO_LCD_WIDTH - GFX_MONO_SPINCTRL_SPIN_INDICATOR_WIDTH,
				spinner->y);
	} else {
		gfx_mono_draw_filled_rect(GFX_MONO_LCD_WIDTH -
     65c:	00 e0       	ldi	r16, 0x00	; 0
     65e:	28 e0       	ldi	r18, 0x08	; 8
     660:	44 e0       	ldi	r20, 0x04	; 4
     662:	f7 01       	movw	r30, r14
     664:	64 85       	ldd	r22, Z+12	; 0x0c
     666:	8c e7       	ldi	r24, 0x7C	; 124
     668:	bf d4       	rcall	.+2430   	; 0xfe8 <gfx_mono_generic_draw_filled_rect>
		gfx_mono_spinctrl_draw_spin_indicator(spinner, true);
	} else {
		gfx_mono_spinctrl_draw_spin_indicator(spinner, false);
	}

	if (spinner->datatype == SPINTYPE_INTEGER) {
     66a:	d7 01       	movw	r26, r14
     66c:	12 96       	adiw	r26, 0x02	; 2
     66e:	8c 91       	ld	r24, X
     670:	12 97       	sbiw	r26, 0x02	; 2
     672:	81 30       	cpi	r24, 0x01	; 1
     674:	39 f5       	brne	.+78     	; 0x6c4 <gfx_mono_spinctrl_draw+0xc2>
		offset = GFX_MONO_LCD_WIDTH -
				(SYSFONT_WIDTH *
				GFX_MONO_SPINCTRL_INT_SPINNER_WIDTH);
		snprintf(string_buf, sizeof(string_buf), "%d",
     676:	14 96       	adiw	r26, 0x04	; 4
     678:	8c 91       	ld	r24, X
     67a:	14 97       	sbiw	r26, 0x04	; 4
     67c:	8f 93       	push	r24
     67e:	13 96       	adiw	r26, 0x03	; 3
     680:	8c 91       	ld	r24, X
     682:	8f 93       	push	r24
     684:	8c e2       	ldi	r24, 0x2C	; 44
     686:	90 e2       	ldi	r25, 0x20	; 32
     688:	9f 93       	push	r25
     68a:	8f 93       	push	r24
     68c:	1f 92       	push	r1
     68e:	89 e0       	ldi	r24, 0x09	; 9
     690:	8f 93       	push	r24
     692:	fe 01       	movw	r30, r28
     694:	31 96       	adiw	r30, 0x01	; 1
     696:	6f 01       	movw	r12, r30
     698:	ff 93       	push	r31
     69a:	ef 93       	push	r30
     69c:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <snprintf>
				spinner->integer_data);
		/* Delete previous spinner data */
		gfx_mono_draw_filled_rect(offset, spinner->y,
     6a0:	00 e0       	ldi	r16, 0x00	; 0
     6a2:	27 e0       	ldi	r18, 0x07	; 7
     6a4:	42 e3       	ldi	r20, 0x32	; 50
     6a6:	d7 01       	movw	r26, r14
     6a8:	1c 96       	adiw	r26, 0x0c	; 12
     6aa:	6c 91       	ld	r22, X
     6ac:	8a e4       	ldi	r24, 0x4A	; 74
     6ae:	9c d4       	rcall	.+2360   	; 0xfe8 <gfx_mono_generic_draw_filled_rect>
				GFX_MONO_LCD_WIDTH - offset -
				GFX_MONO_SPINCTRL_SPIN_INDICATOR_WIDTH,
				SYSFONT_HEIGHT,
				GFX_PIXEL_CLR);
		/* Draw integer data */
		gfx_mono_draw_string(string_buf, offset, spinner->y, &sysfont);
     6b0:	2a e0       	ldi	r18, 0x0A	; 10
     6b2:	30 e2       	ldi	r19, 0x20	; 32
     6b4:	f7 01       	movw	r30, r14
     6b6:	44 85       	ldd	r20, Z+12	; 0x0c
     6b8:	6a e4       	ldi	r22, 0x4A	; 74
     6ba:	c6 01       	movw	r24, r12
     6bc:	a0 d2       	rcall	.+1344   	; 0xbfe <gfx_mono_draw_string>
     6be:	cd bf       	out	0x3d, r28	; 61
     6c0:	de bf       	out	0x3e, r29	; 62
     6c2:	20 c0       	rjmp	.+64     	; 0x704 <gfx_mono_spinctrl_draw+0x102>
	} else if (spinner->datatype == SPINTYPE_STRING) {
     6c4:	81 11       	cpse	r24, r1
     6c6:	1e c0       	rjmp	.+60     	; 0x704 <gfx_mono_spinctrl_draw+0x102>
		index = spinner->strings.index;
     6c8:	d7 01       	movw	r26, r14
     6ca:	15 96       	adiw	r26, 0x05	; 5
     6cc:	1c 91       	ld	r17, X
     6ce:	15 97       	sbiw	r26, 0x05	; 5
		offset = GFX_MONO_LCD_WIDTH -
				(SYSFONT_WIDTH *
				GFX_MONO_SPINCTRL_STRING_SPINNER_WIDTH);

		/* Delete previous spinner data */
		gfx_mono_draw_filled_rect(offset, spinner->y,
     6d0:	00 e0       	ldi	r16, 0x00	; 0
     6d2:	27 e0       	ldi	r18, 0x07	; 7
     6d4:	42 e3       	ldi	r20, 0x32	; 50
     6d6:	1c 96       	adiw	r26, 0x0c	; 12
     6d8:	6c 91       	ld	r22, X
     6da:	8a e4       	ldi	r24, 0x4A	; 74
     6dc:	85 d4       	rcall	.+2314   	; 0xfe8 <gfx_mono_generic_draw_filled_rect>
				SYSFONT_HEIGHT,
				GFX_PIXEL_CLR);

		/* Draw string data */
		gfx_mono_draw_progmem_string(
				(char PROGMEM_PTR_T)spinner->strings.data[index], offset,
     6de:	e1 2f       	mov	r30, r17
     6e0:	f0 e0       	ldi	r31, 0x00	; 0
				GFX_MONO_SPINCTRL_SPIN_INDICATOR_WIDTH,
				SYSFONT_HEIGHT,
				GFX_PIXEL_CLR);

		/* Draw string data */
		gfx_mono_draw_progmem_string(
     6e2:	ee 0f       	add	r30, r30
     6e4:	ff 1f       	adc	r31, r31
     6e6:	d7 01       	movw	r26, r14
     6e8:	13 96       	adiw	r26, 0x03	; 3
     6ea:	8d 91       	ld	r24, X+
     6ec:	9c 91       	ld	r25, X
     6ee:	14 97       	sbiw	r26, 0x04	; 4
     6f0:	e8 0f       	add	r30, r24
     6f2:	f9 1f       	adc	r31, r25
     6f4:	2a e0       	ldi	r18, 0x0A	; 10
     6f6:	30 e2       	ldi	r19, 0x20	; 32
     6f8:	1c 96       	adiw	r26, 0x0c	; 12
     6fa:	4c 91       	ld	r20, X
     6fc:	6a e4       	ldi	r22, 0x4A	; 74
     6fe:	80 81       	ld	r24, Z
     700:	91 81       	ldd	r25, Z+1	; 0x01
     702:	a6 d2       	rcall	.+1356   	; 0xc50 <gfx_mono_draw_progmem_string>
				(char PROGMEM_PTR_T)spinner->strings.data[index], offset,
				spinner->y, &sysfont);
	}
}
     704:	29 96       	adiw	r28, 0x09	; 9
     706:	cd bf       	out	0x3d, r28	; 61
     708:	de bf       	out	0x3e, r29	; 62
     70a:	df 91       	pop	r29
     70c:	cf 91       	pop	r28
     70e:	1f 91       	pop	r17
     710:	0f 91       	pop	r16
     712:	ff 90       	pop	r15
     714:	ef 90       	pop	r14
     716:	df 90       	pop	r13
     718:	cf 90       	pop	r12
     71a:	08 95       	ret

0000071c <gfx_mono_spinctrl_init>:
void gfx_mono_spinctrl_init(struct gfx_mono_spinctrl *spinner,
		gfx_mono_spinctrl_type_t datatype, PROGMEM_STRING_T title,
		PROGMEM_STRING_T *data, int16_t lower_limit,
		int16_t upper_limit,
		gfx_coord_t y)
{
     71c:	cf 92       	push	r12
     71e:	ef 92       	push	r14
     720:	ff 92       	push	r15
     722:	0f 93       	push	r16
     724:	1f 93       	push	r17
     726:	fc 01       	movw	r30, r24
	/* Initialization of spinner parameters */
	spinner->title = title;
     728:	40 83       	st	Z, r20
     72a:	51 83       	std	Z+1, r21	; 0x01
	spinner->datatype = datatype;
     72c:	62 83       	std	Z+2, r22	; 0x02
	spinner->lower_limit = lower_limit;
     72e:	00 87       	std	Z+8, r16	; 0x08
     730:	11 87       	std	Z+9, r17	; 0x09
	spinner->upper_limit = upper_limit;
     732:	e2 86       	std	Z+10, r14	; 0x0a
     734:	f3 86       	std	Z+11, r15	; 0x0b
	spinner->y = y;
     736:	c4 86       	std	Z+12, r12	; 0x0c
	spinner->in_focus = false;
     738:	15 86       	std	Z+13, r1	; 0x0d
	spinner->last_saved_value = spinner->lower_limit;
     73a:	06 83       	std	Z+6, r16	; 0x06
     73c:	17 83       	std	Z+7, r17	; 0x07

	if (datatype == SPINTYPE_STRING) {
     73e:	61 11       	cpse	r22, r1
     740:	04 c0       	rjmp	.+8      	; 0x74a <gfx_mono_spinctrl_init+0x2e>
		spinner->strings.data = data;
     742:	23 83       	std	Z+3, r18	; 0x03
     744:	34 83       	std	Z+4, r19	; 0x04
		spinner->strings.index = lower_limit;
     746:	05 83       	std	Z+5, r16	; 0x05
     748:	02 c0       	rjmp	.+4      	; 0x74e <gfx_mono_spinctrl_init+0x32>
	} else {
		spinner->integer_data = lower_limit;
     74a:	03 83       	std	Z+3, r16	; 0x03
     74c:	14 83       	std	Z+4, r17	; 0x04
	}
}
     74e:	1f 91       	pop	r17
     750:	0f 91       	pop	r16
     752:	ff 90       	pop	r15
     754:	ef 90       	pop	r14
     756:	cf 90       	pop	r12
     758:	08 95       	ret

0000075a <gfx_mono_spinctrl_spincollection_init>:
 *
 * \param collection pointer to gfx_mono_spinctrl_spincollection to Initialize
 */
void gfx_mono_spinctrl_spincollection_init(struct
		gfx_mono_spinctrl_spincollection *collection)
{
     75a:	fc 01       	movw	r30, r24
	collection->active_spinner = false;
     75c:	10 86       	std	Z+8, r1	; 0x08
	collection->current_selection = 0;
     75e:	15 82       	std	Z+5, r1	; 0x05
	collection->number_of_spinners = 0;
     760:	14 82       	std	Z+4, r1	; 0x04
	collection->init = true;
     762:	81 e0       	ldi	r24, 0x01	; 1
     764:	81 87       	std	Z+9, r24	; 0x09
     766:	08 95       	ret

00000768 <gfx_mono_spinctrl_spincollection_add_spinner>:
 *
 */
void gfx_mono_spinctrl_spincollection_add_spinner(struct
		gfx_mono_spinctrl *spinner,
		struct gfx_mono_spinctrl_spincollection *spinners)
{
     768:	cf 93       	push	r28
     76a:	df 93       	push	r29
     76c:	ec 01       	movw	r28, r24
     76e:	db 01       	movw	r26, r22
	uint8_t i;
	struct gfx_mono_spinctrl *lastspinner;

	/* Do not add more spinner elements than maximum number of spinners */
	if (spinners->number_of_spinners >=
     770:	14 96       	adiw	r26, 0x04	; 4
     772:	9c 91       	ld	r25, X
     774:	14 97       	sbiw	r26, 0x04	; 4
     776:	93 30       	cpi	r25, 0x03	; 3
     778:	38 f5       	brcc	.+78     	; 0x7c8 <gfx_mono_spinctrl_spincollection_add_spinner+0x60>
			GFX_MONO_SPINCTRL_MAX_ELEMENTS_IN_SPINCOLLECTION) {
		return;
	}

	/* Place new spinner below previous spinners on screen */
	spinner->y = (SYSFONT_HEIGHT + 1) * spinners->number_of_spinners;
     77a:	99 0f       	add	r25, r25
     77c:	99 0f       	add	r25, r25
     77e:	99 0f       	add	r25, r25
     780:	9c 87       	std	Y+12, r25	; 0x0c

	/* Add pointer to the spinner in spincollection if empty */
	if (spinners->number_of_spinners == 0) {
     782:	14 96       	adiw	r26, 0x04	; 4
     784:	2c 91       	ld	r18, X
     786:	14 97       	sbiw	r26, 0x04	; 4
     788:	21 11       	cpse	r18, r1
     78a:	04 c0       	rjmp	.+8      	; 0x794 <gfx_mono_spinctrl_spincollection_add_spinner+0x2c>
		spinners->collection = spinner;
     78c:	cd 93       	st	X+, r28
     78e:	dc 93       	st	X, r29
     790:	11 97       	sbiw	r26, 0x01	; 1
     792:	10 c0       	rjmp	.+32     	; 0x7b4 <gfx_mono_spinctrl_spincollection_add_spinner+0x4c>
	} else {
		lastspinner = spinners->collection;
     794:	ed 91       	ld	r30, X+
     796:	fc 91       	ld	r31, X
     798:	11 97       	sbiw	r26, 0x01	; 1
		for (i = 1; i < spinners->number_of_spinners; i++) {
     79a:	22 30       	cpi	r18, 0x02	; 2
     79c:	38 f0       	brcs	.+14     	; 0x7ac <gfx_mono_spinctrl_spincollection_add_spinner+0x44>
     79e:	91 e0       	ldi	r25, 0x01	; 1
			lastspinner = lastspinner->next;
     7a0:	06 84       	ldd	r0, Z+14	; 0x0e
     7a2:	f7 85       	ldd	r31, Z+15	; 0x0f
     7a4:	e0 2d       	mov	r30, r0
	/* Add pointer to the spinner in spincollection if empty */
	if (spinners->number_of_spinners == 0) {
		spinners->collection = spinner;
	} else {
		lastspinner = spinners->collection;
		for (i = 1; i < spinners->number_of_spinners; i++) {
     7a6:	9f 5f       	subi	r25, 0xFF	; 255
     7a8:	92 13       	cpse	r25, r18
     7aa:	fa cf       	rjmp	.-12     	; 0x7a0 <gfx_mono_spinctrl_spincollection_add_spinner+0x38>
			lastspinner = lastspinner->next;
		}
		/* Link the new spinner to the current last spinner in the
		 * collection */
		lastspinner->next = spinner;
     7ac:	c6 87       	std	Z+14, r28	; 0x0e
     7ae:	d7 87       	std	Z+15, r29	; 0x0f
		/* Link the current last spinner as previous spinner for new
		 * spinner */
		spinner->prev = lastspinner;
     7b0:	e8 8b       	std	Y+16, r30	; 0x10
     7b2:	f9 8b       	std	Y+17, r31	; 0x11
	}

	/* Set added spinner as last spinner in collection */
	spinners->collection_last = spinner;
     7b4:	12 96       	adiw	r26, 0x02	; 2
     7b6:	cd 93       	st	X+, r28
     7b8:	dc 93       	st	X, r29
     7ba:	13 97       	sbiw	r26, 0x03	; 3
	/* Update number of spinners in collection */
	spinners->number_of_spinners++;
     7bc:	14 96       	adiw	r26, 0x04	; 4
     7be:	8c 91       	ld	r24, X
     7c0:	14 97       	sbiw	r26, 0x04	; 4
     7c2:	8f 5f       	subi	r24, 0xFF	; 255
     7c4:	14 96       	adiw	r26, 0x04	; 4
     7c6:	8c 93       	st	X, r24
}
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	08 95       	ret

000007ce <gfx_mono_spinctrl_spincollection_show>:
 *
 * \param spinners pointer to initialized spincollection to display
 */
void gfx_mono_spinctrl_spincollection_show(struct
		gfx_mono_spinctrl_spincollection *spinners)
{
     7ce:	ef 92       	push	r14
     7d0:	ff 92       	push	r15
     7d2:	0f 93       	push	r16
     7d4:	1f 93       	push	r17
     7d6:	cf 93       	push	r28
     7d8:	7c 01       	movw	r14, r24
	uint8_t i;
	struct gfx_mono_spinctrl *iterator;

	/* Clear screen */
	gfx_mono_draw_filled_rect(0, 0, GFX_MONO_LCD_WIDTH, GFX_MONO_LCD_HEIGHT,
     7da:	00 e0       	ldi	r16, 0x00	; 0
     7dc:	20 e2       	ldi	r18, 0x20	; 32
     7de:	40 e8       	ldi	r20, 0x80	; 128
     7e0:	60 e0       	ldi	r22, 0x00	; 0
     7e2:	80 e0       	ldi	r24, 0x00	; 0
     7e4:	01 d4       	rcall	.+2050   	; 0xfe8 <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	/* Make sure there are spinners in the collection */
	if (spinners->number_of_spinners == 0) {
     7e6:	f7 01       	movw	r30, r14
     7e8:	84 81       	ldd	r24, Z+4	; 0x04
     7ea:	88 23       	and	r24, r24
     7ec:	b1 f0       	breq	.+44     	; 0x81a <gfx_mono_spinctrl_spincollection_show+0x4c>
		return;
	}

	/* Draw spinners on screen */
	iterator = spinners->collection;
     7ee:	00 81       	ld	r16, Z
     7f0:	11 81       	ldd	r17, Z+1	; 0x01
     7f2:	c0 e0       	ldi	r28, 0x00	; 0
	for (i = 0; i < spinners->number_of_spinners; i++) {
		gfx_mono_spinctrl_draw(iterator, true);
     7f4:	61 e0       	ldi	r22, 0x01	; 1
     7f6:	c8 01       	movw	r24, r16
     7f8:	04 df       	rcall	.-504    	; 0x602 <gfx_mono_spinctrl_draw>
		iterator = iterator->next;
     7fa:	f8 01       	movw	r30, r16
     7fc:	06 85       	ldd	r16, Z+14	; 0x0e
     7fe:	17 85       	ldd	r17, Z+15	; 0x0f
		return;
	}

	/* Draw spinners on screen */
	iterator = spinners->collection;
	for (i = 0; i < spinners->number_of_spinners; i++) {
     800:	cf 5f       	subi	r28, 0xFF	; 255
     802:	f7 01       	movw	r30, r14
     804:	94 81       	ldd	r25, Z+4	; 0x04
     806:	c9 17       	cp	r28, r25
     808:	a8 f3       	brcs	.-22     	; 0x7f4 <gfx_mono_spinctrl_spincollection_show+0x26>
		gfx_mono_spinctrl_draw(iterator, true);
		iterator = iterator->next;
	}
	/* Draw OK button at bottom of screen */
	gfx_mono_spinctrl_draw_button(true, false);
     80a:	60 e0       	ldi	r22, 0x00	; 0
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	9c de       	rcall	.-712    	; 0x548 <gfx_mono_spinctrl_draw_button>
	/* Draw indicator arrow in front of first spinner */
	gfx_mono_spinctrl_draw_indicator(spinners->collection, true);
     810:	61 e0       	ldi	r22, 0x01	; 1
     812:	f7 01       	movw	r30, r14
     814:	80 81       	ld	r24, Z
     816:	91 81       	ldd	r25, Z+1	; 0x01
     818:	84 de       	rcall	.-760    	; 0x522 <gfx_mono_spinctrl_draw_indicator>
}
     81a:	cf 91       	pop	r28
     81c:	1f 91       	pop	r17
     81e:	0f 91       	pop	r16
     820:	ff 90       	pop	r15
     822:	ef 90       	pop	r14
     824:	08 95       	ret

00000826 <gfx_mono_spinctrl_process_key>:
 * \retval GFX_MONO_SPINCTRL_EVENT_IDLE spinner spinning
 * \retval GFX_MONO_SPINCTRL_EVENT_BACK spinner deselected
 */
int16_t gfx_mono_spinctrl_process_key(struct gfx_mono_spinctrl *spinner,
		uint8_t keycode)
{
     826:	cf 93       	push	r28
     828:	df 93       	push	r29
     82a:	ec 01       	movw	r28, r24
	switch (keycode) {
     82c:	6d 30       	cpi	r22, 0x0D	; 13
     82e:	09 f4       	brne	.+2      	; 0x832 <gfx_mono_spinctrl_process_key+0xc>
     830:	62 c0       	rjmp	.+196    	; 0x8f6 <gfx_mono_spinctrl_process_key+0xd0>
     832:	20 f4       	brcc	.+8      	; 0x83c <gfx_mono_spinctrl_process_key+0x16>
     834:	68 30       	cpi	r22, 0x08	; 8
     836:	09 f4       	brne	.+2      	; 0x83a <gfx_mono_spinctrl_process_key+0x14>
     838:	80 c0       	rjmp	.+256    	; 0x93a <gfx_mono_spinctrl_process_key+0x114>
     83a:	92 c0       	rjmp	.+292    	; 0x960 <gfx_mono_spinctrl_process_key+0x13a>
     83c:	66 32       	cpi	r22, 0x26	; 38
     83e:	79 f1       	breq	.+94     	; 0x89e <gfx_mono_spinctrl_process_key+0x78>
     840:	68 32       	cpi	r22, 0x28	; 40
     842:	09 f0       	breq	.+2      	; 0x846 <gfx_mono_spinctrl_process_key+0x20>
     844:	8d c0       	rjmp	.+282    	; 0x960 <gfx_mono_spinctrl_process_key+0x13a>
	case GFX_MONO_SPINCTRL_KEYCODE_DOWN:
		if (spinner->in_focus) {
     846:	8d 85       	ldd	r24, Y+13	; 0x0d
     848:	88 23       	and	r24, r24
     84a:	09 f4       	brne	.+2      	; 0x84e <gfx_mono_spinctrl_process_key+0x28>
     84c:	8c c0       	rjmp	.+280    	; 0x966 <gfx_mono_spinctrl_process_key+0x140>
static void gfx_mono_spinctrl_step_down(struct gfx_mono_spinctrl *spinner)
{
	/* Check if spinner type is integer or string, increment integer data,
	 * move to next string index.
	 */
	if (spinner->datatype == SPINTYPE_INTEGER) {
     84e:	8a 81       	ldd	r24, Y+2	; 0x02
     850:	81 30       	cpi	r24, 0x01	; 1
     852:	81 f4       	brne	.+32     	; 0x874 <gfx_mono_spinctrl_process_key+0x4e>
		if (spinner->integer_data > spinner->lower_limit) {
     854:	8b 81       	ldd	r24, Y+3	; 0x03
     856:	9c 81       	ldd	r25, Y+4	; 0x04
     858:	28 85       	ldd	r18, Y+8	; 0x08
     85a:	39 85       	ldd	r19, Y+9	; 0x09
     85c:	28 17       	cp	r18, r24
     85e:	39 07       	cpc	r19, r25
     860:	24 f4       	brge	.+8      	; 0x86a <gfx_mono_spinctrl_process_key+0x44>
			spinner->integer_data--;
     862:	01 97       	sbiw	r24, 0x01	; 1
     864:	8b 83       	std	Y+3, r24	; 0x03
     866:	9c 83       	std	Y+4, r25	; 0x04
     868:	14 c0       	rjmp	.+40     	; 0x892 <gfx_mono_spinctrl_process_key+0x6c>
		} else {
			spinner->integer_data = spinner->upper_limit;
     86a:	8a 85       	ldd	r24, Y+10	; 0x0a
     86c:	9b 85       	ldd	r25, Y+11	; 0x0b
     86e:	8b 83       	std	Y+3, r24	; 0x03
     870:	9c 83       	std	Y+4, r25	; 0x04
     872:	0f c0       	rjmp	.+30     	; 0x892 <gfx_mono_spinctrl_process_key+0x6c>
		}
	} else if (spinner->datatype == SPINTYPE_STRING) {
     874:	81 11       	cpse	r24, r1
     876:	0d c0       	rjmp	.+26     	; 0x892 <gfx_mono_spinctrl_process_key+0x6c>
		if (spinner->strings.index > (spinner->lower_limit)) {
     878:	8d 81       	ldd	r24, Y+5	; 0x05
     87a:	48 2f       	mov	r20, r24
     87c:	50 e0       	ldi	r21, 0x00	; 0
     87e:	28 85       	ldd	r18, Y+8	; 0x08
     880:	39 85       	ldd	r19, Y+9	; 0x09
     882:	24 17       	cp	r18, r20
     884:	35 07       	cpc	r19, r21
     886:	1c f4       	brge	.+6      	; 0x88e <gfx_mono_spinctrl_process_key+0x68>
			spinner->strings.index--;
     888:	81 50       	subi	r24, 0x01	; 1
     88a:	8d 83       	std	Y+5, r24	; 0x05
     88c:	02 c0       	rjmp	.+4      	; 0x892 <gfx_mono_spinctrl_process_key+0x6c>
		} else {
			spinner->strings.index = spinner->upper_limit;
     88e:	8a 85       	ldd	r24, Y+10	; 0x0a
     890:	8d 83       	std	Y+5, r24	; 0x05
	switch (keycode) {
	case GFX_MONO_SPINCTRL_KEYCODE_DOWN:
		if (spinner->in_focus) {
			gfx_mono_spinctrl_step_down(spinner);
			/* Update spinner on display */
			gfx_mono_spinctrl_draw(spinner, false);
     892:	60 e0       	ldi	r22, 0x00	; 0
     894:	ce 01       	movw	r24, r28
     896:	b5 de       	rcall	.-662    	; 0x602 <gfx_mono_spinctrl_draw>
		}

		/* Nothing selected yet */
		return GFX_MONO_SPINCTRL_EVENT_IDLE;
     898:	8f ef       	ldi	r24, 0xFF	; 255
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	69 c0       	rjmp	.+210    	; 0x970 <gfx_mono_spinctrl_process_key+0x14a>

	case GFX_MONO_SPINCTRL_KEYCODE_UP:
		if (spinner->in_focus) {
     89e:	8d 85       	ldd	r24, Y+13	; 0x0d
     8a0:	88 23       	and	r24, r24
     8a2:	09 f4       	brne	.+2      	; 0x8a6 <gfx_mono_spinctrl_process_key+0x80>
     8a4:	63 c0       	rjmp	.+198    	; 0x96c <gfx_mono_spinctrl_process_key+0x146>
static void gfx_mono_spinctrl_step_up(struct gfx_mono_spinctrl *spinner)
{
	/* Check if spinner type is integer or string, increment integer data or
	 * move to next string index.
	 */
	if (spinner->datatype == SPINTYPE_INTEGER) {
     8a6:	8a 81       	ldd	r24, Y+2	; 0x02
     8a8:	81 30       	cpi	r24, 0x01	; 1
     8aa:	81 f4       	brne	.+32     	; 0x8cc <gfx_mono_spinctrl_process_key+0xa6>
		if (spinner->integer_data < spinner->upper_limit) {
     8ac:	8b 81       	ldd	r24, Y+3	; 0x03
     8ae:	9c 81       	ldd	r25, Y+4	; 0x04
     8b0:	2a 85       	ldd	r18, Y+10	; 0x0a
     8b2:	3b 85       	ldd	r19, Y+11	; 0x0b
     8b4:	82 17       	cp	r24, r18
     8b6:	93 07       	cpc	r25, r19
     8b8:	24 f4       	brge	.+8      	; 0x8c2 <gfx_mono_spinctrl_process_key+0x9c>
			spinner->integer_data++;
     8ba:	01 96       	adiw	r24, 0x01	; 1
     8bc:	8b 83       	std	Y+3, r24	; 0x03
     8be:	9c 83       	std	Y+4, r25	; 0x04
     8c0:	14 c0       	rjmp	.+40     	; 0x8ea <gfx_mono_spinctrl_process_key+0xc4>
		} else {
			spinner->integer_data = spinner->lower_limit;
     8c2:	88 85       	ldd	r24, Y+8	; 0x08
     8c4:	99 85       	ldd	r25, Y+9	; 0x09
     8c6:	8b 83       	std	Y+3, r24	; 0x03
     8c8:	9c 83       	std	Y+4, r25	; 0x04
     8ca:	0f c0       	rjmp	.+30     	; 0x8ea <gfx_mono_spinctrl_process_key+0xc4>
		}
	} else if (spinner->datatype == SPINTYPE_STRING) {
     8cc:	81 11       	cpse	r24, r1
     8ce:	0d c0       	rjmp	.+26     	; 0x8ea <gfx_mono_spinctrl_process_key+0xc4>
		if (spinner->strings.index < spinner->upper_limit) {
     8d0:	8d 81       	ldd	r24, Y+5	; 0x05
     8d2:	48 2f       	mov	r20, r24
     8d4:	50 e0       	ldi	r21, 0x00	; 0
     8d6:	2a 85       	ldd	r18, Y+10	; 0x0a
     8d8:	3b 85       	ldd	r19, Y+11	; 0x0b
     8da:	42 17       	cp	r20, r18
     8dc:	53 07       	cpc	r21, r19
     8de:	1c f4       	brge	.+6      	; 0x8e6 <gfx_mono_spinctrl_process_key+0xc0>
			spinner->strings.index++;
     8e0:	8f 5f       	subi	r24, 0xFF	; 255
     8e2:	8d 83       	std	Y+5, r24	; 0x05
     8e4:	02 c0       	rjmp	.+4      	; 0x8ea <gfx_mono_spinctrl_process_key+0xc4>
		} else {
			(spinner->strings.index) = spinner->lower_limit;
     8e6:	88 85       	ldd	r24, Y+8	; 0x08
     8e8:	8d 83       	std	Y+5, r24	; 0x05

	case GFX_MONO_SPINCTRL_KEYCODE_UP:
		if (spinner->in_focus) {
			gfx_mono_spinctrl_step_up(spinner);
			/* Update spinner on display */
			gfx_mono_spinctrl_draw(spinner, false);
     8ea:	60 e0       	ldi	r22, 0x00	; 0
     8ec:	ce 01       	movw	r24, r28
     8ee:	89 de       	rcall	.-750    	; 0x602 <gfx_mono_spinctrl_draw>
		}

		/* Nothing selected yet */
		return GFX_MONO_SPINCTRL_EVENT_IDLE;
     8f0:	8f ef       	ldi	r24, 0xFF	; 255
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	3d c0       	rjmp	.+122    	; 0x970 <gfx_mono_spinctrl_process_key+0x14a>

	case GFX_MONO_SPINCTRL_KEYCODE_ENTER:
		if (spinner->in_focus) {
     8f6:	8d 85       	ldd	r24, Y+13	; 0x0d
     8f8:	88 23       	and	r24, r24
     8fa:	b9 f0       	breq	.+46     	; 0x92a <gfx_mono_spinctrl_process_key+0x104>
			if (spinner->datatype == SPINTYPE_INTEGER) {
     8fc:	8a 81       	ldd	r24, Y+2	; 0x02
     8fe:	81 30       	cpi	r24, 0x01	; 1
     900:	49 f4       	brne	.+18     	; 0x914 <gfx_mono_spinctrl_process_key+0xee>
				spinner->in_focus = false;
     902:	1d 86       	std	Y+13, r1	; 0x0d
				gfx_mono_spinctrl_draw(spinner, false);
     904:	60 e0       	ldi	r22, 0x00	; 0
     906:	ce 01       	movw	r24, r28
     908:	7c de       	rcall	.-776    	; 0x602 <gfx_mono_spinctrl_draw>
				/* Store saved value in case of aborting spinner
				 * later */
				spinner->last_saved_value
					= spinner->integer_data;
     90a:	8b 81       	ldd	r24, Y+3	; 0x03
     90c:	9c 81       	ldd	r25, Y+4	; 0x04
     90e:	8e 83       	std	Y+6, r24	; 0x06
     910:	9f 83       	std	Y+7, r25	; 0x07
				/* Got what we want. Return selection. */
				return spinner->integer_data;
     912:	2e c0       	rjmp	.+92     	; 0x970 <gfx_mono_spinctrl_process_key+0x14a>
			} else if (spinner->datatype == SPINTYPE_STRING) {
     914:	81 11       	cpse	r24, r1
     916:	11 c0       	rjmp	.+34     	; 0x93a <gfx_mono_spinctrl_process_key+0x114>
				spinner->in_focus = false;
     918:	1d 86       	std	Y+13, r1	; 0x0d
				gfx_mono_spinctrl_draw(spinner, false);
     91a:	60 e0       	ldi	r22, 0x00	; 0
     91c:	ce 01       	movw	r24, r28
     91e:	71 de       	rcall	.-798    	; 0x602 <gfx_mono_spinctrl_draw>
				/* Store saved value in case of aborting spinner
				 * later */
				spinner->last_saved_value
					= spinner->strings.index;
     920:	8d 81       	ldd	r24, Y+5	; 0x05
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	8e 83       	std	Y+6, r24	; 0x06
     926:	9f 83       	std	Y+7, r25	; 0x07
				/* Got what we want. Return selection. */
				return spinner->strings.index;
     928:	23 c0       	rjmp	.+70     	; 0x970 <gfx_mono_spinctrl_process_key+0x14a>
			}
		} else {
			/* Spinner selected */
			spinner->in_focus = true;
     92a:	81 e0       	ldi	r24, 0x01	; 1
     92c:	8d 87       	std	Y+13, r24	; 0x0d
			gfx_mono_spinctrl_draw(spinner, false);
     92e:	60 e0       	ldi	r22, 0x00	; 0
     930:	ce 01       	movw	r24, r28
     932:	67 de       	rcall	.-818    	; 0x602 <gfx_mono_spinctrl_draw>
			return GFX_MONO_SPINCTRL_EVENT_IDLE;
     934:	8f ef       	ldi	r24, 0xFF	; 255
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	1b c0       	rjmp	.+54     	; 0x970 <gfx_mono_spinctrl_process_key+0x14a>
		}

	case GFX_MONO_SPINCTRL_KEYCODE_BACK:
		/* User pressed "back" key, */
		spinner->in_focus = false;
     93a:	1d 86       	std	Y+13, r1	; 0x0d
		/* Spinner choice aborted, show last saved value instead */
		if (spinner->datatype == SPINTYPE_INTEGER) {
     93c:	8a 81       	ldd	r24, Y+2	; 0x02
     93e:	81 30       	cpi	r24, 0x01	; 1
     940:	29 f4       	brne	.+10     	; 0x94c <gfx_mono_spinctrl_process_key+0x126>
			spinner->integer_data = spinner->last_saved_value;
     942:	8e 81       	ldd	r24, Y+6	; 0x06
     944:	9f 81       	ldd	r25, Y+7	; 0x07
     946:	8b 83       	std	Y+3, r24	; 0x03
     948:	9c 83       	std	Y+4, r25	; 0x04
     94a:	04 c0       	rjmp	.+8      	; 0x954 <gfx_mono_spinctrl_process_key+0x12e>
		} else if (spinner->datatype == SPINTYPE_STRING) {
     94c:	81 11       	cpse	r24, r1
     94e:	02 c0       	rjmp	.+4      	; 0x954 <gfx_mono_spinctrl_process_key+0x12e>
			spinner->strings.index = spinner->last_saved_value;
     950:	8e 81       	ldd	r24, Y+6	; 0x06
     952:	8d 83       	std	Y+5, r24	; 0x05
		}

		gfx_mono_spinctrl_draw(spinner, false);
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	ce 01       	movw	r24, r28
     958:	54 de       	rcall	.-856    	; 0x602 <gfx_mono_spinctrl_draw>
		return GFX_MONO_SPINCTRL_EVENT_BACK;
     95a:	8e ef       	ldi	r24, 0xFE	; 254
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	08 c0       	rjmp	.+16     	; 0x970 <gfx_mono_spinctrl_process_key+0x14a>

	default:
		/* Unknown key event */
		return GFX_MONO_SPINCTRL_EVENT_IDLE;
     960:	8f ef       	ldi	r24, 0xFF	; 255
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	05 c0       	rjmp	.+10     	; 0x970 <gfx_mono_spinctrl_process_key+0x14a>
			/* Update spinner on display */
			gfx_mono_spinctrl_draw(spinner, false);
		}

		/* Nothing selected yet */
		return GFX_MONO_SPINCTRL_EVENT_IDLE;
     966:	8f ef       	ldi	r24, 0xFF	; 255
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	02 c0       	rjmp	.+4      	; 0x970 <gfx_mono_spinctrl_process_key+0x14a>
			/* Update spinner on display */
			gfx_mono_spinctrl_draw(spinner, false);
		}

		/* Nothing selected yet */
		return GFX_MONO_SPINCTRL_EVENT_IDLE;
     96c:	8f ef       	ldi	r24, 0xFF	; 255
     96e:	90 e0       	ldi	r25, 0x00	; 0

	default:
		/* Unknown key event */
		return GFX_MONO_SPINCTRL_EVENT_IDLE;
	}
}
     970:	df 91       	pop	r29
     972:	cf 91       	pop	r28
     974:	08 95       	ret

00000976 <gfx_mono_spinctrl_spincollection_process_key>:
 * \retval GFX_MONO_SPINCTRL_EVENT_IDLE    user is navigating in spincollection
 */
int16_t gfx_mono_spinctrl_spincollection_process_key(struct
		gfx_mono_spinctrl_spincollection *spinners, uint8_t keycode,
		int16_t results[])
{
     976:	ef 92       	push	r14
     978:	ff 92       	push	r15
     97a:	0f 93       	push	r16
     97c:	1f 93       	push	r17
     97e:	cf 93       	push	r28
     980:	df 93       	push	r29
     982:	ec 01       	movw	r28, r24
	uint8_t i;
	struct gfx_mono_spinctrl *iterator;

	/* Make sure there are spinners in the collection, if not, cancel */
	if (spinners->number_of_spinners == 0) {
     984:	8c 81       	ldd	r24, Y+4	; 0x04
     986:	88 23       	and	r24, r24
     988:	09 f4       	brne	.+2      	; 0x98c <gfx_mono_spinctrl_spincollection_process_key+0x16>
     98a:	ca c0       	rjmp	.+404    	; 0xb20 <gfx_mono_spinctrl_spincollection_process_key+0x1aa>
		return GFX_MONO_SPINCTRL_EVENT_BACK;
	}

	/* Store initial values in results array first time function is run */
	if (spinners->init) {
     98c:	89 85       	ldd	r24, Y+9	; 0x09
     98e:	88 23       	and	r24, r24
     990:	51 f1       	breq	.+84     	; 0x9e6 <gfx_mono_spinctrl_spincollection_process_key+0x70>
		iterator = spinners->collection;
     992:	a8 81       	ld	r26, Y
     994:	b9 81       	ldd	r27, Y+1	; 0x01
     996:	90 e0       	ldi	r25, 0x00	; 0
		for (i = 0; i < spinners->number_of_spinners; i++) {
			if (iterator->datatype == SPINTYPE_INTEGER) {
     998:	12 96       	adiw	r26, 0x02	; 2
     99a:	8c 91       	ld	r24, X
     99c:	12 97       	sbiw	r26, 0x02	; 2
     99e:	81 30       	cpi	r24, 0x01	; 1
     9a0:	69 f4       	brne	.+26     	; 0x9bc <gfx_mono_spinctrl_spincollection_process_key+0x46>
				results[i] = iterator->integer_data;
     9a2:	13 96       	adiw	r26, 0x03	; 3
     9a4:	2d 91       	ld	r18, X+
     9a6:	3c 91       	ld	r19, X
     9a8:	14 97       	sbiw	r26, 0x04	; 4
     9aa:	e9 2f       	mov	r30, r25
     9ac:	f0 e0       	ldi	r31, 0x00	; 0
     9ae:	ee 0f       	add	r30, r30
     9b0:	ff 1f       	adc	r31, r31
     9b2:	e4 0f       	add	r30, r20
     9b4:	f5 1f       	adc	r31, r21
     9b6:	20 83       	st	Z, r18
     9b8:	31 83       	std	Z+1, r19	; 0x01
     9ba:	0c c0       	rjmp	.+24     	; 0x9d4 <gfx_mono_spinctrl_spincollection_process_key+0x5e>
			} else {
				results[i] = iterator->strings.index;
     9bc:	e9 2f       	mov	r30, r25
     9be:	f0 e0       	ldi	r31, 0x00	; 0
     9c0:	ee 0f       	add	r30, r30
     9c2:	ff 1f       	adc	r31, r31
     9c4:	e4 0f       	add	r30, r20
     9c6:	f5 1f       	adc	r31, r21
     9c8:	15 96       	adiw	r26, 0x05	; 5
     9ca:	2c 91       	ld	r18, X
     9cc:	15 97       	sbiw	r26, 0x05	; 5
     9ce:	30 e0       	ldi	r19, 0x00	; 0
     9d0:	20 83       	st	Z, r18
     9d2:	31 83       	std	Z+1, r19	; 0x01
			}

			iterator = iterator->next;
     9d4:	1e 96       	adiw	r26, 0x0e	; 14
     9d6:	0d 90       	ld	r0, X+
     9d8:	bc 91       	ld	r27, X
     9da:	a0 2d       	mov	r26, r0
	}

	/* Store initial values in results array first time function is run */
	if (spinners->init) {
		iterator = spinners->collection;
		for (i = 0; i < spinners->number_of_spinners; i++) {
     9dc:	9f 5f       	subi	r25, 0xFF	; 255
     9de:	8c 81       	ldd	r24, Y+4	; 0x04
     9e0:	98 17       	cp	r25, r24
     9e2:	d0 f2       	brcs	.-76     	; 0x998 <gfx_mono_spinctrl_spincollection_process_key+0x22>
				results[i] = iterator->strings.index;
			}

			iterator = iterator->next;
		}
		spinners->init = false;
     9e4:	19 86       	std	Y+9, r1	; 0x09
	}

	/* Find current spinner selection */
	iterator = spinners->collection;
     9e6:	08 81       	ld	r16, Y
     9e8:	19 81       	ldd	r17, Y+1	; 0x01
	if (spinners->current_selection != GFX_MONO_SPINCTRL_BUTTON) {
     9ea:	2d 81       	ldd	r18, Y+5	; 0x05
		for (i = 0; i < spinners->current_selection; i++) {
     9ec:	8f ef       	ldi	r24, 0xFF	; 255
     9ee:	82 0f       	add	r24, r18
     9f0:	8e 3f       	cpi	r24, 0xFE	; 254
     9f2:	38 f4       	brcc	.+14     	; 0xa02 <gfx_mono_spinctrl_spincollection_process_key+0x8c>
     9f4:	90 e0       	ldi	r25, 0x00	; 0
			iterator = iterator->next;
     9f6:	f8 01       	movw	r30, r16
     9f8:	06 85       	ldd	r16, Z+14	; 0x0e
     9fa:	17 85       	ldd	r17, Z+15	; 0x0f
	}

	/* Find current spinner selection */
	iterator = spinners->collection;
	if (spinners->current_selection != GFX_MONO_SPINCTRL_BUTTON) {
		for (i = 0; i < spinners->current_selection; i++) {
     9fc:	9f 5f       	subi	r25, 0xFF	; 255
     9fe:	92 13       	cpse	r25, r18
     a00:	fa cf       	rjmp	.-12     	; 0x9f6 <gfx_mono_spinctrl_spincollection_process_key+0x80>
     a02:	7a 01       	movw	r14, r20
			iterator = iterator->next;
		}
	}

	if (spinners->active_spinner) {
     a04:	88 85       	ldd	r24, Y+8	; 0x08
     a06:	88 23       	and	r24, r24
     a08:	e1 f0       	breq	.+56     	; 0xa42 <gfx_mono_spinctrl_spincollection_process_key+0xcc>
		/* Process chosen spinner */
		spinners->selection = gfx_mono_spinctrl_process_key(iterator,
     a0a:	c8 01       	movw	r24, r16
     a0c:	0c df       	rcall	.-488    	; 0x826 <gfx_mono_spinctrl_process_key>
     a0e:	8e 83       	std	Y+6, r24	; 0x06
     a10:	9f 83       	std	Y+7, r25	; 0x07
				keycode);
		if (spinners->selection == GFX_MONO_SPINCTRL_EVENT_BACK) {
     a12:	8e 3f       	cpi	r24, 0xFE	; 254
     a14:	91 05       	cpc	r25, r1
     a16:	21 f4       	brne	.+8      	; 0xa20 <gfx_mono_spinctrl_spincollection_process_key+0xaa>
			/* User has exited spinner without saving the result */
			spinners->active_spinner = false;
     a18:	18 86       	std	Y+8, r1	; 0x08
				= spinners->selection;
			/* Step out of spinner and into spincollection */
			spinners->active_spinner = false;
		}

		return GFX_MONO_SPINCTRL_EVENT_IDLE;
     a1a:	8f ef       	ldi	r24, 0xFF	; 255
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	8b c0       	rjmp	.+278    	; 0xb36 <gfx_mono_spinctrl_spincollection_process_key+0x1c0>
		spinners->selection = gfx_mono_spinctrl_process_key(iterator,
				keycode);
		if (spinners->selection == GFX_MONO_SPINCTRL_EVENT_BACK) {
			/* User has exited spinner without saving the result */
			spinners->active_spinner = false;
		} else if (spinners->selection !=
     a20:	8f 3f       	cpi	r24, 0xFF	; 255
     a22:	91 05       	cpc	r25, r1
     a24:	09 f4       	brne	.+2      	; 0xa28 <gfx_mono_spinctrl_spincollection_process_key+0xb2>
     a26:	7f c0       	rjmp	.+254    	; 0xb26 <gfx_mono_spinctrl_spincollection_process_key+0x1b0>
				GFX_MONO_SPINCTRL_EVENT_IDLE) {
			/* Value selected, store in array */
			results[spinners->current_selection]
     a28:	4d 81       	ldd	r20, Y+5	; 0x05
     a2a:	50 e0       	ldi	r21, 0x00	; 0
				= spinners->selection;
     a2c:	44 0f       	add	r20, r20
     a2e:	55 1f       	adc	r21, r21
     a30:	f7 01       	movw	r30, r14
     a32:	e4 0f       	add	r30, r20
     a34:	f5 1f       	adc	r31, r21
     a36:	80 83       	st	Z, r24
     a38:	91 83       	std	Z+1, r25	; 0x01
			/* Step out of spinner and into spincollection */
			spinners->active_spinner = false;
     a3a:	18 86       	std	Y+8, r1	; 0x08
		}

		return GFX_MONO_SPINCTRL_EVENT_IDLE;
     a3c:	8f ef       	ldi	r24, 0xFF	; 255
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	7a c0       	rjmp	.+244    	; 0xb36 <gfx_mono_spinctrl_spincollection_process_key+0x1c0>
	} else {
		switch (keycode) {
     a42:	6d 30       	cpi	r22, 0x0D	; 13
     a44:	09 f4       	brne	.+2      	; 0xa48 <gfx_mono_spinctrl_spincollection_process_key+0xd2>
     a46:	62 c0       	rjmp	.+196    	; 0xb0c <gfx_mono_spinctrl_spincollection_process_key+0x196>
     a48:	20 f4       	brcc	.+8      	; 0xa52 <gfx_mono_spinctrl_spincollection_process_key+0xdc>
     a4a:	68 30       	cpi	r22, 0x08	; 8
     a4c:	09 f4       	brne	.+2      	; 0xa50 <gfx_mono_spinctrl_spincollection_process_key+0xda>
     a4e:	6e c0       	rjmp	.+220    	; 0xb2c <gfx_mono_spinctrl_spincollection_process_key+0x1b6>
     a50:	04 c0       	rjmp	.+8      	; 0xa5a <gfx_mono_spinctrl_spincollection_process_key+0xe4>
     a52:	66 32       	cpi	r22, 0x26	; 38
     a54:	89 f1       	breq	.+98     	; 0xab8 <gfx_mono_spinctrl_spincollection_process_key+0x142>
     a56:	68 32       	cpi	r22, 0x28	; 40
     a58:	19 f0       	breq	.+6      	; 0xa60 <gfx_mono_spinctrl_spincollection_process_key+0xea>
			/* User pressed "back" key, */
			return GFX_MONO_SPINCTRL_EVENT_BACK;

		default:
			/* Unknown key event */
			return GFX_MONO_SPINCTRL_EVENT_IDLE;
     a5a:	8f ef       	ldi	r24, 0xFF	; 255
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	6b c0       	rjmp	.+214    	; 0xb36 <gfx_mono_spinctrl_spincollection_process_key+0x1c0>

		return GFX_MONO_SPINCTRL_EVENT_IDLE;
	} else {
		switch (keycode) {
		case GFX_MONO_SPINCTRL_KEYCODE_DOWN:
			if (spinners->current_selection ==
     a60:	2f 3f       	cpi	r18, 0xFF	; 255
     a62:	51 f4       	brne	.+20     	; 0xa78 <gfx_mono_spinctrl_spincollection_process_key+0x102>
					GFX_MONO_SPINCTRL_BUTTON) {
				spinners->current_selection = 0;
     a64:	1d 82       	std	Y+5, r1	; 0x05
				/* Delete indicator arrow in front of button */
				gfx_mono_spinctrl_draw_button(true, false);
     a66:	60 e0       	ldi	r22, 0x00	; 0
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	6e dd       	rcall	.-1316   	; 0x548 <gfx_mono_spinctrl_draw_button>
				/* Draw indicator arrow in front of first
				 * spinner */
				gfx_mono_spinctrl_draw_indicator(iterator,
     a6c:	61 e0       	ldi	r22, 0x01	; 1
     a6e:	c8 01       	movw	r24, r16
     a70:	58 dd       	rcall	.-1360   	; 0x522 <gfx_mono_spinctrl_draw_indicator>
					= GFX_MONO_SPINCTRL_BUTTON;
				/* Draw indicator arrow in front of button */
				gfx_mono_spinctrl_draw_button(true, true);
			}

			return GFX_MONO_SPINCTRL_EVENT_IDLE;
     a72:	8f ef       	ldi	r24, 0xFF	; 255
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	5f c0       	rjmp	.+190    	; 0xb36 <gfx_mono_spinctrl_spincollection_process_key+0x1c0>
				gfx_mono_spinctrl_draw_button(true, false);
				/* Draw indicator arrow in front of first
				 * spinner */
				gfx_mono_spinctrl_draw_indicator(iterator,
						true);
			} else if (spinners->current_selection <
     a78:	30 e0       	ldi	r19, 0x00	; 0
					spinners->number_of_spinners - 1) {
     a7a:	8c 81       	ldd	r24, Y+4	; 0x04
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	01 97       	sbiw	r24, 0x01	; 1
				gfx_mono_spinctrl_draw_button(true, false);
				/* Draw indicator arrow in front of first
				 * spinner */
				gfx_mono_spinctrl_draw_indicator(iterator,
						true);
			} else if (spinners->current_selection <
     a80:	28 17       	cp	r18, r24
     a82:	39 07       	cpc	r19, r25
     a84:	74 f4       	brge	.+28     	; 0xaa2 <gfx_mono_spinctrl_spincollection_process_key+0x12c>
					spinners->number_of_spinners - 1) {
				/* Delete indicator arrow */
				gfx_mono_spinctrl_draw_indicator(iterator,
     a86:	60 e0       	ldi	r22, 0x00	; 0
     a88:	c8 01       	movw	r24, r16
     a8a:	4b dd       	rcall	.-1386   	; 0x522 <gfx_mono_spinctrl_draw_indicator>
						false);
				spinners->current_selection++;
     a8c:	8d 81       	ldd	r24, Y+5	; 0x05
     a8e:	8f 5f       	subi	r24, 0xFF	; 255
     a90:	8d 83       	std	Y+5, r24	; 0x05
				/* Draw indicator arrow in front of new spinner */
				gfx_mono_spinctrl_draw_indicator(iterator->next,
     a92:	61 e0       	ldi	r22, 0x01	; 1
     a94:	f8 01       	movw	r30, r16
     a96:	86 85       	ldd	r24, Z+14	; 0x0e
     a98:	97 85       	ldd	r25, Z+15	; 0x0f
     a9a:	43 dd       	rcall	.-1402   	; 0x522 <gfx_mono_spinctrl_draw_indicator>
					= GFX_MONO_SPINCTRL_BUTTON;
				/* Draw indicator arrow in front of button */
				gfx_mono_spinctrl_draw_button(true, true);
			}

			return GFX_MONO_SPINCTRL_EVENT_IDLE;
     a9c:	8f ef       	ldi	r24, 0xFF	; 255
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	4a c0       	rjmp	.+148    	; 0xb36 <gfx_mono_spinctrl_spincollection_process_key+0x1c0>
				/* Draw indicator arrow in front of new spinner */
				gfx_mono_spinctrl_draw_indicator(iterator->next,
						true);
			} else {
				/* Delete indicator arrow */
				gfx_mono_spinctrl_draw_indicator(iterator,
     aa2:	60 e0       	ldi	r22, 0x00	; 0
     aa4:	c8 01       	movw	r24, r16
     aa6:	3d dd       	rcall	.-1414   	; 0x522 <gfx_mono_spinctrl_draw_indicator>
						false);
				spinners->current_selection
					= GFX_MONO_SPINCTRL_BUTTON;
     aa8:	8f ef       	ldi	r24, 0xFF	; 255
     aaa:	8d 83       	std	Y+5, r24	; 0x05
				/* Draw indicator arrow in front of button */
				gfx_mono_spinctrl_draw_button(true, true);
     aac:	61 e0       	ldi	r22, 0x01	; 1
     aae:	81 e0       	ldi	r24, 0x01	; 1
     ab0:	4b dd       	rcall	.-1386   	; 0x548 <gfx_mono_spinctrl_draw_button>
			}

			return GFX_MONO_SPINCTRL_EVENT_IDLE;
     ab2:	8f ef       	ldi	r24, 0xFF	; 255
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	3f c0       	rjmp	.+126    	; 0xb36 <gfx_mono_spinctrl_spincollection_process_key+0x1c0>

		case GFX_MONO_SPINCTRL_KEYCODE_UP:
			if (spinners->current_selection ==
     ab8:	2f 3f       	cpi	r18, 0xFF	; 255
     aba:	69 f4       	brne	.+26     	; 0xad6 <gfx_mono_spinctrl_spincollection_process_key+0x160>
					GFX_MONO_SPINCTRL_BUTTON) {
				/* Delete indicator arrow in front of button */
				gfx_mono_spinctrl_draw_button(true, false);
     abc:	60 e0       	ldi	r22, 0x00	; 0
     abe:	81 e0       	ldi	r24, 0x01	; 1
     ac0:	43 dd       	rcall	.-1402   	; 0x548 <gfx_mono_spinctrl_draw_button>
				spinners->current_selection
					= spinners->number_of_spinners - 1;
     ac2:	8c 81       	ldd	r24, Y+4	; 0x04
     ac4:	81 50       	subi	r24, 0x01	; 1
     ac6:	8d 83       	std	Y+5, r24	; 0x05
				/* Draw indicator arrow in front of new spinner */
				gfx_mono_spinctrl_draw_indicator(
     ac8:	61 e0       	ldi	r22, 0x01	; 1
     aca:	8a 81       	ldd	r24, Y+2	; 0x02
     acc:	9b 81       	ldd	r25, Y+3	; 0x03
     ace:	29 dd       	rcall	.-1454   	; 0x522 <gfx_mono_spinctrl_draw_indicator>
					= GFX_MONO_SPINCTRL_BUTTON;
				/* Draw indicator arrow in front of button */
				gfx_mono_spinctrl_draw_button(true, true);
			}

			return GFX_MONO_SPINCTRL_EVENT_IDLE;
     ad0:	8f ef       	ldi	r24, 0xFF	; 255
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	30 c0       	rjmp	.+96     	; 0xb36 <gfx_mono_spinctrl_spincollection_process_key+0x1c0>
					= spinners->number_of_spinners - 1;
				/* Draw indicator arrow in front of new spinner */
				gfx_mono_spinctrl_draw_indicator(
						spinners->collection_last,
						true);
			} else if (spinners->current_selection > 0) {
     ad6:	22 23       	and	r18, r18
     ad8:	71 f0       	breq	.+28     	; 0xaf6 <gfx_mono_spinctrl_spincollection_process_key+0x180>
				/* Delete indicator arrow */
				gfx_mono_spinctrl_draw_indicator(iterator,
     ada:	60 e0       	ldi	r22, 0x00	; 0
     adc:	c8 01       	movw	r24, r16
     ade:	21 dd       	rcall	.-1470   	; 0x522 <gfx_mono_spinctrl_draw_indicator>
						false);
				spinners->current_selection--;
     ae0:	8d 81       	ldd	r24, Y+5	; 0x05
     ae2:	81 50       	subi	r24, 0x01	; 1
     ae4:	8d 83       	std	Y+5, r24	; 0x05
				/* Draw indicator arrow in front of new spinner */
				gfx_mono_spinctrl_draw_indicator(iterator->prev,
     ae6:	61 e0       	ldi	r22, 0x01	; 1
     ae8:	f8 01       	movw	r30, r16
     aea:	80 89       	ldd	r24, Z+16	; 0x10
     aec:	91 89       	ldd	r25, Z+17	; 0x11
     aee:	19 dd       	rcall	.-1486   	; 0x522 <gfx_mono_spinctrl_draw_indicator>
					= GFX_MONO_SPINCTRL_BUTTON;
				/* Draw indicator arrow in front of button */
				gfx_mono_spinctrl_draw_button(true, true);
			}

			return GFX_MONO_SPINCTRL_EVENT_IDLE;
     af0:	8f ef       	ldi	r24, 0xFF	; 255
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	20 c0       	rjmp	.+64     	; 0xb36 <gfx_mono_spinctrl_spincollection_process_key+0x1c0>
				/* Draw indicator arrow in front of new spinner */
				gfx_mono_spinctrl_draw_indicator(iterator->prev,
						true);
			} else {
				/* Delete indicator arrow */
				gfx_mono_spinctrl_draw_indicator(iterator,
     af6:	60 e0       	ldi	r22, 0x00	; 0
     af8:	c8 01       	movw	r24, r16
     afa:	13 dd       	rcall	.-1498   	; 0x522 <gfx_mono_spinctrl_draw_indicator>
						false);
				spinners->current_selection
					= GFX_MONO_SPINCTRL_BUTTON;
     afc:	8f ef       	ldi	r24, 0xFF	; 255
     afe:	8d 83       	std	Y+5, r24	; 0x05
				/* Draw indicator arrow in front of button */
				gfx_mono_spinctrl_draw_button(true, true);
     b00:	61 e0       	ldi	r22, 0x01	; 1
     b02:	81 e0       	ldi	r24, 0x01	; 1
     b04:	21 dd       	rcall	.-1470   	; 0x548 <gfx_mono_spinctrl_draw_button>
			}

			return GFX_MONO_SPINCTRL_EVENT_IDLE;
     b06:	8f ef       	ldi	r24, 0xFF	; 255
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	15 c0       	rjmp	.+42     	; 0xb36 <gfx_mono_spinctrl_spincollection_process_key+0x1c0>

		case GFX_MONO_SPINCTRL_KEYCODE_ENTER:
			if (spinners->current_selection ==
     b0c:	2f 3f       	cpi	r18, 0xFF	; 255
     b0e:	89 f0       	breq	.+34     	; 0xb32 <gfx_mono_spinctrl_spincollection_process_key+0x1bc>
				/* Finished with all selections, return */
				return GFX_MONO_SPINCTRL_EVENT_FINISH;
			} else {
				/* Spinner selected, send next keycode directly
				 * to spinner */
				gfx_mono_spinctrl_process_key(iterator,
     b10:	6d e0       	ldi	r22, 0x0D	; 13
     b12:	c8 01       	movw	r24, r16
     b14:	88 de       	rcall	.-752    	; 0x826 <gfx_mono_spinctrl_process_key>
						keycode);
				spinners->active_spinner = true;
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	88 87       	std	Y+8, r24	; 0x08
				return GFX_MONO_SPINCTRL_EVENT_IDLE;
     b1a:	8f ef       	ldi	r24, 0xFF	; 255
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	0b c0       	rjmp	.+22     	; 0xb36 <gfx_mono_spinctrl_spincollection_process_key+0x1c0>
	uint8_t i;
	struct gfx_mono_spinctrl *iterator;

	/* Make sure there are spinners in the collection, if not, cancel */
	if (spinners->number_of_spinners == 0) {
		return GFX_MONO_SPINCTRL_EVENT_BACK;
     b20:	8e ef       	ldi	r24, 0xFE	; 254
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	08 c0       	rjmp	.+16     	; 0xb36 <gfx_mono_spinctrl_spincollection_process_key+0x1c0>
				= spinners->selection;
			/* Step out of spinner and into spincollection */
			spinners->active_spinner = false;
		}

		return GFX_MONO_SPINCTRL_EVENT_IDLE;
     b26:	8f ef       	ldi	r24, 0xFF	; 255
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	05 c0       	rjmp	.+10     	; 0xb36 <gfx_mono_spinctrl_spincollection_process_key+0x1c0>
				return GFX_MONO_SPINCTRL_EVENT_IDLE;
			}

		case GFX_MONO_SPINCTRL_KEYCODE_BACK:
			/* User pressed "back" key, */
			return GFX_MONO_SPINCTRL_EVENT_BACK;
     b2c:	8e ef       	ldi	r24, 0xFE	; 254
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	02 c0       	rjmp	.+4      	; 0xb36 <gfx_mono_spinctrl_spincollection_process_key+0x1c0>

		case GFX_MONO_SPINCTRL_KEYCODE_ENTER:
			if (spinners->current_selection ==
					GFX_MONO_SPINCTRL_BUTTON) {
				/* Finished with all selections, return */
				return GFX_MONO_SPINCTRL_EVENT_FINISH;
     b32:	8d ef       	ldi	r24, 0xFD	; 253
     b34:	90 e0       	ldi	r25, 0x00	; 0
		default:
			/* Unknown key event */
			return GFX_MONO_SPINCTRL_EVENT_IDLE;
		}
	}
}
     b36:	df 91       	pop	r29
     b38:	cf 91       	pop	r28
     b3a:	1f 91       	pop	r17
     b3c:	0f 91       	pop	r16
     b3e:	ff 90       	pop	r15
     b40:	ef 90       	pop	r14
     b42:	08 95       	ret

00000b44 <gfx_mono_draw_char>:
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
     b44:	af 92       	push	r10
     b46:	bf 92       	push	r11
     b48:	cf 92       	push	r12
     b4a:	df 92       	push	r13
     b4c:	ef 92       	push	r14
     b4e:	ff 92       	push	r15
     b50:	0f 93       	push	r16
     b52:	1f 93       	push	r17
     b54:	cf 93       	push	r28
     b56:	df 93       	push	r29
     b58:	c8 2f       	mov	r28, r24
     b5a:	e6 2e       	mov	r14, r22
     b5c:	b4 2e       	mov	r11, r20
     b5e:	69 01       	movw	r12, r18
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
     b60:	00 e0       	ldi	r16, 0x00	; 0
     b62:	f9 01       	movw	r30, r18
     b64:	24 81       	ldd	r18, Z+4	; 0x04
     b66:	43 81       	ldd	r20, Z+3	; 0x03
     b68:	6b 2d       	mov	r22, r11
     b6a:	8e 2d       	mov	r24, r14
     b6c:	3d d2       	rcall	.+1146   	; 0xfe8 <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	switch (font->type) {
     b6e:	f6 01       	movw	r30, r12
     b70:	80 81       	ld	r24, Z
     b72:	81 11       	cpse	r24, r1
     b74:	39 c0       	rjmp	.+114    	; 0xbe8 <gfx_mono_draw_char+0xa4>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
     b76:	83 81       	ldd	r24, Z+3	; 0x03
     b78:	28 2f       	mov	r18, r24
     b7a:	26 95       	lsr	r18
     b7c:	26 95       	lsr	r18
     b7e:	26 95       	lsr	r18
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
     b80:	87 70       	andi	r24, 0x07	; 7
     b82:	09 f0       	breq	.+2      	; 0xb86 <gfx_mono_draw_char+0x42>
		char_row_size++;
     b84:	2f 5f       	subi	r18, 0xFF	; 255
	}

	glyph_data_offset = char_row_size * font->height *
     b86:	f6 01       	movw	r30, r12
     b88:	a4 80       	ldd	r10, Z+4	; 0x04
     b8a:	2a 9d       	mul	r18, r10
     b8c:	90 01       	movw	r18, r0
     b8e:	11 24       	eor	r1, r1
			((uint8_t)ch - font->first_char);
     b90:	8c 2f       	mov	r24, r28
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	45 81       	ldd	r20, Z+5	; 0x05
     b96:	84 1b       	sub	r24, r20
     b98:	91 09       	sbc	r25, r1
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
		char_row_size++;
	}

	glyph_data_offset = char_row_size * font->height *
     b9a:	28 9f       	mul	r18, r24
     b9c:	a0 01       	movw	r20, r0
     b9e:	29 9f       	mul	r18, r25
     ba0:	50 0d       	add	r21, r0
     ba2:	38 9f       	mul	r19, r24
     ba4:	50 0d       	add	r21, r0
     ba6:	11 24       	eor	r1, r1
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
     ba8:	01 81       	ldd	r16, Z+1	; 0x01
     baa:	12 81       	ldd	r17, Z+2	; 0x02
     bac:	04 0f       	add	r16, r20
     bae:	15 1f       	adc	r17, r21
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
     bb0:	f6 01       	movw	r30, r12
     bb2:	f3 80       	ldd	r15, Z+3	; 0x03

		for (i = 0; i < pixelsToDraw; i++) {
     bb4:	ff 20       	and	r15, r15
     bb6:	a1 f0       	breq	.+40     	; 0xbe0 <gfx_mono_draw_char+0x9c>
     bb8:	d0 e0       	ldi	r29, 0x00	; 0
     bba:	c0 e0       	ldi	r28, 0x00	; 0
     bbc:	8c 2f       	mov	r24, r28
     bbe:	8e 0d       	add	r24, r14
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
     bc0:	9c 2f       	mov	r25, r28
     bc2:	97 70       	andi	r25, 0x07	; 7
     bc4:	21 f4       	brne	.+8      	; 0xbce <gfx_mono_draw_char+0x8a>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
     bc6:	f8 01       	movw	r30, r16
     bc8:	d4 91       	lpm	r29, Z
				glyph_data++;
     bca:	0f 5f       	subi	r16, 0xFF	; 255
     bcc:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			if ((glyph_byte & 0x80)) {
     bce:	dd 23       	and	r29, r29
     bd0:	1c f4       	brge	.+6      	; 0xbd8 <gfx_mono_draw_char+0x94>
				gfx_mono_draw_pixel(inc_x, inc_y,
     bd2:	41 e0       	ldi	r20, 0x01	; 1
     bd4:	6b 2d       	mov	r22, r11
     bd6:	6d d3       	rcall	.+1754   	; 0x12b2 <gfx_mono_ssd1306_draw_pixel>
						GFX_PIXEL_SET);
			}

			inc_x += 1;
			glyph_byte <<= 1;
     bd8:	dd 0f       	add	r29, r29

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
     bda:	cf 5f       	subi	r28, 0xFF	; 255
     bdc:	cf 11       	cpse	r28, r15
     bde:	ee cf       	rjmp	.-36     	; 0xbbc <gfx_mono_draw_char+0x78>

			inc_x += 1;
			glyph_byte <<= 1;
		}

		inc_y += 1;
     be0:	b3 94       	inc	r11
		inc_x = x;
		rows_left--;
     be2:	aa 94       	dec	r10
	} while (rows_left > 0);
     be4:	a1 10       	cpse	r10, r1
     be6:	e4 cf       	rjmp	.-56     	; 0xbb0 <gfx_mono_draw_char+0x6c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
     be8:	df 91       	pop	r29
     bea:	cf 91       	pop	r28
     bec:	1f 91       	pop	r17
     bee:	0f 91       	pop	r16
     bf0:	ff 90       	pop	r15
     bf2:	ef 90       	pop	r14
     bf4:	df 90       	pop	r13
     bf6:	cf 90       	pop	r12
     bf8:	bf 90       	pop	r11
     bfa:	af 90       	pop	r10
     bfc:	08 95       	ret

00000bfe <gfx_mono_draw_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
     bfe:	df 92       	push	r13
     c00:	ef 92       	push	r14
     c02:	ff 92       	push	r15
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	cf 93       	push	r28
     c0a:	df 93       	push	r29
     c0c:	04 2f       	mov	r16, r20
     c0e:	79 01       	movw	r14, r18
     c10:	ec 01       	movw	r28, r24
     c12:	16 2f       	mov	r17, r22

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
     c14:	d6 2e       	mov	r13, r22
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
     c16:	89 91       	ld	r24, Y+
     c18:	8a 30       	cpi	r24, 0x0A	; 10
     c1a:	31 f4       	brne	.+12     	; 0xc28 <gfx_mono_draw_string+0x2a>
     c1c:	f7 01       	movw	r30, r14
     c1e:	84 81       	ldd	r24, Z+4	; 0x04
     c20:	8f 5f       	subi	r24, 0xFF	; 255
			x = start_of_string_position_x;
			y += font->height + 1;
     c22:	08 0f       	add	r16, r24

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
     c24:	1d 2d       	mov	r17, r13
     c26:	09 c0       	rjmp	.+18     	; 0xc3a <gfx_mono_draw_string+0x3c>
			y += font->height + 1;
		} else if (*str == '\r') {
     c28:	8d 30       	cpi	r24, 0x0D	; 13
     c2a:	39 f0       	breq	.+14     	; 0xc3a <gfx_mono_draw_string+0x3c>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
     c2c:	97 01       	movw	r18, r14
     c2e:	40 2f       	mov	r20, r16
     c30:	61 2f       	mov	r22, r17
     c32:	88 df       	rcall	.-240    	; 0xb44 <gfx_mono_draw_char>
			x += font->width;
     c34:	f7 01       	movw	r30, r14
     c36:	83 81       	ldd	r24, Z+3	; 0x03
     c38:	18 0f       	add	r17, r24
		}
	} while (*(++str));
     c3a:	88 81       	ld	r24, Y
     c3c:	81 11       	cpse	r24, r1
     c3e:	eb cf       	rjmp	.-42     	; 0xc16 <gfx_mono_draw_string+0x18>
}
     c40:	df 91       	pop	r29
     c42:	cf 91       	pop	r28
     c44:	1f 91       	pop	r17
     c46:	0f 91       	pop	r16
     c48:	ff 90       	pop	r15
     c4a:	ef 90       	pop	r14
     c4c:	df 90       	pop	r13
     c4e:	08 95       	ret

00000c50 <gfx_mono_draw_progmem_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_progmem_string(char PROGMEM_PTR_T str, gfx_coord_t x,
		gfx_coord_t y, const struct font *font)
{
     c50:	df 92       	push	r13
     c52:	ef 92       	push	r14
     c54:	ff 92       	push	r15
     c56:	0f 93       	push	r16
     c58:	1f 93       	push	r17
     c5a:	cf 93       	push	r28
     c5c:	df 93       	push	r29
     c5e:	ec 01       	movw	r28, r24
     c60:	04 2f       	mov	r16, r20
     c62:	79 01       	movw	r14, r18

	/* Save X in order to know where to return to on CR. */
	const gfx_coord_t start_of_string_position_x = x;

	/* Draw characters until trailing null byte */
	temp_char = PROGMEM_READ_BYTE((uint8_t PROGMEM_PTR_T)str);
     c64:	fc 01       	movw	r30, r24
     c66:	94 91       	lpm	r25, Z
     c68:	89 2f       	mov	r24, r25

	while (temp_char) {
     c6a:	99 23       	and	r25, r25
     c6c:	c1 f0       	breq	.+48     	; 0xc9e <gfx_mono_draw_progmem_string+0x4e>
     c6e:	16 2f       	mov	r17, r22
		/* Handle '\n' as newline, draw normal characters. */
		if (temp_char == '\n') {
			x = start_of_string_position_x;
     c70:	d6 2e       	mov	r13, r22
	/* Draw characters until trailing null byte */
	temp_char = PROGMEM_READ_BYTE((uint8_t PROGMEM_PTR_T)str);

	while (temp_char) {
		/* Handle '\n' as newline, draw normal characters. */
		if (temp_char == '\n') {
     c72:	8a 30       	cpi	r24, 0x0A	; 10
     c74:	31 f4       	brne	.+12     	; 0xc82 <gfx_mono_draw_progmem_string+0x32>
     c76:	f7 01       	movw	r30, r14
     c78:	84 81       	ldd	r24, Z+4	; 0x04
     c7a:	8f 5f       	subi	r24, 0xFF	; 255
			x = start_of_string_position_x;
			y += font->height + 1;
     c7c:	08 0f       	add	r16, r24
	temp_char = PROGMEM_READ_BYTE((uint8_t PROGMEM_PTR_T)str);

	while (temp_char) {
		/* Handle '\n' as newline, draw normal characters. */
		if (temp_char == '\n') {
			x = start_of_string_position_x;
     c7e:	1d 2d       	mov	r17, r13
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <gfx_mono_draw_progmem_string+0x44>
			y += font->height + 1;
		} else if (temp_char == '\r') {
     c82:	8d 30       	cpi	r24, 0x0D	; 13
     c84:	39 f0       	breq	.+14     	; 0xc94 <gfx_mono_draw_progmem_string+0x44>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(temp_char, x, y, font);
     c86:	97 01       	movw	r18, r14
     c88:	40 2f       	mov	r20, r16
     c8a:	61 2f       	mov	r22, r17
     c8c:	5b df       	rcall	.-330    	; 0xb44 <gfx_mono_draw_char>
			x += font->width;
     c8e:	f7 01       	movw	r30, r14
     c90:	83 81       	ldd	r24, Z+3	; 0x03
     c92:	18 0f       	add	r17, r24
		}

		temp_char = PROGMEM_READ_BYTE((uint8_t PROGMEM_PTR_T)(++str));
     c94:	21 96       	adiw	r28, 0x01	; 1
     c96:	fe 01       	movw	r30, r28
     c98:	84 91       	lpm	r24, Z
	const gfx_coord_t start_of_string_position_x = x;

	/* Draw characters until trailing null byte */
	temp_char = PROGMEM_READ_BYTE((uint8_t PROGMEM_PTR_T)str);

	while (temp_char) {
     c9a:	81 11       	cpse	r24, r1
     c9c:	ea cf       	rjmp	.-44     	; 0xc72 <gfx_mono_draw_progmem_string+0x22>
			x += font->width;
		}

		temp_char = PROGMEM_READ_BYTE((uint8_t PROGMEM_PTR_T)(++str));
	}
}
     c9e:	df 91       	pop	r29
     ca0:	cf 91       	pop	r28
     ca2:	1f 91       	pop	r17
     ca4:	0f 91       	pop	r16
     ca6:	ff 90       	pop	r15
     ca8:	ef 90       	pop	r14
     caa:	df 90       	pop	r13
     cac:	08 95       	ret

00000cae <gfx_mono_get_string_bounding_box>:
 * \param width    Pointer to width result
 * \param height   Pointer to height result
 */
void gfx_mono_get_string_bounding_box(const char *str, const struct font *font,
		gfx_coord_t *width, gfx_coord_t *height)
{
     cae:	cf 93       	push	r28
     cb0:	df 93       	push	r29
     cb2:	fb 01       	movw	r30, r22
     cb4:	ea 01       	movw	r28, r20
     cb6:	d9 01       	movw	r26, r18
	gfx_coord_t font_width = font->width;
     cb8:	73 81       	ldd	r23, Z+3	; 0x03
	gfx_coord_t font_height = font->height;
     cba:	64 81       	ldd	r22, Z+4	; 0x04
     cbc:	fc 01       	movw	r30, r24

	gfx_coord_t max_width = 1;
	gfx_coord_t max_height = font_height;
     cbe:	56 2f       	mov	r21, r22
	gfx_coord_t x = 0;
     cc0:	90 e0       	ldi	r25, 0x00	; 0
		gfx_coord_t *width, gfx_coord_t *height)
{
	gfx_coord_t font_width = font->width;
	gfx_coord_t font_height = font->height;

	gfx_coord_t max_width = 1;
     cc2:	31 e0       	ldi	r19, 0x01	; 1
	Assert(font != NULL);

	/* Handle each character until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
     cc4:	81 91       	ld	r24, Z+
     cc6:	8a 30       	cpi	r24, 0x0A	; 10
     cc8:	19 f4       	brne	.+6      	; 0xcd0 <gfx_mono_get_string_bounding_box+0x22>
			x = 0;
			max_height += font_height;
     cca:	56 0f       	add	r21, r22

	/* Handle each character until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = 0;
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	06 c0       	rjmp	.+12     	; 0xcdc <gfx_mono_get_string_bounding_box+0x2e>
			max_height += font_height;
		} else if (*str == '\r') {
     cd0:	8d 30       	cpi	r24, 0x0D	; 13
     cd2:	21 f0       	breq	.+8      	; 0xcdc <gfx_mono_get_string_bounding_box+0x2e>
			/* Skip '\r' characters. */
		} else {
			x += font_width;
     cd4:	97 0f       	add	r25, r23
     cd6:	39 17       	cp	r19, r25
     cd8:	08 f4       	brcc	.+2      	; 0xcdc <gfx_mono_get_string_bounding_box+0x2e>
     cda:	39 2f       	mov	r19, r25
			if (x > max_width) {
				max_width = x;
			}
		}
	} while (*(++str));
     cdc:	80 81       	ld	r24, Z
     cde:	81 11       	cpse	r24, r1
     ce0:	f1 cf       	rjmp	.-30     	; 0xcc4 <gfx_mono_get_string_bounding_box+0x16>

	/* Return values through references */
	*width = max_width;
     ce2:	38 83       	st	Y, r19
	*height = max_height;
     ce4:	5c 93       	st	X, r21
}
     ce6:	df 91       	pop	r29
     ce8:	cf 91       	pop	r28
     cea:	08 95       	ret

00000cec <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
static void ssd1306_write_command(uint8_t command)
{
     cec:	1f 93       	push	r17
     cee:	cf 93       	push	r28
     cf0:	df 93       	push	r29
     cf2:	1f 92       	push	r1
     cf4:	cd b7       	in	r28, 0x3d	; 61
     cf6:	de b7       	in	r29, 0x3e	; 62
     cf8:	18 2f       	mov	r17, r24
	usart_spi_select_device(SSD1306_USART_SPI, &device);
	ssd1306_sel_cmd();
	usart_spi_transmit(SSD1306_USART_SPI, command);
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
     cfa:	88 e1       	ldi	r24, 0x18	; 24
     cfc:	89 83       	std	Y+1, r24	; 0x01
	spi_select_device(SSD1306_SPI, &device);
     cfe:	be 01       	movw	r22, r28
     d00:	6f 5f       	subi	r22, 0xFF	; 255
     d02:	7f 4f       	sbci	r23, 0xFF	; 255
     d04:	80 ec       	ldi	r24, 0xC0	; 192
     d06:	98 e0       	ldi	r25, 0x08	; 8
     d08:	87 d3       	rcall	.+1806   	; 0x1418 <spi_select_device>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(SPI_t *spi, uint8_t data)
{
	spi->DATA = data;
     d10:	10 93 c3 08 	sts	0x08C3, r17	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	90 e0       	ldi	r25, 0x00	; 0
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
     d18:	01 96       	adiw	r24, 0x01	; 1
     d1a:	85 33       	cpi	r24, 0x35	; 53
     d1c:	91 05       	cpc	r25, r1
     d1e:	e1 f7       	brne	.-8      	; 0xd18 <ssd1306_write_command+0x2c>
	ssd1306_sel_cmd();
	spi_write_single(SSD1306_SPI, command);
	delay_us(SSD1306_LATENCY); // At least 3us
	spi_deselect_device(SSD1306_SPI, &device);
     d20:	be 01       	movw	r22, r28
     d22:	6f 5f       	subi	r22, 0xFF	; 255
     d24:	7f 4f       	sbci	r23, 0xFF	; 255
     d26:	80 ec       	ldi	r24, 0xC0	; 192
     d28:	98 e0       	ldi	r25, 0x08	; 8
     d2a:	8c d3       	rcall	.+1816   	; 0x1444 <spi_deselect_device>
#endif
}
     d2c:	0f 90       	pop	r0
     d2e:	df 91       	pop	r29
     d30:	cf 91       	pop	r28
     d32:	1f 91       	pop	r17
     d34:	08 95       	ret

00000d36 <ssd1306_init>:
 * Call this function to initialize the hardware interface and the OLED
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void ssd1306_init(void)
{
     d36:	cf 92       	push	r12
     d38:	df 92       	push	r13
     d3a:	ef 92       	push	r14
     d3c:	ff 92       	push	r15
     d3e:	0f 93       	push	r16
     d40:	1f 93       	push	r17
     d42:	cf 93       	push	r28
     d44:	df 93       	push	r29
     d46:	1f 92       	push	r1
     d48:	cd b7       	in	r28, 0x3d	; 61
     d4a:	de b7       	in	r29, 0x3e	; 62
     d4c:	88 e0       	ldi	r24, 0x08	; 8
     d4e:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	01 96       	adiw	r24, 0x01	; 1
     d58:	85 33       	cpi	r24, 0x35	; 53
     d5a:	91 05       	cpc	r25, r1
     d5c:	e1 f7       	brne	.-8      	; 0xd56 <ssd1306_init+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     d5e:	88 e0       	ldi	r24, 0x08	; 8
     d60:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
     d64:	80 e0       	ldi	r24, 0x00	; 0
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	01 96       	adiw	r24, 0x01	; 1
     d6a:	85 33       	cpi	r24, 0x35	; 53
     d6c:	91 05       	cpc	r25, r1
     d6e:	e1 f7       	brne	.-8      	; 0xd68 <ssd1306_init+0x32>
	};
	usart_spi_init(SSD1306_USART_SPI);
	usart_spi_setup_device(SSD1306_USART_SPI, &device, spi_flags,
			SSD1306_CLOCK_SPEED, spi_select_id);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {
     d70:	88 e1       	ldi	r24, 0x18	; 24
     d72:	89 83       	std	Y+1, r24	; 0x01
		.id = SSD1306_CS_PIN,
	};
	spi_master_init(SSD1306_SPI);
     d74:	80 ec       	ldi	r24, 0xC0	; 192
     d76:	98 e0       	ldi	r25, 0x08	; 8
     d78:	05 d3       	rcall	.+1546   	; 0x1384 <spi_master_init>
	spi_master_setup_device(SSD1306_SPI, &device, spi_flags,
     d7a:	c1 2c       	mov	r12, r1
     d7c:	d1 2c       	mov	r13, r1
     d7e:	76 01       	movw	r14, r12
     d80:	00 e4       	ldi	r16, 0x40	; 64
     d82:	12 e4       	ldi	r17, 0x42	; 66
     d84:	2f e0       	ldi	r18, 0x0F	; 15
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	40 e0       	ldi	r20, 0x00	; 0
     d8a:	be 01       	movw	r22, r28
     d8c:	6f 5f       	subi	r22, 0xFF	; 255
     d8e:	7f 4f       	sbci	r23, 0xFF	; 255
     d90:	80 ec       	ldi	r24, 0xC0	; 192
     d92:	98 e0       	ldi	r25, 0x08	; 8
     d94:	23 d3       	rcall	.+1606   	; 0x13dc <spi_master_setup_device>
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_enable(SPI_t *spi)
{
	spi->CTRL |= SPI_ENABLE_bm;
     d96:	e0 ec       	ldi	r30, 0xC0	; 192
     d98:	f8 e0       	ldi	r31, 0x08	; 8
     d9a:	80 81       	ld	r24, Z
     d9c:	80 64       	ori	r24, 0x40	; 64
     d9e:	80 83       	st	Z, r24

	// Initialize the interface
	ssd1306_interface_init();

	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
     da0:	88 ea       	ldi	r24, 0xA8	; 168
     da2:	a4 df       	rcall	.-184    	; 0xcec <ssd1306_write_command>
	ssd1306_write_command(0x1F);
     da4:	8f e1       	ldi	r24, 0x1F	; 31
     da6:	a2 df       	rcall	.-188    	; 0xcec <ssd1306_write_command>

	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
     da8:	83 ed       	ldi	r24, 0xD3	; 211
     daa:	a0 df       	rcall	.-192    	; 0xcec <ssd1306_write_command>
	ssd1306_write_command(0x00);
     dac:	80 e0       	ldi	r24, 0x00	; 0
     dae:	9e df       	rcall	.-196    	; 0xcec <ssd1306_write_command>

	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_START_LINE(0x00));
     db0:	80 e4       	ldi	r24, 0x40	; 64
     db2:	9c df       	rcall	.-200    	; 0xcec <ssd1306_write_command>

	// Set Column Address 0 Mapped to SEG0
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
     db4:	81 ea       	ldi	r24, 0xA1	; 161
     db6:	9a df       	rcall	.-204    	; 0xcec <ssd1306_write_command>

	// Set COM/Row Scan Scan from COM63 to 0
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
     db8:	88 ec       	ldi	r24, 0xC8	; 200
     dba:	98 df       	rcall	.-208    	; 0xcec <ssd1306_write_command>

	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
     dbc:	8a ed       	ldi	r24, 0xDA	; 218
     dbe:	96 df       	rcall	.-212    	; 0xcec <ssd1306_write_command>
	ssd1306_write_command(0x02);
     dc0:	82 e0       	ldi	r24, 0x02	; 2
     dc2:	94 df       	rcall	.-216    	; 0xcec <ssd1306_write_command>
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
     dc4:	81 e8       	ldi	r24, 0x81	; 129
     dc6:	92 df       	rcall	.-220    	; 0xcec <ssd1306_write_command>
	ssd1306_write_command(contrast);
     dc8:	8f e8       	ldi	r24, 0x8F	; 143
     dca:	90 df       	rcall	.-224    	; 0xcec <ssd1306_write_command>

	ssd1306_set_contrast(0x8F);

	// Disable Entire display On
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
     dcc:	84 ea       	ldi	r24, 0xA4	; 164
     dce:	8e df       	rcall	.-228    	; 0xcec <ssd1306_write_command>
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
     dd0:	86 ea       	ldi	r24, 0xA6	; 166
     dd2:	8c df       	rcall	.-232    	; 0xcec <ssd1306_write_command>

	ssd1306_display_invert_disable();

	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
     dd4:	85 ed       	ldi	r24, 0xD5	; 213
     dd6:	8a df       	rcall	.-236    	; 0xcec <ssd1306_write_command>
	ssd1306_write_command(0x80);
     dd8:	80 e8       	ldi	r24, 0x80	; 128
     dda:	88 df       	rcall	.-240    	; 0xcec <ssd1306_write_command>

	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
     ddc:	8d e8       	ldi	r24, 0x8D	; 141
     dde:	86 df       	rcall	.-244    	; 0xcec <ssd1306_write_command>
	ssd1306_write_command(0x14);
     de0:	84 e1       	ldi	r24, 0x14	; 20
     de2:	84 df       	rcall	.-248    	; 0xcec <ssd1306_write_command>

	// Set VCOMH Deselect Level
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
     de4:	8b ed       	ldi	r24, 0xDB	; 219
     de6:	82 df       	rcall	.-252    	; 0xcec <ssd1306_write_command>
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
     de8:	80 e4       	ldi	r24, 0x40	; 64
     dea:	80 df       	rcall	.-256    	; 0xcec <ssd1306_write_command>

	// Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
     dec:	89 ed       	ldi	r24, 0xD9	; 217
     dee:	7e df       	rcall	.-260    	; 0xcec <ssd1306_write_command>
	ssd1306_write_command(0xF1);
     df0:	81 ef       	ldi	r24, 0xF1	; 241
     df2:	7c df       	rcall	.-264    	; 0xcec <ssd1306_write_command>
 *
 * This function will turn on the OLED.
 */
static inline void ssd1306_display_on(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
     df4:	8f ea       	ldi	r24, 0xAF	; 175
     df6:	7a df       	rcall	.-268    	; 0xcec <ssd1306_write_command>

	ssd1306_display_on();
}
     df8:	0f 90       	pop	r0
     dfa:	df 91       	pop	r29
     dfc:	cf 91       	pop	r28
     dfe:	1f 91       	pop	r17
     e00:	0f 91       	pop	r16
     e02:	ff 90       	pop	r15
     e04:	ef 90       	pop	r14
     e06:	df 90       	pop	r13
     e08:	cf 90       	pop	r12
     e0a:	08 95       	ret

00000e0c <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     e0c:	cf 93       	push	r28
     e0e:	df 93       	push	r29
     e10:	1f 92       	push	r1
     e12:	1f 92       	push	r1
     e14:	cd b7       	in	r28, 0x3d	; 61
     e16:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     e18:	8f ef       	ldi	r24, 0xFF	; 255
     e1a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     e1e:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     e22:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     e26:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     e2a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     e2e:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     e32:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     e36:	8f b7       	in	r24, 0x3f	; 63
     e38:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     e3a:	f8 94       	cli
	return flags;
     e3c:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     e3e:	e0 e5       	ldi	r30, 0x50	; 80
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	82 60       	ori	r24, 0x02	; 2
     e46:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     e48:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     e4a:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     e4c:	81 ff       	sbrs	r24, 1
     e4e:	fd cf       	rjmp	.-6      	; 0xe4a <sysclk_init+0x3e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     e50:	61 e0       	ldi	r22, 0x01	; 1
     e52:	80 e4       	ldi	r24, 0x40	; 64
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	4f d3       	rcall	.+1694   	; 0x14f6 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     e58:	8f b7       	in	r24, 0x3f	; 63
     e5a:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     e5c:	f8 94       	cli
	return flags;
     e5e:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     e60:	e0 e5       	ldi	r30, 0x50	; 80
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	8e 7f       	andi	r24, 0xFE	; 254
     e68:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     e6a:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     e6c:	0f 90       	pop	r0
     e6e:	0f 90       	pop	r0
     e70:	df 91       	pop	r29
     e72:	cf 91       	pop	r28
     e74:	08 95       	ret

00000e76 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     e76:	cf 93       	push	r28
     e78:	df 93       	push	r29
     e7a:	1f 92       	push	r1
     e7c:	cd b7       	in	r28, 0x3d	; 61
     e7e:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     e80:	9f b7       	in	r25, 0x3f	; 63
     e82:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     e84:	f8 94       	cli
	return flags;
     e86:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     e88:	e8 2f       	mov	r30, r24
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	e0 59       	subi	r30, 0x90	; 144
     e8e:	ff 4f       	sbci	r31, 0xFF	; 255
     e90:	60 95       	com	r22
     e92:	80 81       	ld	r24, Z
     e94:	68 23       	and	r22, r24
     e96:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     e98:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     e9a:	0f 90       	pop	r0
     e9c:	df 91       	pop	r29
     e9e:	cf 91       	pop	r28
     ea0:	08 95       	ret

00000ea2 <gfx_mono_set_framebuffer>:
	gfx_coord_t *framebuffer_pt = fbpointer +
			((page * GFX_MONO_LCD_WIDTH) + column);
	do {
		*data++ = *framebuffer_pt++;
	} while (--width > 0);
}
     ea2:	80 93 30 20 	sts	0x2030, r24	; 0x802030 <__data_end>
     ea6:	90 93 31 20 	sts	0x2031, r25	; 0x802031 <__data_end+0x1>
     eaa:	08 95       	ret

00000eac <gfx_mono_framebuffer_put_page>:
     eac:	dc 01       	movw	r26, r24
     eae:	e4 2f       	mov	r30, r20
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	af 01       	movw	r20, r30
     eb4:	80 e8       	ldi	r24, 0x80	; 128
     eb6:	68 9f       	mul	r22, r24
     eb8:	40 0d       	add	r20, r0
     eba:	51 1d       	adc	r21, r1
     ebc:	11 24       	eor	r1, r1
     ebe:	e0 91 30 20 	lds	r30, 0x2030	; 0x802030 <__data_end>
     ec2:	f0 91 31 20 	lds	r31, 0x2031	; 0x802031 <__data_end+0x1>
     ec6:	e4 0f       	add	r30, r20
     ec8:	f5 1f       	adc	r31, r21
     eca:	8d 91       	ld	r24, X+
     ecc:	81 93       	st	Z+, r24
     ece:	21 50       	subi	r18, 0x01	; 1
     ed0:	e1 f7       	brne	.-8      	; 0xeca <gfx_mono_framebuffer_put_page+0x1e>
     ed2:	08 95       	ret

00000ed4 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
     ed4:	20 e8       	ldi	r18, 0x80	; 128
     ed6:	82 9f       	mul	r24, r18
     ed8:	c0 01       	movw	r24, r0
     eda:	11 24       	eor	r1, r1
     edc:	86 0f       	add	r24, r22
     ede:	91 1d       	adc	r25, r1
     ee0:	e0 91 30 20 	lds	r30, 0x2030	; 0x802030 <__data_end>
     ee4:	f0 91 31 20 	lds	r31, 0x2031	; 0x802031 <__data_end+0x1>
     ee8:	e8 0f       	add	r30, r24
     eea:	f9 1f       	adc	r31, r25
     eec:	40 83       	st	Z, r20
     eee:	08 95       	ret

00000ef0 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
     ef0:	20 e8       	ldi	r18, 0x80	; 128
     ef2:	82 9f       	mul	r24, r18
     ef4:	c0 01       	movw	r24, r0
     ef6:	11 24       	eor	r1, r1
     ef8:	86 0f       	add	r24, r22
     efa:	91 1d       	adc	r25, r1
     efc:	e0 91 30 20 	lds	r30, 0x2030	; 0x802030 <__data_end>
     f00:	f0 91 31 20 	lds	r31, 0x2031	; 0x802031 <__data_end+0x1>
     f04:	e8 0f       	add	r30, r24
     f06:	f9 1f       	adc	r31, r25
}
     f08:	80 81       	ld	r24, Z
     f0a:	08 95       	ret

00000f0c <gfx_mono_generic_draw_horizontal_line>:
		}

		/* Next X. */
		++offset_x;
	}
}
     f0c:	ff 92       	push	r15
     f0e:	0f 93       	push	r16
     f10:	1f 93       	push	r17
     f12:	cf 93       	push	r28
     f14:	df 93       	push	r29
     f16:	e4 2f       	mov	r30, r20
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	e8 0f       	add	r30, r24
     f1c:	f1 1d       	adc	r31, r1
     f1e:	e1 38       	cpi	r30, 0x81	; 129
     f20:	f1 05       	cpc	r31, r1
     f22:	1c f0       	brlt	.+6      	; 0xf2a <gfx_mono_generic_draw_horizontal_line+0x1e>
     f24:	c0 e8       	ldi	r28, 0x80	; 128
     f26:	4c 2f       	mov	r20, r28
     f28:	48 1b       	sub	r20, r24
     f2a:	44 23       	and	r20, r20
     f2c:	09 f4       	brne	.+2      	; 0xf30 <gfx_mono_generic_draw_horizontal_line+0x24>
     f2e:	56 c0       	rjmp	.+172    	; 0xfdc <gfx_mono_generic_draw_horizontal_line+0xd0>
     f30:	d6 2f       	mov	r29, r22
     f32:	d6 95       	lsr	r29
     f34:	d6 95       	lsr	r29
     f36:	d6 95       	lsr	r29
     f38:	ed 2f       	mov	r30, r29
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	f1 95       	neg	r31
     f3e:	e1 95       	neg	r30
     f40:	f1 09       	sbc	r31, r1
     f42:	ee 0f       	add	r30, r30
     f44:	ff 1f       	adc	r31, r31
     f46:	ee 0f       	add	r30, r30
     f48:	ff 1f       	adc	r31, r31
     f4a:	ee 0f       	add	r30, r30
     f4c:	ff 1f       	adc	r31, r31
     f4e:	df 01       	movw	r26, r30
     f50:	a6 0f       	add	r26, r22
     f52:	b1 1d       	adc	r27, r1
     f54:	bd 01       	movw	r22, r26
     f56:	e1 e0       	ldi	r30, 0x01	; 1
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	df 01       	movw	r26, r30
     f5c:	02 c0       	rjmp	.+4      	; 0xf62 <gfx_mono_generic_draw_horizontal_line+0x56>
     f5e:	aa 0f       	add	r26, r26
     f60:	bb 1f       	adc	r27, r27
     f62:	6a 95       	dec	r22
     f64:	e2 f7       	brpl	.-8      	; 0xf5e <gfx_mono_generic_draw_horizontal_line+0x52>
     f66:	fa 2e       	mov	r15, r26
     f68:	21 30       	cpi	r18, 0x01	; 1
     f6a:	21 f0       	breq	.+8      	; 0xf74 <gfx_mono_generic_draw_horizontal_line+0x68>
     f6c:	a0 f0       	brcs	.+40     	; 0xf96 <gfx_mono_generic_draw_horizontal_line+0x8a>
     f6e:	22 30       	cpi	r18, 0x02	; 2
     f70:	29 f1       	breq	.+74     	; 0xfbc <gfx_mono_generic_draw_horizontal_line+0xb0>
     f72:	34 c0       	rjmp	.+104    	; 0xfdc <gfx_mono_generic_draw_horizontal_line+0xd0>
     f74:	c4 2f       	mov	r28, r20
     f76:	1f ef       	ldi	r17, 0xFF	; 255
     f78:	18 0f       	add	r17, r24
     f7a:	01 2f       	mov	r16, r17
     f7c:	0c 0f       	add	r16, r28
     f7e:	60 2f       	mov	r22, r16
     f80:	8d 2f       	mov	r24, r29
     f82:	d6 d1       	rcall	.+940    	; 0x1330 <gfx_mono_ssd1306_get_byte>
     f84:	48 2f       	mov	r20, r24
     f86:	4f 29       	or	r20, r15
     f88:	20 e0       	ldi	r18, 0x00	; 0
     f8a:	60 2f       	mov	r22, r16
     f8c:	8d 2f       	mov	r24, r29
     f8e:	36 d1       	rcall	.+620    	; 0x11fc <gfx_mono_ssd1306_put_byte>
     f90:	c1 50       	subi	r28, 0x01	; 1
     f92:	99 f7       	brne	.-26     	; 0xf7a <gfx_mono_generic_draw_horizontal_line+0x6e>
     f94:	23 c0       	rjmp	.+70     	; 0xfdc <gfx_mono_generic_draw_horizontal_line+0xd0>
     f96:	c4 2f       	mov	r28, r20
     f98:	1f ef       	ldi	r17, 0xFF	; 255
     f9a:	18 0f       	add	r17, r24
     f9c:	fa 2e       	mov	r15, r26
     f9e:	f0 94       	com	r15
     fa0:	01 2f       	mov	r16, r17
     fa2:	0c 0f       	add	r16, r28
     fa4:	60 2f       	mov	r22, r16
     fa6:	8d 2f       	mov	r24, r29
     fa8:	c3 d1       	rcall	.+902    	; 0x1330 <gfx_mono_ssd1306_get_byte>
     faa:	48 2f       	mov	r20, r24
     fac:	4f 21       	and	r20, r15
     fae:	20 e0       	ldi	r18, 0x00	; 0
     fb0:	60 2f       	mov	r22, r16
     fb2:	8d 2f       	mov	r24, r29
     fb4:	23 d1       	rcall	.+582    	; 0x11fc <gfx_mono_ssd1306_put_byte>
     fb6:	c1 50       	subi	r28, 0x01	; 1
     fb8:	99 f7       	brne	.-26     	; 0xfa0 <gfx_mono_generic_draw_horizontal_line+0x94>
     fba:	10 c0       	rjmp	.+32     	; 0xfdc <gfx_mono_generic_draw_horizontal_line+0xd0>
     fbc:	c4 2f       	mov	r28, r20
     fbe:	1f ef       	ldi	r17, 0xFF	; 255
     fc0:	18 0f       	add	r17, r24
     fc2:	01 2f       	mov	r16, r17
     fc4:	0c 0f       	add	r16, r28
     fc6:	60 2f       	mov	r22, r16
     fc8:	8d 2f       	mov	r24, r29
     fca:	b2 d1       	rcall	.+868    	; 0x1330 <gfx_mono_ssd1306_get_byte>
     fcc:	48 2f       	mov	r20, r24
     fce:	4f 25       	eor	r20, r15
     fd0:	20 e0       	ldi	r18, 0x00	; 0
     fd2:	60 2f       	mov	r22, r16
     fd4:	8d 2f       	mov	r24, r29
     fd6:	12 d1       	rcall	.+548    	; 0x11fc <gfx_mono_ssd1306_put_byte>
     fd8:	c1 50       	subi	r28, 0x01	; 1
     fda:	99 f7       	brne	.-26     	; 0xfc2 <gfx_mono_generic_draw_horizontal_line+0xb6>
     fdc:	df 91       	pop	r29
     fde:	cf 91       	pop	r28
     fe0:	1f 91       	pop	r17
     fe2:	0f 91       	pop	r16
     fe4:	ff 90       	pop	r15
     fe6:	08 95       	ret

00000fe8 <gfx_mono_generic_draw_filled_rect>:
     fe8:	ff 92       	push	r15
     fea:	0f 93       	push	r16
     fec:	1f 93       	push	r17
     fee:	cf 93       	push	r28
     ff0:	df 93       	push	r29
     ff2:	22 23       	and	r18, r18
     ff4:	69 f0       	breq	.+26     	; 0x1010 <gfx_mono_generic_draw_filled_rect+0x28>
     ff6:	c2 2f       	mov	r28, r18
     ff8:	f4 2e       	mov	r15, r20
     ffa:	18 2f       	mov	r17, r24
     ffc:	df ef       	ldi	r29, 0xFF	; 255
     ffe:	d6 0f       	add	r29, r22
    1000:	6d 2f       	mov	r22, r29
    1002:	6c 0f       	add	r22, r28
    1004:	20 2f       	mov	r18, r16
    1006:	4f 2d       	mov	r20, r15
    1008:	81 2f       	mov	r24, r17
    100a:	80 df       	rcall	.-256    	; 0xf0c <gfx_mono_generic_draw_horizontal_line>
    100c:	c1 50       	subi	r28, 0x01	; 1
    100e:	c1 f7       	brne	.-16     	; 0x1000 <gfx_mono_generic_draw_filled_rect+0x18>
    1010:	df 91       	pop	r29
    1012:	cf 91       	pop	r28
    1014:	1f 91       	pop	r17
    1016:	0f 91       	pop	r16
    1018:	ff 90       	pop	r15
    101a:	08 95       	ret

0000101c <gfx_mono_generic_put_bitmap>:
 * placing a bitmap at x = 10, y = 10 will put the bitmap at x = 10, y = 8
 *
 */
void gfx_mono_generic_put_bitmap(struct gfx_mono_bitmap *bitmap, gfx_coord_t x,
		gfx_coord_t y)
{
    101c:	bf 92       	push	r11
    101e:	cf 92       	push	r12
    1020:	df 92       	push	r13
    1022:	ef 92       	push	r14
    1024:	ff 92       	push	r15
    1026:	0f 93       	push	r16
    1028:	1f 93       	push	r17
    102a:	cf 93       	push	r28
    102c:	df 93       	push	r29
    102e:	8c 01       	movw	r16, r24
    1030:	d6 2f       	mov	r29, r22
	gfx_coord_t num_pages = bitmap->height / 8;
    1032:	dc 01       	movw	r26, r24
    1034:	11 96       	adiw	r26, 0x01	; 1
    1036:	cc 90       	ld	r12, X
    1038:	11 97       	sbiw	r26, 0x01	; 1
    103a:	c6 94       	lsr	r12
    103c:	c6 94       	lsr	r12
    103e:	c6 94       	lsr	r12
	gfx_coord_t page = y / 8;
    1040:	b4 2e       	mov	r11, r20
    1042:	b6 94       	lsr	r11
    1044:	b6 94       	lsr	r11
    1046:	b6 94       	lsr	r11
	gfx_coord_t column;
	gfx_coord_t i;
	gfx_mono_color_t temp;

	switch (bitmap->type) {
    1048:	12 96       	adiw	r26, 0x02	; 2
    104a:	8c 91       	ld	r24, X
    104c:	88 23       	and	r24, r24
    104e:	31 f0       	breq	.+12     	; 0x105c <gfx_mono_generic_put_bitmap+0x40>
    1050:	81 30       	cpi	r24, 0x01	; 1
    1052:	09 f0       	breq	.+2      	; 0x1056 <gfx_mono_generic_put_bitmap+0x3a>
    1054:	46 c0       	rjmp	.+140    	; 0x10e2 <gfx_mono_generic_put_bitmap+0xc6>
	case GFX_MONO_BITMAP_PROGMEM:
		for (i = 0; i < num_pages; i++) {
    1056:	c1 10       	cpse	r12, r1
    1058:	26 c0       	rjmp	.+76     	; 0x10a6 <gfx_mono_generic_put_bitmap+0x8a>
    105a:	43 c0       	rjmp	.+134    	; 0x10e2 <gfx_mono_generic_put_bitmap+0xc6>
			}
		}
		break;

	case GFX_MONO_BITMAP_RAM:
		for (i = 0; i < num_pages; i++) {
    105c:	c1 10       	cpse	r12, r1
    105e:	2a c0       	rjmp	.+84     	; 0x10b4 <gfx_mono_generic_put_bitmap+0x98>
    1060:	40 c0       	rjmp	.+128    	; 0x10e2 <gfx_mono_generic_put_bitmap+0xc6>
	gfx_mono_color_t temp;

	switch (bitmap->type) {
	case GFX_MONO_BITMAP_PROGMEM:
		for (i = 0; i < num_pages; i++) {
			for (column = 0; column < bitmap->width; column++) {
    1062:	c0 e0       	ldi	r28, 0x00	; 0
    1064:	db 2c       	mov	r13, r11
    1066:	de 0c       	add	r13, r14
				temp = PROGMEM_READ_BYTE(bitmap->data.progmem
    1068:	9e 9d       	mul	r25, r14
    106a:	f0 01       	movw	r30, r0
    106c:	9f 9d       	mul	r25, r15
    106e:	f0 0d       	add	r31, r0
    1070:	11 24       	eor	r1, r1
    1072:	ec 0f       	add	r30, r28
    1074:	f1 1d       	adc	r31, r1
    1076:	d8 01       	movw	r26, r16
    1078:	13 96       	adiw	r26, 0x03	; 3
    107a:	4d 91       	ld	r20, X+
    107c:	5c 91       	ld	r21, X
    107e:	14 97       	sbiw	r26, 0x04	; 4
    1080:	e4 0f       	add	r30, r20
    1082:	f5 1f       	adc	r31, r21
    1084:	44 91       	lpm	r20, Z
    1086:	6c 2f       	mov	r22, r28
    1088:	6d 0f       	add	r22, r29
						+ (i * bitmap->width)
						+ column);
				gfx_mono_put_byte(i + page, column + x, temp);
    108a:	20 e0       	ldi	r18, 0x00	; 0
    108c:	8d 2d       	mov	r24, r13
    108e:	b6 d0       	rcall	.+364    	; 0x11fc <gfx_mono_ssd1306_put_byte>
	gfx_mono_color_t temp;

	switch (bitmap->type) {
	case GFX_MONO_BITMAP_PROGMEM:
		for (i = 0; i < num_pages; i++) {
			for (column = 0; column < bitmap->width; column++) {
    1090:	cf 5f       	subi	r28, 0xFF	; 255
    1092:	f8 01       	movw	r30, r16
    1094:	90 81       	ld	r25, Z
    1096:	c9 17       	cp	r28, r25
    1098:	38 f3       	brcs	.-50     	; 0x1068 <gfx_mono_generic_put_bitmap+0x4c>
    109a:	ff ef       	ldi	r31, 0xFF	; 255
    109c:	ef 1a       	sub	r14, r31
    109e:	ff 0a       	sbc	r15, r31
	gfx_coord_t i;
	gfx_mono_color_t temp;

	switch (bitmap->type) {
	case GFX_MONO_BITMAP_PROGMEM:
		for (i = 0; i < num_pages; i++) {
    10a0:	ec 14       	cp	r14, r12
    10a2:	18 f0       	brcs	.+6      	; 0x10aa <gfx_mono_generic_put_bitmap+0x8e>
    10a4:	1e c0       	rjmp	.+60     	; 0x10e2 <gfx_mono_generic_put_bitmap+0xc6>
    10a6:	e1 2c       	mov	r14, r1
    10a8:	f1 2c       	mov	r15, r1
			for (column = 0; column < bitmap->width; column++) {
    10aa:	d8 01       	movw	r26, r16
    10ac:	9c 91       	ld	r25, X
    10ae:	91 11       	cpse	r25, r1
    10b0:	d8 cf       	rjmp	.-80     	; 0x1062 <gfx_mono_generic_put_bitmap+0x46>
    10b2:	f3 cf       	rjmp	.-26     	; 0x109a <gfx_mono_generic_put_bitmap+0x7e>
			}
		}
		break;

	case GFX_MONO_BITMAP_RAM:
		for (i = 0; i < num_pages; i++) {
    10b4:	e1 2c       	mov	r14, r1
    10b6:	f1 2c       	mov	r15, r1
			gfx_mono_put_page(bitmap->data.pixmap
    10b8:	f8 01       	movw	r30, r16
    10ba:	20 81       	ld	r18, Z
    10bc:	6b 2d       	mov	r22, r11
    10be:	6e 0d       	add	r22, r14
    10c0:	2e 9d       	mul	r18, r14
    10c2:	c0 01       	movw	r24, r0
    10c4:	2f 9d       	mul	r18, r15
    10c6:	90 0d       	add	r25, r0
    10c8:	11 24       	eor	r1, r1
    10ca:	03 80       	ldd	r0, Z+3	; 0x03
    10cc:	f4 81       	ldd	r31, Z+4	; 0x04
    10ce:	e0 2d       	mov	r30, r0
    10d0:	4d 2f       	mov	r20, r29
    10d2:	8e 0f       	add	r24, r30
    10d4:	9f 1f       	adc	r25, r31
    10d6:	34 d0       	rcall	.+104    	; 0x1140 <gfx_mono_ssd1306_put_page>
    10d8:	ff ef       	ldi	r31, 0xFF	; 255
    10da:	ef 1a       	sub	r14, r31
    10dc:	ff 0a       	sbc	r15, r31
			}
		}
		break;

	case GFX_MONO_BITMAP_RAM:
		for (i = 0; i < num_pages; i++) {
    10de:	ec 14       	cp	r14, r12
    10e0:	58 f3       	brcs	.-42     	; 0x10b8 <gfx_mono_generic_put_bitmap+0x9c>
		break;

	default:
		break;
	}
}
    10e2:	df 91       	pop	r29
    10e4:	cf 91       	pop	r28
    10e6:	1f 91       	pop	r17
    10e8:	0f 91       	pop	r16
    10ea:	ff 90       	pop	r15
    10ec:	ef 90       	pop	r14
    10ee:	df 90       	pop	r13
    10f0:	cf 90       	pop	r12
    10f2:	bf 90       	pop	r11
    10f4:	08 95       	ret

000010f6 <ssd1306_write_command>:
 */
void gfx_mono_ssd1306_get_page(gfx_mono_color_t *data, gfx_coord_t page,
		gfx_coord_t column, gfx_coord_t width)
{
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	gfx_mono_framebuffer_get_page(data, page, column, width);
    10f6:	1f 93       	push	r17
    10f8:	cf 93       	push	r28
    10fa:	df 93       	push	r29
    10fc:	1f 92       	push	r1
    10fe:	cd b7       	in	r28, 0x3d	; 61
    1100:	de b7       	in	r29, 0x3e	; 62
    1102:	18 2f       	mov	r17, r24
    1104:	88 e1       	ldi	r24, 0x18	; 24
    1106:	89 83       	std	Y+1, r24	; 0x01
    1108:	be 01       	movw	r22, r28
    110a:	6f 5f       	subi	r22, 0xFF	; 255
    110c:	7f 4f       	sbci	r23, 0xFF	; 255
    110e:	80 ec       	ldi	r24, 0xC0	; 192
    1110:	98 e0       	ldi	r25, 0x08	; 8
    1112:	82 d1       	rcall	.+772    	; 0x1418 <spi_select_device>
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
    111a:	10 93 c3 08 	sts	0x08C3, r17	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	01 96       	adiw	r24, 0x01	; 1
    1124:	85 33       	cpi	r24, 0x35	; 53
    1126:	91 05       	cpc	r25, r1
    1128:	e1 f7       	brne	.-8      	; 0x1122 <ssd1306_write_command+0x2c>
    112a:	be 01       	movw	r22, r28
    112c:	6f 5f       	subi	r22, 0xFF	; 255
    112e:	7f 4f       	sbci	r23, 0xFF	; 255
    1130:	80 ec       	ldi	r24, 0xC0	; 192
    1132:	98 e0       	ldi	r25, 0x08	; 8
    1134:	87 d1       	rcall	.+782    	; 0x1444 <spi_deselect_device>
    1136:	0f 90       	pop	r0
    1138:	df 91       	pop	r29
    113a:	cf 91       	pop	r28
    113c:	1f 91       	pop	r17
    113e:	08 95       	ret

00001140 <gfx_mono_ssd1306_put_page>:
    1140:	9f 92       	push	r9
    1142:	af 92       	push	r10
    1144:	bf 92       	push	r11
    1146:	cf 92       	push	r12
    1148:	df 92       	push	r13
    114a:	ef 92       	push	r14
    114c:	ff 92       	push	r15
    114e:	0f 93       	push	r16
    1150:	1f 93       	push	r17
    1152:	cf 93       	push	r28
    1154:	df 93       	push	r29
    1156:	1f 92       	push	r1
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
    115c:	6c 01       	movw	r12, r24
    115e:	16 2f       	mov	r17, r22
    1160:	04 2f       	mov	r16, r20
    1162:	f2 2e       	mov	r15, r18
    1164:	a3 de       	rcall	.-698    	; 0xeac <gfx_mono_framebuffer_put_page>
    1166:	81 2f       	mov	r24, r17
    1168:	87 70       	andi	r24, 0x07	; 7
    116a:	80 6b       	ori	r24, 0xB0	; 176
    116c:	c4 df       	rcall	.-120    	; 0x10f6 <ssd1306_write_command>
    116e:	80 2f       	mov	r24, r16
    1170:	8f 77       	andi	r24, 0x7F	; 127
    1172:	82 95       	swap	r24
    1174:	8f 70       	andi	r24, 0x0F	; 15
    1176:	80 61       	ori	r24, 0x10	; 16
    1178:	be df       	rcall	.-132    	; 0x10f6 <ssd1306_write_command>
    117a:	80 2f       	mov	r24, r16
    117c:	8f 70       	andi	r24, 0x0F	; 15
    117e:	bb df       	rcall	.-138    	; 0x10f6 <ssd1306_write_command>
    1180:	86 01       	movw	r16, r12
    1182:	2f ef       	ldi	r18, 0xFF	; 255
    1184:	2f 0d       	add	r18, r15
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	2f 5f       	subi	r18, 0xFF	; 255
    118a:	3f 4f       	sbci	r19, 0xFF	; 255
    118c:	c2 0e       	add	r12, r18
    118e:	d3 1e       	adc	r13, r19
    1190:	0f 2e       	mov	r0, r31
    1192:	f8 e1       	ldi	r31, 0x18	; 24
    1194:	9f 2e       	mov	r9, r31
    1196:	f0 2d       	mov	r31, r0
    1198:	0f 2e       	mov	r0, r31
    119a:	f0 e2       	ldi	r31, 0x20	; 32
    119c:	af 2e       	mov	r10, r31
    119e:	f7 e0       	ldi	r31, 0x07	; 7
    11a0:	bf 2e       	mov	r11, r31
    11a2:	f0 2d       	mov	r31, r0
    11a4:	ee 24       	eor	r14, r14
    11a6:	e3 94       	inc	r14
    11a8:	f8 01       	movw	r30, r16
    11aa:	f1 90       	ld	r15, Z+
    11ac:	8f 01       	movw	r16, r30
    11ae:	99 82       	std	Y+1, r9	; 0x01
    11b0:	be 01       	movw	r22, r28
    11b2:	6f 5f       	subi	r22, 0xFF	; 255
    11b4:	7f 4f       	sbci	r23, 0xFF	; 255
    11b6:	80 ec       	ldi	r24, 0xC0	; 192
    11b8:	98 e0       	ldi	r25, 0x08	; 8
    11ba:	2e d1       	rcall	.+604    	; 0x1418 <spi_select_device>
    11bc:	f5 01       	movw	r30, r10
    11be:	e5 82       	std	Z+5, r14	; 0x05
    11c0:	f0 92 c3 08 	sts	0x08C3, r15	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
    11c4:	80 e0       	ldi	r24, 0x00	; 0
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	01 96       	adiw	r24, 0x01	; 1
    11ca:	85 33       	cpi	r24, 0x35	; 53
    11cc:	91 05       	cpc	r25, r1
    11ce:	e1 f7       	brne	.-8      	; 0x11c8 <gfx_mono_ssd1306_put_page+0x88>
    11d0:	be 01       	movw	r22, r28
    11d2:	6f 5f       	subi	r22, 0xFF	; 255
    11d4:	7f 4f       	sbci	r23, 0xFF	; 255
    11d6:	80 ec       	ldi	r24, 0xC0	; 192
    11d8:	98 e0       	ldi	r25, 0x08	; 8
    11da:	34 d1       	rcall	.+616    	; 0x1444 <spi_deselect_device>
    11dc:	0c 15       	cp	r16, r12
    11de:	1d 05       	cpc	r17, r13
    11e0:	19 f7       	brne	.-58     	; 0x11a8 <gfx_mono_ssd1306_put_page+0x68>
    11e2:	0f 90       	pop	r0
    11e4:	df 91       	pop	r29
    11e6:	cf 91       	pop	r28
    11e8:	1f 91       	pop	r17
    11ea:	0f 91       	pop	r16
    11ec:	ff 90       	pop	r15
    11ee:	ef 90       	pop	r14
    11f0:	df 90       	pop	r13
    11f2:	cf 90       	pop	r12
    11f4:	bf 90       	pop	r11
    11f6:	af 90       	pop	r10
    11f8:	9f 90       	pop	r9
    11fa:	08 95       	ret

000011fc <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
 */
void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
    11fc:	ff 92       	push	r15
    11fe:	0f 93       	push	r16
    1200:	1f 93       	push	r17
    1202:	cf 93       	push	r28
    1204:	df 93       	push	r29
    1206:	1f 92       	push	r1
    1208:	cd b7       	in	r28, 0x3d	; 61
    120a:	de b7       	in	r29, 0x3e	; 62
    120c:	18 2f       	mov	r17, r24
    120e:	06 2f       	mov	r16, r22
    1210:	f4 2e       	mov	r15, r20
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
    1212:	21 11       	cpse	r18, r1
    1214:	03 c0       	rjmp	.+6      	; 0x121c <gfx_mono_ssd1306_put_byte+0x20>
    1216:	6c de       	rcall	.-808    	; 0xef0 <gfx_mono_framebuffer_get_byte>
    1218:	8f 15       	cp	r24, r15
    121a:	51 f1       	breq	.+84     	; 0x1270 <gfx_mono_ssd1306_put_byte+0x74>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
    121c:	4f 2d       	mov	r20, r15
    121e:	60 2f       	mov	r22, r16
    1220:	81 2f       	mov	r24, r17
    1222:	58 de       	rcall	.-848    	; 0xed4 <gfx_mono_framebuffer_put_byte>
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
    1224:	81 2f       	mov	r24, r17
    1226:	87 70       	andi	r24, 0x07	; 7
    1228:	80 6b       	ori	r24, 0xB0	; 176
    122a:	65 df       	rcall	.-310    	; 0x10f6 <ssd1306_write_command>
 * \param address the column address
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
    122c:	80 2f       	mov	r24, r16
    122e:	8f 77       	andi	r24, 0x7F	; 127
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
    1230:	82 95       	swap	r24
    1232:	8f 70       	andi	r24, 0x0F	; 15
    1234:	80 61       	ori	r24, 0x10	; 16
    1236:	5f df       	rcall	.-322    	; 0x10f6 <ssd1306_write_command>
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
    1238:	80 2f       	mov	r24, r16
    123a:	8f 70       	andi	r24, 0x0F	; 15
    123c:	5c df       	rcall	.-328    	; 0x10f6 <ssd1306_write_command>
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
    123e:	88 e1       	ldi	r24, 0x18	; 24
    1240:	89 83       	std	Y+1, r24	; 0x01
	spi_select_device(SSD1306_SPI, &device);
    1242:	be 01       	movw	r22, r28
    1244:	6f 5f       	subi	r22, 0xFF	; 255
    1246:	7f 4f       	sbci	r23, 0xFF	; 255
    1248:	80 ec       	ldi	r24, 0xC0	; 192
    124a:	98 e0       	ldi	r25, 0x08	; 8
    124c:	e5 d0       	rcall	.+458    	; 0x1418 <spi_select_device>
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(SPI_t *spi, uint8_t data)
{
	spi->DATA = data;
    1254:	f0 92 c3 08 	sts	0x08C3, r15	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
    1258:	80 e0       	ldi	r24, 0x00	; 0
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	01 96       	adiw	r24, 0x01	; 1
    125e:	85 33       	cpi	r24, 0x35	; 53
    1260:	91 05       	cpc	r25, r1
    1262:	e1 f7       	brne	.-8      	; 0x125c <gfx_mono_ssd1306_put_byte+0x60>
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
	delay_us(SSD1306_LATENCY); // At least 3us
	spi_deselect_device(SSD1306_SPI, &device);
    1264:	be 01       	movw	r22, r28
    1266:	6f 5f       	subi	r22, 0xFF	; 255
    1268:	7f 4f       	sbci	r23, 0xFF	; 255
    126a:	80 ec       	ldi	r24, 0xC0	; 192
    126c:	98 e0       	ldi	r25, 0x08	; 8
    126e:	ea d0       	rcall	.+468    	; 0x1444 <spi_deselect_device>

	ssd1306_set_page_address(page);
	ssd1306_set_column_address(column);

	ssd1306_write_data(data);
}
    1270:	0f 90       	pop	r0
    1272:	df 91       	pop	r29
    1274:	cf 91       	pop	r28
    1276:	1f 91       	pop	r17
    1278:	0f 91       	pop	r16
    127a:	ff 90       	pop	r15
    127c:	08 95       	ret

0000127e <gfx_mono_ssd1306_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_ssd1306_init(void)
{
    127e:	cf 93       	push	r28
    1280:	df 93       	push	r29
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_SSD1306_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
    1282:	82 e3       	ldi	r24, 0x32	; 50
    1284:	90 e2       	ldi	r25, 0x20	; 32
    1286:	0d de       	rcall	.-998    	; 0xea2 <gfx_mono_set_framebuffer>
#endif

	/* Initialize the low-level display controller. */
	ssd1306_init();
    1288:	56 dd       	rcall	.-1364   	; 0xd36 <ssd1306_init>
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_START_LINE(address));
    128a:	80 e4       	ldi	r24, 0x40	; 64
    128c:	34 df       	rcall	.-408    	; 0x10f6 <ssd1306_write_command>

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
    128e:	d0 e0       	ldi	r29, 0x00	; 0
    1290:	0b c0       	rjmp	.+22     	; 0x12a8 <gfx_mono_ssd1306_init+0x2a>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
    1292:	21 e0       	ldi	r18, 0x01	; 1
    1294:	40 e0       	ldi	r20, 0x00	; 0
    1296:	6c 2f       	mov	r22, r28
    1298:	8d 2f       	mov	r24, r29
    129a:	b0 df       	rcall	.-160    	; 0x11fc <gfx_mono_ssd1306_put_byte>
	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
    129c:	cf 5f       	subi	r28, 0xFF	; 255
    129e:	c0 38       	cpi	r28, 0x80	; 128
    12a0:	c1 f7       	brne	.-16     	; 0x1292 <gfx_mono_ssd1306_init+0x14>

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
    12a2:	df 5f       	subi	r29, 0xFF	; 255
    12a4:	d4 30       	cpi	r29, 0x04	; 4
    12a6:	11 f0       	breq	.+4      	; 0x12ac <gfx_mono_ssd1306_init+0x2e>
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_ssd1306_init(void)
{
    12a8:	c0 e0       	ldi	r28, 0x00	; 0
    12aa:	f3 cf       	rjmp	.-26     	; 0x1292 <gfx_mono_ssd1306_init+0x14>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
		}
	}
}
    12ac:	df 91       	pop	r29
    12ae:	cf 91       	pop	r28
    12b0:	08 95       	ret

000012b2 <gfx_mono_ssd1306_draw_pixel>:
	gfx_mono_ssd1306_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_ssd1306_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
    12b2:	ff 92       	push	r15
    12b4:	0f 93       	push	r16
    12b6:	1f 93       	push	r17
    12b8:	cf 93       	push	r28
    12ba:	df 93       	push	r29
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
    12bc:	88 23       	and	r24, r24
    12be:	94 f1       	brlt	.+100    	; 0x1324 <gfx_mono_ssd1306_draw_pixel+0x72>
    12c0:	60 32       	cpi	r22, 0x20	; 32
    12c2:	80 f5       	brcc	.+96     	; 0x1324 <gfx_mono_ssd1306_draw_pixel+0x72>
    12c4:	d4 2f       	mov	r29, r20
    12c6:	c8 2f       	mov	r28, r24
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
    12c8:	f6 2e       	mov	r15, r22
    12ca:	f6 94       	lsr	r15
    12cc:	f6 94       	lsr	r15
    12ce:	f6 94       	lsr	r15
	pixel_mask = (1 << (y - (page * 8)));
    12d0:	2f 2d       	mov	r18, r15
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	31 95       	neg	r19
    12d6:	21 95       	neg	r18
    12d8:	31 09       	sbc	r19, r1
    12da:	22 0f       	add	r18, r18
    12dc:	33 1f       	adc	r19, r19
    12de:	22 0f       	add	r18, r18
    12e0:	33 1f       	adc	r19, r19
    12e2:	22 0f       	add	r18, r18
    12e4:	33 1f       	adc	r19, r19
    12e6:	26 0f       	add	r18, r22
    12e8:	31 1d       	adc	r19, r1
    12ea:	61 e0       	ldi	r22, 0x01	; 1
    12ec:	70 e0       	ldi	r23, 0x00	; 0
    12ee:	8b 01       	movw	r16, r22
    12f0:	02 c0       	rjmp	.+4      	; 0x12f6 <gfx_mono_ssd1306_draw_pixel+0x44>
    12f2:	00 0f       	add	r16, r16
    12f4:	11 1f       	adc	r17, r17
    12f6:	2a 95       	dec	r18
    12f8:	e2 f7       	brpl	.-8      	; 0x12f2 <gfx_mono_ssd1306_draw_pixel+0x40>
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
    12fa:	68 2f       	mov	r22, r24
    12fc:	8f 2d       	mov	r24, r15
    12fe:	f8 dd       	rcall	.-1040   	; 0xef0 <gfx_mono_framebuffer_get_byte>
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);

	switch (color) {
    1300:	d1 30       	cpi	r29, 0x01	; 1
    1302:	21 f0       	breq	.+8      	; 0x130c <gfx_mono_ssd1306_draw_pixel+0x5a>
    1304:	28 f0       	brcs	.+10     	; 0x1310 <gfx_mono_ssd1306_draw_pixel+0x5e>
    1306:	d2 30       	cpi	r29, 0x02	; 2
    1308:	39 f0       	breq	.+14     	; 0x1318 <gfx_mono_ssd1306_draw_pixel+0x66>
    130a:	07 c0       	rjmp	.+14     	; 0x131a <gfx_mono_ssd1306_draw_pixel+0x68>
	case GFX_PIXEL_SET:
		pixel_value |= pixel_mask;
    130c:	80 2b       	or	r24, r16
		break;
    130e:	05 c0       	rjmp	.+10     	; 0x131a <gfx_mono_ssd1306_draw_pixel+0x68>

	case GFX_PIXEL_CLR:
		pixel_value &= ~pixel_mask;
    1310:	60 2f       	mov	r22, r16
    1312:	60 95       	com	r22
    1314:	86 23       	and	r24, r22
		break;
    1316:	01 c0       	rjmp	.+2      	; 0x131a <gfx_mono_ssd1306_draw_pixel+0x68>

	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
    1318:	80 27       	eor	r24, r16

	default:
		break;
	}

	gfx_mono_put_byte(page, x, pixel_value);
    131a:	20 e0       	ldi	r18, 0x00	; 0
    131c:	48 2f       	mov	r20, r24
    131e:	6c 2f       	mov	r22, r28
    1320:	8f 2d       	mov	r24, r15
    1322:	6c df       	rcall	.-296    	; 0x11fc <gfx_mono_ssd1306_put_byte>
}
    1324:	df 91       	pop	r29
    1326:	cf 91       	pop	r28
    1328:	1f 91       	pop	r17
    132a:	0f 91       	pop	r16
    132c:	ff 90       	pop	r15
    132e:	08 95       	ret

00001330 <gfx_mono_ssd1306_get_byte>:
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
    1330:	df cd       	rjmp	.-1090   	; 0xef0 <gfx_mono_framebuffer_get_byte>
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
    1332:	08 95       	ret

00001334 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    1334:	cf 93       	push	r28
    1336:	df 93       	push	r29
    1338:	fc 01       	movw	r30, r24
    133a:	70 96       	adiw	r30, 0x10	; 16
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    133c:	20 e0       	ldi	r18, 0x00	; 0
    133e:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    1340:	c6 2f       	mov	r28, r22
    1342:	d0 e0       	ldi	r29, 0x00	; 0
    1344:	de 01       	movw	r26, r28
    1346:	02 2e       	mov	r0, r18
    1348:	02 c0       	rjmp	.+4      	; 0x134e <ioport_configure_port_pin+0x1a>
    134a:	b5 95       	asr	r27
    134c:	a7 95       	ror	r26
    134e:	0a 94       	dec	r0
    1350:	e2 f7       	brpl	.-8      	; 0x134a <ioport_configure_port_pin+0x16>
    1352:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    1354:	50 83       	st	Z, r21
    1356:	2f 5f       	subi	r18, 0xFF	; 255
    1358:	3f 4f       	sbci	r19, 0xFF	; 255
    135a:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    135c:	28 30       	cpi	r18, 0x08	; 8
    135e:	31 05       	cpc	r19, r1
    1360:	89 f7       	brne	.-30     	; 0x1344 <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    1362:	40 ff       	sbrs	r20, 0
    1364:	0a c0       	rjmp	.+20     	; 0x137a <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
    1366:	41 ff       	sbrs	r20, 1
    1368:	03 c0       	rjmp	.+6      	; 0x1370 <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    136a:	fc 01       	movw	r30, r24
    136c:	65 83       	std	Z+5, r22	; 0x05
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    1370:	fc 01       	movw	r30, r24
    1372:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    1374:	fc 01       	movw	r30, r24
    1376:	61 83       	std	Z+1, r22	; 0x01
    1378:	02 c0       	rjmp	.+4      	; 0x137e <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    137a:	fc 01       	movw	r30, r24
    137c:	62 83       	std	Z+2, r22	; 0x02
	}
}
    137e:	df 91       	pop	r29
    1380:	cf 91       	pop	r28
    1382:	08 95       	ret

00001384 <spi_master_init>:
		spi_read_single(spi, data);
		data++;
	}
	
	return STATUS_OK;
}
    1384:	0f 93       	push	r16
    1386:	1f 93       	push	r17
    1388:	cf 93       	push	r28
    138a:	df 93       	push	r29
    138c:	ec 01       	movw	r28, r24
    138e:	8c 01       	movw	r16, r24
    1390:	c0 3c       	cpi	r28, 0xC0	; 192
    1392:	88 e0       	ldi	r24, 0x08	; 8
    1394:	d8 07       	cpc	r29, r24
    1396:	21 f4       	brne	.+8      	; 0x13a0 <spi_master_init+0x1c>
    1398:	68 e0       	ldi	r22, 0x08	; 8
    139a:	83 e0       	ldi	r24, 0x03	; 3
    139c:	6c dd       	rcall	.-1320   	; 0xe76 <sysclk_enable_module>
    139e:	10 c0       	rjmp	.+32     	; 0x13c0 <spi_master_init+0x3c>
    13a0:	c0 3c       	cpi	r28, 0xC0	; 192
    13a2:	89 e0       	ldi	r24, 0x09	; 9
    13a4:	d8 07       	cpc	r29, r24
    13a6:	21 f4       	brne	.+8      	; 0x13b0 <spi_master_init+0x2c>
    13a8:	68 e0       	ldi	r22, 0x08	; 8
    13aa:	84 e0       	ldi	r24, 0x04	; 4
    13ac:	64 dd       	rcall	.-1336   	; 0xe76 <sysclk_enable_module>
    13ae:	0e c0       	rjmp	.+28     	; 0x13cc <spi_master_init+0x48>
    13b0:	c0 3c       	cpi	r28, 0xC0	; 192
    13b2:	8a e0       	ldi	r24, 0x0A	; 10
    13b4:	d8 07       	cpc	r29, r24
    13b6:	21 f4       	brne	.+8      	; 0x13c0 <spi_master_init+0x3c>
    13b8:	68 e0       	ldi	r22, 0x08	; 8
    13ba:	85 e0       	ldi	r24, 0x05	; 5
    13bc:	5c dd       	rcall	.-1352   	; 0xe76 <sysclk_enable_module>
    13be:	06 c0       	rjmp	.+12     	; 0x13cc <spi_master_init+0x48>
    13c0:	00 3c       	cpi	r16, 0xC0	; 192
    13c2:	1b 40       	sbci	r17, 0x0B	; 11
    13c4:	19 f4       	brne	.+6      	; 0x13cc <spi_master_init+0x48>
    13c6:	68 e0       	ldi	r22, 0x08	; 8
    13c8:	86 e0       	ldi	r24, 0x06	; 6
    13ca:	55 dd       	rcall	.-1366   	; 0xe76 <sysclk_enable_module>
    13cc:	88 81       	ld	r24, Y
    13ce:	80 61       	ori	r24, 0x10	; 16
    13d0:	88 83       	st	Y, r24
    13d2:	df 91       	pop	r29
    13d4:	cf 91       	pop	r28
    13d6:	1f 91       	pop	r17
    13d8:	0f 91       	pop	r16
    13da:	08 95       	ret

000013dc <spi_master_setup_device>:
    13dc:	ef 92       	push	r14
    13de:	ff 92       	push	r15
    13e0:	0f 93       	push	r16
    13e2:	1f 93       	push	r17
    13e4:	cf 93       	push	r28
    13e6:	7c 01       	movw	r14, r24
    13e8:	c4 2f       	mov	r28, r20
    13ea:	b9 01       	movw	r22, r18
    13ec:	a8 01       	movw	r20, r16
    13ee:	00 e0       	ldi	r16, 0x00	; 0
    13f0:	18 e4       	ldi	r17, 0x48	; 72
    13f2:	28 ee       	ldi	r18, 0xE8	; 232
    13f4:	31 e0       	ldi	r19, 0x01	; 1
    13f6:	85 d0       	rcall	.+266    	; 0x1502 <spi_xmega_set_baud_div>
    13f8:	88 23       	and	r24, r24
    13fa:	44 f0       	brlt	.+16     	; 0x140c <spi_master_setup_device+0x30>
    13fc:	f7 01       	movw	r30, r14
    13fe:	90 81       	ld	r25, Z
    1400:	cc 0f       	add	r28, r28
    1402:	cc 0f       	add	r28, r28
    1404:	cc 70       	andi	r28, 0x0C	; 12
    1406:	93 7f       	andi	r25, 0xF3	; 243
    1408:	c9 2b       	or	r28, r25
    140a:	c0 83       	st	Z, r28
    140c:	cf 91       	pop	r28
    140e:	1f 91       	pop	r17
    1410:	0f 91       	pop	r16
    1412:	ff 90       	pop	r15
    1414:	ef 90       	pop	r14
    1416:	08 95       	ret

00001418 <spi_select_device>:
 * \param device SPI device
 *
 */
void spi_select_device(SPI_t *spi, struct spi_device *device)
{
	ioport_set_pin_low(device->id);
    1418:	fb 01       	movw	r30, r22
    141a:	80 81       	ld	r24, Z
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    141c:	e8 2f       	mov	r30, r24
    141e:	e6 95       	lsr	r30
    1420:	e6 95       	lsr	r30
    1422:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    1424:	40 e2       	ldi	r20, 0x20	; 32
    1426:	e4 9f       	mul	r30, r20
    1428:	f0 01       	movw	r30, r0
    142a:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    142c:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    142e:	87 70       	andi	r24, 0x07	; 7
    1430:	21 e0       	ldi	r18, 0x01	; 1
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	a9 01       	movw	r20, r18
    1436:	02 c0       	rjmp	.+4      	; 0x143c <spi_select_device+0x24>
    1438:	44 0f       	add	r20, r20
    143a:	55 1f       	adc	r21, r21
    143c:	8a 95       	dec	r24
    143e:	e2 f7       	brpl	.-8      	; 0x1438 <spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1440:	46 83       	std	Z+6, r20	; 0x06
    1442:	08 95       	ret

00001444 <spi_deselect_device>:
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
void spi_deselect_device(SPI_t *spi, struct spi_device *device)
{
	ioport_set_pin_high(device->id);
    1444:	fb 01       	movw	r30, r22
    1446:	80 81       	ld	r24, Z
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    1448:	e8 2f       	mov	r30, r24
    144a:	e6 95       	lsr	r30
    144c:	e6 95       	lsr	r30
    144e:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    1450:	40 e2       	ldi	r20, 0x20	; 32
    1452:	e4 9f       	mul	r30, r20
    1454:	f0 01       	movw	r30, r0
    1456:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    1458:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    145a:	87 70       	andi	r24, 0x07	; 7
    145c:	21 e0       	ldi	r18, 0x01	; 1
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	a9 01       	movw	r20, r18
    1462:	02 c0       	rjmp	.+4      	; 0x1468 <spi_deselect_device+0x24>
    1464:	44 0f       	add	r20, r20
    1466:	55 1f       	adc	r21, r21
    1468:	8a 95       	dec	r24
    146a:	e2 f7       	brpl	.-8      	; 0x1464 <spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    146c:	45 83       	std	Z+5, r20	; 0x05
    146e:	08 95       	ret

00001470 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    1470:	43 e0       	ldi	r20, 0x03	; 3
    1472:	50 e0       	ldi	r21, 0x00	; 0
    1474:	68 e0       	ldi	r22, 0x08	; 8
    1476:	80 ec       	ldi	r24, 0xC0	; 192
    1478:	97 e0       	ldi	r25, 0x07	; 7
    147a:	5c df       	rcall	.-328    	; 0x1334 <ioport_configure_port_pin>
    147c:	40 e0       	ldi	r20, 0x00	; 0
    147e:	58 e1       	ldi	r21, 0x18	; 24
    1480:	64 e0       	ldi	r22, 0x04	; 4
    1482:	80 ec       	ldi	r24, 0xC0	; 192
    1484:	97 e0       	ldi	r25, 0x07	; 7
    1486:	56 df       	rcall	.-340    	; 0x1334 <ioport_configure_port_pin>
    1488:	40 e0       	ldi	r20, 0x00	; 0
    148a:	5b e1       	ldi	r21, 0x1B	; 27
    148c:	64 e0       	ldi	r22, 0x04	; 4
    148e:	80 e2       	ldi	r24, 0x20	; 32
    1490:	97 e0       	ldi	r25, 0x07	; 7
    1492:	50 df       	rcall	.-352    	; 0x1334 <ioport_configure_port_pin>
    1494:	40 e0       	ldi	r20, 0x00	; 0
    1496:	5b e1       	ldi	r21, 0x1B	; 27
    1498:	68 e0       	ldi	r22, 0x08	; 8
    149a:	80 e0       	ldi	r24, 0x00	; 0
    149c:	96 e0       	ldi	r25, 0x06	; 6
    149e:	4a df       	rcall	.-364    	; 0x1334 <ioport_configure_port_pin>
    14a0:	40 e0       	ldi	r20, 0x00	; 0
    14a2:	5b e1       	ldi	r21, 0x1B	; 27
    14a4:	60 e8       	ldi	r22, 0x80	; 128
    14a6:	80 e0       	ldi	r24, 0x00	; 0
    14a8:	96 e0       	ldi	r25, 0x06	; 6
    14aa:	44 df       	rcall	.-376    	; 0x1334 <ioport_configure_port_pin>
    14ac:	43 e0       	ldi	r20, 0x03	; 3
    14ae:	50 e0       	ldi	r21, 0x00	; 0
    14b0:	61 e0       	ldi	r22, 0x01	; 1
    14b2:	80 e2       	ldi	r24, 0x20	; 32
    14b4:	97 e0       	ldi	r25, 0x07	; 7
    14b6:	3e df       	rcall	.-388    	; 0x1334 <ioport_configure_port_pin>
    14b8:	43 e0       	ldi	r20, 0x03	; 3
    14ba:	50 e0       	ldi	r21, 0x00	; 0
    14bc:	68 e0       	ldi	r22, 0x08	; 8
    14be:	80 e2       	ldi	r24, 0x20	; 32
    14c0:	97 e0       	ldi	r25, 0x07	; 7
    14c2:	38 df       	rcall	.-400    	; 0x1334 <ioport_configure_port_pin>
    14c4:	43 e0       	ldi	r20, 0x03	; 3
    14c6:	50 e0       	ldi	r21, 0x00	; 0
    14c8:	61 e0       	ldi	r22, 0x01	; 1
    14ca:	80 e6       	ldi	r24, 0x60	; 96
    14cc:	96 e0       	ldi	r25, 0x06	; 6
    14ce:	32 df       	rcall	.-412    	; 0x1334 <ioport_configure_port_pin>
    14d0:	43 e0       	ldi	r20, 0x03	; 3
    14d2:	50 e0       	ldi	r21, 0x00	; 0
    14d4:	60 e2       	ldi	r22, 0x20	; 32
    14d6:	80 e4       	ldi	r24, 0x40	; 64
    14d8:	96 e0       	ldi	r25, 0x06	; 6
    14da:	2c df       	rcall	.-424    	; 0x1334 <ioport_configure_port_pin>
    14dc:	43 e0       	ldi	r20, 0x03	; 3
    14de:	50 e0       	ldi	r21, 0x00	; 0
    14e0:	60 e8       	ldi	r22, 0x80	; 128
    14e2:	80 e4       	ldi	r24, 0x40	; 64
    14e4:	96 e0       	ldi	r25, 0x06	; 6
    14e6:	26 df       	rcall	.-436    	; 0x1334 <ioport_configure_port_pin>
    14e8:	43 e0       	ldi	r20, 0x03	; 3
    14ea:	50 e0       	ldi	r21, 0x00	; 0
    14ec:	60 e1       	ldi	r22, 0x10	; 16
    14ee:	80 e4       	ldi	r24, 0x40	; 64
    14f0:	96 e0       	ldi	r25, 0x06	; 6
    14f2:	20 cf       	rjmp	.-448    	; 0x1334 <ioport_configure_port_pin>
    14f4:	08 95       	ret

000014f6 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    14f6:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    14f8:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    14fa:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    14fc:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    14fe:	60 83       	st	Z, r22
	ret                             // Return to caller
    1500:	08 95       	ret

00001502 <spi_xmega_set_baud_div>:
 * \return Status of operation.
 *   \retval >=0  Success.
 *   \retval  <0  Error.
 */
int8_t spi_xmega_set_baud_div(SPI_t *spi, uint32_t baudrate, uint32_t clkper_hz)
{
    1502:	cf 92       	push	r12
    1504:	df 92       	push	r13
    1506:	ef 92       	push	r14
    1508:	ff 92       	push	r15
    150a:	0f 93       	push	r16
    150c:	1f 93       	push	r17
    150e:	cf 93       	push	r28
    1510:	df 93       	push	r29
    1512:	ec 01       	movw	r28, r24
    1514:	6a 01       	movw	r12, r20
    1516:	7b 01       	movw	r14, r22
    1518:	db 01       	movw	r26, r22
    151a:	ca 01       	movw	r24, r20
    151c:	01 97       	sbiw	r24, 0x01	; 1
    151e:	a1 09       	sbc	r26, r1
    1520:	b1 09       	sbc	r27, r1

	/*
	 * Get wanted divisor rounded up so we don't get speed higher than
	 * requested baudrate.
	 */
	divisor = (clkper_hz + baudrate - 1) / baudrate;
    1522:	bc 01       	movw	r22, r24
    1524:	cd 01       	movw	r24, r26
    1526:	60 0f       	add	r22, r16
    1528:	71 1f       	adc	r23, r17
    152a:	82 1f       	adc	r24, r18
    152c:	93 1f       	adc	r25, r19
    152e:	a7 01       	movw	r20, r14
    1530:	96 01       	movw	r18, r12
    1532:	14 d2       	rcall	.+1064   	; 0x195c <__udivmodsi4>

	if (divisor > 128) {
    1534:	21 38       	cpi	r18, 0x81	; 129
    1536:	31 05       	cpc	r19, r1
    1538:	41 05       	cpc	r20, r1
    153a:	51 05       	cpc	r21, r1
    153c:	f8 f4       	brcc	.+62     	; 0x157c <spi_xmega_set_baud_div+0x7a>

	/*
	 * For divisor values between the possible ones round up to the closest
	 * higher one to avoid higher baudrate than requested.
	 */
	if (divisor_8bit > 64) {
    153e:	21 34       	cpi	r18, 0x41	; 65
    1540:	60 f4       	brcc	.+24     	; 0x155a <spi_xmega_set_baud_div+0x58>
		ctrl = SPI_PRESCALER_DIV128_gc;
	}
	else if (divisor_8bit > 32) {
    1542:	21 32       	cpi	r18, 0x21	; 33
    1544:	60 f4       	brcc	.+24     	; 0x155e <spi_xmega_set_baud_div+0x5c>
		ctrl = SPI_PRESCALER_DIV64_gc;
	}
	else if (divisor_8bit > 16) {
    1546:	21 31       	cpi	r18, 0x11	; 17
    1548:	60 f4       	brcc	.+24     	; 0x1562 <spi_xmega_set_baud_div+0x60>
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV64_gc;
	}
	else if (divisor_8bit > 8) {
    154a:	29 30       	cpi	r18, 0x09	; 9
    154c:	60 f4       	brcc	.+24     	; 0x1566 <spi_xmega_set_baud_div+0x64>
		ctrl = SPI_PRESCALER_DIV16_gc;
	}
	else if (divisor_8bit > 4) {
    154e:	25 30       	cpi	r18, 0x05	; 5
    1550:	60 f4       	brcc	.+24     	; 0x156a <spi_xmega_set_baud_div+0x68>
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV16_gc;
	}
	else if (divisor_8bit > 2) {
    1552:	23 30       	cpi	r18, 0x03	; 3
    1554:	60 f4       	brcc	.+24     	; 0x156e <spi_xmega_set_baud_div+0x6c>
		ctrl = SPI_PRESCALER_DIV4_gc;
	}
	else {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV4_gc;
    1556:	80 e8       	ldi	r24, 0x80	; 128
    1558:	0b c0       	rjmp	.+22     	; 0x1570 <spi_xmega_set_baud_div+0x6e>
	/*
	 * For divisor values between the possible ones round up to the closest
	 * higher one to avoid higher baudrate than requested.
	 */
	if (divisor_8bit > 64) {
		ctrl = SPI_PRESCALER_DIV128_gc;
    155a:	83 e0       	ldi	r24, 0x03	; 3
    155c:	09 c0       	rjmp	.+18     	; 0x1570 <spi_xmega_set_baud_div+0x6e>
	}
	else if (divisor_8bit > 32) {
		ctrl = SPI_PRESCALER_DIV64_gc;
    155e:	82 e0       	ldi	r24, 0x02	; 2
    1560:	07 c0       	rjmp	.+14     	; 0x1570 <spi_xmega_set_baud_div+0x6e>
	}
	else if (divisor_8bit > 16) {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV64_gc;
    1562:	82 e8       	ldi	r24, 0x82	; 130
    1564:	05 c0       	rjmp	.+10     	; 0x1570 <spi_xmega_set_baud_div+0x6e>
	}
	else if (divisor_8bit > 8) {
		ctrl = SPI_PRESCALER_DIV16_gc;
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	03 c0       	rjmp	.+6      	; 0x1570 <spi_xmega_set_baud_div+0x6e>
	}
	else if (divisor_8bit > 4) {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV16_gc;
    156a:	81 e8       	ldi	r24, 0x81	; 129
    156c:	01 c0       	rjmp	.+2      	; 0x1570 <spi_xmega_set_baud_div+0x6e>
	}
	else if (divisor_8bit > 2) {
		ctrl = SPI_PRESCALER_DIV4_gc;
    156e:	80 e0       	ldi	r24, 0x00	; 0
	else {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV4_gc;
	}

	// Update register and make sure to clear out any leftover bits
	spi->CTRL = (spi->CTRL & ~(SPI_CLK2X_bm | SPI_PRESCALER_gm)) | ctrl;
    1570:	98 81       	ld	r25, Y
    1572:	9c 77       	andi	r25, 0x7C	; 124
    1574:	98 2b       	or	r25, r24
    1576:	98 83       	st	Y, r25

	return 1;
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	01 c0       	rjmp	.+2      	; 0x157e <spi_xmega_set_baud_div+0x7c>
	if (divisor > 128) {
		/*
		 * Highest possible divisor is 128 so fail since we can't get
		 * low enough baudrate.
		 */
		return -1;
    157c:	8f ef       	ldi	r24, 0xFF	; 255

	// Update register and make sure to clear out any leftover bits
	spi->CTRL = (spi->CTRL & ~(SPI_CLK2X_bm | SPI_PRESCALER_gm)) | ctrl;

	return 1;
}
    157e:	df 91       	pop	r29
    1580:	cf 91       	pop	r28
    1582:	1f 91       	pop	r17
    1584:	0f 91       	pop	r16
    1586:	ff 90       	pop	r15
    1588:	ef 90       	pop	r14
    158a:	df 90       	pop	r13
    158c:	cf 90       	pop	r12
    158e:	08 95       	ret

00001590 <__vector_100>:
 * \brief OLED1 board button 1 ISR
 *
 * This button is used as UP button, to select spinner and adjust 
 * spinner values
 */
ISR(PORTK_INT0_vect){
    1590:	1f 92       	push	r1
    1592:	0f 92       	push	r0
    1594:	0f b6       	in	r0, 0x3f	; 63
    1596:	0f 92       	push	r0
    1598:	11 24       	eor	r1, r1
    159a:	08 b6       	in	r0, 0x38	; 56
    159c:	0f 92       	push	r0
    159e:	18 be       	out	0x38, r1	; 56
    15a0:	09 b6       	in	r0, 0x39	; 57
    15a2:	0f 92       	push	r0
    15a4:	19 be       	out	0x39, r1	; 57
    15a6:	0b b6       	in	r0, 0x3b	; 59
    15a8:	0f 92       	push	r0
    15aa:	1b be       	out	0x3b, r1	; 59
    15ac:	2f 93       	push	r18
    15ae:	3f 93       	push	r19
    15b0:	4f 93       	push	r20
    15b2:	5f 93       	push	r21
    15b4:	6f 93       	push	r22
    15b6:	7f 93       	push	r23
    15b8:	8f 93       	push	r24
    15ba:	9f 93       	push	r25
    15bc:	af 93       	push	r26
    15be:	bf 93       	push	r27
    15c0:	ef 93       	push	r30
    15c2:	ff 93       	push	r31
	uint8_t switchport;
	cpu_irq_disable();
    15c4:	f8 94       	cli
    15c6:	80 e0       	ldi	r24, 0x00	; 0
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	01 96       	adiw	r24, 0x01	; 1
    15cc:	85 35       	cpi	r24, 0x55	; 85
    15ce:	20 ed       	ldi	r18, 0xD0	; 208
    15d0:	92 07       	cpc	r25, r18
    15d2:	d9 f7       	brne	.-10     	; 0x15ca <__vector_100+0x3a>
	delay_ms(10);
	gfx_mono_spinctrl_spincollection_process_key(&spinners, GFX_MONO_SPINCTRL_KEYCODE_UP, (int16_t*)&results[0]);
    15d4:	42 e3       	ldi	r20, 0x32	; 50
    15d6:	52 e2       	ldi	r21, 0x22	; 34
    15d8:	66 e2       	ldi	r22, 0x26	; 38
    15da:	88 e3       	ldi	r24, 0x38	; 56
    15dc:	92 e2       	ldi	r25, 0x22	; 34
    15de:	cb d9       	rcall	.-3178   	; 0x976 <gfx_mono_spinctrl_spincollection_process_key>
	/* Make sure button is released before continuing */
	switchport = OLED1_BOARD_BUTTON1_PORT.IN | ~OLED1_BOARD_BUTTON1_PIN_MASK;
    15e0:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    15e4:	8b 6f       	ori	r24, 0xFB	; 251
	while (switchport != 0xFF) {
    15e6:	8f 3f       	cpi	r24, 0xFF	; 255
    15e8:	49 f0       	breq	.+18     	; 0x15fc <__vector_100+0x6c>
		switchport = (OLED1_BOARD_BUTTON1_PORT.IN | ~OLED1_BOARD_BUTTON1_PIN_MASK);
    15ea:	e0 e2       	ldi	r30, 0x20	; 32
    15ec:	f7 e0       	ldi	r31, 0x07	; 7
    15ee:	80 85       	ldd	r24, Z+8	; 0x08
    15f0:	8b 6f       	ori	r24, 0xFB	; 251
	cpu_irq_disable();
	delay_ms(10);
	gfx_mono_spinctrl_spincollection_process_key(&spinners, GFX_MONO_SPINCTRL_KEYCODE_UP, (int16_t*)&results[0]);
	/* Make sure button is released before continuing */
	switchport = OLED1_BOARD_BUTTON1_PORT.IN | ~OLED1_BOARD_BUTTON1_PIN_MASK;
	while (switchport != 0xFF) {
    15f2:	8f 3f       	cpi	r24, 0xFF	; 255
    15f4:	e1 f7       	brne	.-8      	; 0x15ee <__vector_100+0x5e>
    15f6:	80 e0       	ldi	r24, 0x00	; 0
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	02 c0       	rjmp	.+4      	; 0x1600 <__vector_100+0x70>
    15fc:	80 e0       	ldi	r24, 0x00	; 0
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	01 96       	adiw	r24, 0x01	; 1
    1602:	85 35       	cpi	r24, 0x55	; 85
    1604:	20 ed       	ldi	r18, 0xD0	; 208
    1606:	92 07       	cpc	r25, r18
    1608:	d9 f7       	brne	.-10     	; 0x1600 <__vector_100+0x70>
		switchport = (OLED1_BOARD_BUTTON1_PORT.IN | ~OLED1_BOARD_BUTTON1_PIN_MASK);
	}
	delay_ms(10);

	/* Clear interrupt that was generated due to bouncing */
	OLED1_BOARD_BUTTON1_PORT.INTFLAGS = PORT_INT0IF_bm;
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	80 93 2c 07 	sts	0x072C, r24	; 0x80072c <__TEXT_REGION_LENGTH__+0x70072c>
	cpu_irq_enable();
    1610:	78 94       	sei
	
}
    1612:	ff 91       	pop	r31
    1614:	ef 91       	pop	r30
    1616:	bf 91       	pop	r27
    1618:	af 91       	pop	r26
    161a:	9f 91       	pop	r25
    161c:	8f 91       	pop	r24
    161e:	7f 91       	pop	r23
    1620:	6f 91       	pop	r22
    1622:	5f 91       	pop	r21
    1624:	4f 91       	pop	r20
    1626:	3f 91       	pop	r19
    1628:	2f 91       	pop	r18
    162a:	0f 90       	pop	r0
    162c:	0b be       	out	0x3b, r0	; 59
    162e:	0f 90       	pop	r0
    1630:	09 be       	out	0x39, r0	; 57
    1632:	0f 90       	pop	r0
    1634:	08 be       	out	0x38, r0	; 56
    1636:	0f 90       	pop	r0
    1638:	0f be       	out	0x3f, r0	; 63
    163a:	0f 90       	pop	r0
    163c:	1f 90       	pop	r1
    163e:	18 95       	reti

00001640 <__vector_66>:
 * \brief OLED1 board button 2 ISR
 *
 * This button is used as DOWN button, to select spinner and adjust 
 * spinner values
 */
ISR(PORTA_INT0_vect){
    1640:	1f 92       	push	r1
    1642:	0f 92       	push	r0
    1644:	0f b6       	in	r0, 0x3f	; 63
    1646:	0f 92       	push	r0
    1648:	11 24       	eor	r1, r1
    164a:	08 b6       	in	r0, 0x38	; 56
    164c:	0f 92       	push	r0
    164e:	18 be       	out	0x38, r1	; 56
    1650:	09 b6       	in	r0, 0x39	; 57
    1652:	0f 92       	push	r0
    1654:	19 be       	out	0x39, r1	; 57
    1656:	0b b6       	in	r0, 0x3b	; 59
    1658:	0f 92       	push	r0
    165a:	1b be       	out	0x3b, r1	; 59
    165c:	2f 93       	push	r18
    165e:	3f 93       	push	r19
    1660:	4f 93       	push	r20
    1662:	5f 93       	push	r21
    1664:	6f 93       	push	r22
    1666:	7f 93       	push	r23
    1668:	8f 93       	push	r24
    166a:	9f 93       	push	r25
    166c:	af 93       	push	r26
    166e:	bf 93       	push	r27
    1670:	ef 93       	push	r30
    1672:	ff 93       	push	r31
	uint8_t switchport;
	cpu_irq_disable();
    1674:	f8 94       	cli
    1676:	80 e0       	ldi	r24, 0x00	; 0
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	01 96       	adiw	r24, 0x01	; 1
    167c:	85 35       	cpi	r24, 0x55	; 85
    167e:	20 ed       	ldi	r18, 0xD0	; 208
    1680:	92 07       	cpc	r25, r18
    1682:	d9 f7       	brne	.-10     	; 0x167a <__vector_66+0x3a>
	delay_ms(10);
	gfx_mono_spinctrl_spincollection_process_key(&spinners, GFX_MONO_SPINCTRL_KEYCODE_DOWN, (int16_t*)&results[0]);
    1684:	42 e3       	ldi	r20, 0x32	; 50
    1686:	52 e2       	ldi	r21, 0x22	; 34
    1688:	68 e2       	ldi	r22, 0x28	; 40
    168a:	88 e3       	ldi	r24, 0x38	; 56
    168c:	92 e2       	ldi	r25, 0x22	; 34
    168e:	73 d9       	rcall	.-3354   	; 0x976 <gfx_mono_spinctrl_spincollection_process_key>

	/* Make sure button is released before continuing */
	switchport = OLED1_BOARD_BUTTON2_PORT.IN | ~OLED1_BOARD_BUTTON2_PIN_MASK;
    1690:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    1694:	87 6f       	ori	r24, 0xF7	; 247
	while (switchport != 0xFF) {
    1696:	8f 3f       	cpi	r24, 0xFF	; 255
    1698:	49 f0       	breq	.+18     	; 0x16ac <__vector_66+0x6c>
		switchport = (OLED1_BOARD_BUTTON2_PORT.IN | ~OLED1_BOARD_BUTTON2_PIN_MASK);
    169a:	e0 e0       	ldi	r30, 0x00	; 0
    169c:	f6 e0       	ldi	r31, 0x06	; 6
    169e:	80 85       	ldd	r24, Z+8	; 0x08
    16a0:	87 6f       	ori	r24, 0xF7	; 247
	delay_ms(10);
	gfx_mono_spinctrl_spincollection_process_key(&spinners, GFX_MONO_SPINCTRL_KEYCODE_DOWN, (int16_t*)&results[0]);

	/* Make sure button is released before continuing */
	switchport = OLED1_BOARD_BUTTON2_PORT.IN | ~OLED1_BOARD_BUTTON2_PIN_MASK;
	while (switchport != 0xFF) {
    16a2:	8f 3f       	cpi	r24, 0xFF	; 255
    16a4:	e1 f7       	brne	.-8      	; 0x169e <__vector_66+0x5e>
    16a6:	80 e0       	ldi	r24, 0x00	; 0
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <__vector_66+0x70>
    16ac:	80 e0       	ldi	r24, 0x00	; 0
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	01 96       	adiw	r24, 0x01	; 1
    16b2:	85 35       	cpi	r24, 0x55	; 85
    16b4:	20 ed       	ldi	r18, 0xD0	; 208
    16b6:	92 07       	cpc	r25, r18
    16b8:	d9 f7       	brne	.-10     	; 0x16b0 <__vector_66+0x70>
		switchport = (OLED1_BOARD_BUTTON2_PORT.IN | ~OLED1_BOARD_BUTTON2_PIN_MASK);
	}
	delay_ms(10);

	/* Clear interrupt that was generated due to bouncing */
	OLED1_BOARD_BUTTON2_PORT.INTFLAGS = PORT_INT0IF_bm;
    16ba:	81 e0       	ldi	r24, 0x01	; 1
    16bc:	80 93 0c 06 	sts	0x060C, r24	; 0x80060c <__TEXT_REGION_LENGTH__+0x70060c>
	cpu_irq_enable();
    16c0:	78 94       	sei
	
}
    16c2:	ff 91       	pop	r31
    16c4:	ef 91       	pop	r30
    16c6:	bf 91       	pop	r27
    16c8:	af 91       	pop	r26
    16ca:	9f 91       	pop	r25
    16cc:	8f 91       	pop	r24
    16ce:	7f 91       	pop	r23
    16d0:	6f 91       	pop	r22
    16d2:	5f 91       	pop	r21
    16d4:	4f 91       	pop	r20
    16d6:	3f 91       	pop	r19
    16d8:	2f 91       	pop	r18
    16da:	0f 90       	pop	r0
    16dc:	0b be       	out	0x3b, r0	; 59
    16de:	0f 90       	pop	r0
    16e0:	09 be       	out	0x39, r0	; 57
    16e2:	0f 90       	pop	r0
    16e4:	08 be       	out	0x38, r0	; 56
    16e6:	0f 90       	pop	r0
    16e8:	0f be       	out	0x3f, r0	; 63
    16ea:	0f 90       	pop	r0
    16ec:	1f 90       	pop	r1
    16ee:	18 95       	reti

000016f0 <__vector_67>:
 * \brief OLED1 board button 3 ISR
 *
 * This button is used as ENTER button, to enter spinner value selection and 
 * OK button
 */
ISR(PORTA_INT1_vect){
    16f0:	1f 92       	push	r1
    16f2:	0f 92       	push	r0
    16f4:	0f b6       	in	r0, 0x3f	; 63
    16f6:	0f 92       	push	r0
    16f8:	11 24       	eor	r1, r1
    16fa:	08 b6       	in	r0, 0x38	; 56
    16fc:	0f 92       	push	r0
    16fe:	18 be       	out	0x38, r1	; 56
    1700:	09 b6       	in	r0, 0x39	; 57
    1702:	0f 92       	push	r0
    1704:	19 be       	out	0x39, r1	; 57
    1706:	0b b6       	in	r0, 0x3b	; 59
    1708:	0f 92       	push	r0
    170a:	1b be       	out	0x3b, r1	; 59
    170c:	2f 93       	push	r18
    170e:	3f 93       	push	r19
    1710:	4f 93       	push	r20
    1712:	5f 93       	push	r21
    1714:	6f 93       	push	r22
    1716:	7f 93       	push	r23
    1718:	8f 93       	push	r24
    171a:	9f 93       	push	r25
    171c:	af 93       	push	r26
    171e:	bf 93       	push	r27
    1720:	ef 93       	push	r30
    1722:	ff 93       	push	r31
	
	uint8_t switchport;
	uint8_t spinctrl_status;
	
	cpu_irq_disable();
    1724:	f8 94       	cli
    1726:	80 e0       	ldi	r24, 0x00	; 0
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	01 96       	adiw	r24, 0x01	; 1
    172c:	85 35       	cpi	r24, 0x55	; 85
    172e:	20 ed       	ldi	r18, 0xD0	; 208
    1730:	92 07       	cpc	r25, r18
    1732:	d9 f7       	brne	.-10     	; 0x172a <__vector_67+0x3a>
	delay_ms(10);
	
	spinctrl_status = gfx_mono_spinctrl_spincollection_process_key(&spinners, 
    1734:	42 e3       	ldi	r20, 0x32	; 50
    1736:	52 e2       	ldi	r21, 0x22	; 34
    1738:	6d e0       	ldi	r22, 0x0D	; 13
    173a:	88 e3       	ldi	r24, 0x38	; 56
    173c:	92 e2       	ldi	r25, 0x22	; 34
    173e:	1b d9       	rcall	.-3530   	; 0x976 <gfx_mono_spinctrl_spincollection_process_key>
						GFX_MONO_SPINCTRL_KEYCODE_ENTER, (int16_t*)&results[0]);
	if(spinctrl_status == GFX_MONO_SPINCTRL_EVENT_FINISH){
    1740:	8d 3f       	cpi	r24, 0xFD	; 253
    1742:	19 f4       	brne	.+6      	; 0x174a <__vector_67+0x5a>
		// OK button pressed, display spincollection results
		show_result = true;
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	80 93 42 22 	sts	0x2242, r24	; 0x802242 <show_result>
	}

	// Make sure button is released before continuing
	switchport = OLED1_BOARD_BUTTON3_PORT.IN | ~OLED1_BOARD_BUTTON3_PIN_MASK;
    174a:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    174e:	8f 67       	ori	r24, 0x7F	; 127
	while (switchport != 0xFF) {
    1750:	8f 3f       	cpi	r24, 0xFF	; 255
    1752:	49 f0       	breq	.+18     	; 0x1766 <__vector_67+0x76>
		switchport = (OLED1_BOARD_BUTTON3_PORT.IN | ~OLED1_BOARD_BUTTON3_PIN_MASK);
    1754:	e0 e0       	ldi	r30, 0x00	; 0
    1756:	f6 e0       	ldi	r31, 0x06	; 6
    1758:	80 85       	ldd	r24, Z+8	; 0x08
    175a:	8f 67       	ori	r24, 0x7F	; 127
		show_result = true;
	}

	// Make sure button is released before continuing
	switchport = OLED1_BOARD_BUTTON3_PORT.IN | ~OLED1_BOARD_BUTTON3_PIN_MASK;
	while (switchport != 0xFF) {
    175c:	8f 3f       	cpi	r24, 0xFF	; 255
    175e:	e1 f7       	brne	.-8      	; 0x1758 <__vector_67+0x68>
    1760:	80 e0       	ldi	r24, 0x00	; 0
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	02 c0       	rjmp	.+4      	; 0x176a <__vector_67+0x7a>
    1766:	80 e0       	ldi	r24, 0x00	; 0
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	01 96       	adiw	r24, 0x01	; 1
    176c:	85 35       	cpi	r24, 0x55	; 85
    176e:	20 ed       	ldi	r18, 0xD0	; 208
    1770:	92 07       	cpc	r25, r18
    1772:	d9 f7       	brne	.-10     	; 0x176a <__vector_67+0x7a>
		switchport = (OLED1_BOARD_BUTTON3_PORT.IN | ~OLED1_BOARD_BUTTON3_PIN_MASK);
	}
	delay_ms(10);

	// Clear interrupt that was generated due to bouncing
	OLED1_BOARD_BUTTON3_PORT.INTFLAGS = PORT_INT1IF_bm;
    1774:	82 e0       	ldi	r24, 0x02	; 2
    1776:	80 93 0c 06 	sts	0x060C, r24	; 0x80060c <__TEXT_REGION_LENGTH__+0x70060c>
	cpu_irq_enable();
    177a:	78 94       	sei
	
}
    177c:	ff 91       	pop	r31
    177e:	ef 91       	pop	r30
    1780:	bf 91       	pop	r27
    1782:	af 91       	pop	r26
    1784:	9f 91       	pop	r25
    1786:	8f 91       	pop	r24
    1788:	7f 91       	pop	r23
    178a:	6f 91       	pop	r22
    178c:	5f 91       	pop	r21
    178e:	4f 91       	pop	r20
    1790:	3f 91       	pop	r19
    1792:	2f 91       	pop	r18
    1794:	0f 90       	pop	r0
    1796:	0b be       	out	0x3b, r0	; 59
    1798:	0f 90       	pop	r0
    179a:	09 be       	out	0x39, r0	; 57
    179c:	0f 90       	pop	r0
    179e:	08 be       	out	0x38, r0	; 56
    17a0:	0f 90       	pop	r0
    17a2:	0f be       	out	0x3f, r0	; 63
    17a4:	0f 90       	pop	r0
    17a6:	1f 90       	pop	r1
    17a8:	18 95       	reti

000017aa <show_spinctrl_result>:
/**
 * \brief show spinctrl results when OK button is pressed
 *
 */
void show_spinctrl_result( void )
{
    17aa:	0f 93       	push	r16
    17ac:	1f 93       	push	r17
    17ae:	cf 93       	push	r28
    17b0:	df 93       	push	r29
    17b2:	cd b7       	in	r28, 0x3d	; 61
    17b4:	de b7       	in	r29, 0x3e	; 62
    17b6:	ec 97       	sbiw	r28, 0x3c	; 60
    17b8:	cd bf       	out	0x3d, r28	; 61
    17ba:	de bf       	out	0x3e, r29	; 62
	char results_str[50];
	char temp_str[10],tempchar;
	uint8_t i = 0;
	
	cpu_irq_disable();
    17bc:	f8 94       	cli
	OLED_SCREENT_CLEAR();
    17be:	00 e0       	ldi	r16, 0x00	; 0
    17c0:	20 e2       	ldi	r18, 0x20	; 32
    17c2:	40 e8       	ldi	r20, 0x80	; 128
    17c4:	60 e0       	ldi	r22, 0x00	; 0
    17c6:	80 e0       	ldi	r24, 0x00	; 0
    17c8:	0f dc       	rcall	.-2018   	; 0xfe8 <gfx_mono_generic_draw_filled_rect>
	
	// Read spinner string in flash
	uint8_t PROGMEM_PTR_T p = (uint8_t PROGMEM_PTR_T)spinner_choicestrings[results[0]];
    17ca:	e0 91 32 22 	lds	r30, 0x2232	; 0x802232 <results>
    17ce:	f0 91 33 22 	lds	r31, 0x2233	; 0x802233 <results+0x1>
    17d2:	ee 0f       	add	r30, r30
    17d4:	ff 1f       	adc	r31, r31
    17d6:	ef 5e       	subi	r30, 0xEF	; 239
    17d8:	ff 4d       	sbci	r31, 0xDF	; 223
    17da:	20 81       	ld	r18, Z
    17dc:	31 81       	ldd	r19, Z+1	; 0x01
	tempchar = PROGMEM_READ_BYTE(p);
    17de:	f9 01       	movw	r30, r18
    17e0:	84 91       	lpm	r24, Z
	while(tempchar != '\0'){
    17e2:	88 23       	and	r24, r24
    17e4:	69 f0       	breq	.+26     	; 0x1800 <show_spinctrl_result+0x56>
    17e6:	9e 2f       	mov	r25, r30
    17e8:	92 1b       	sub	r25, r18
		temp_str[i++] = tempchar;
    17ea:	a3 e3       	ldi	r26, 0x33	; 51
    17ec:	b0 e0       	ldi	r27, 0x00	; 0
    17ee:	ac 0f       	add	r26, r28
    17f0:	bd 1f       	adc	r27, r29
    17f2:	a9 0f       	add	r26, r25
    17f4:	b1 1d       	adc	r27, r1
    17f6:	8c 93       	st	X, r24
		tempchar = PROGMEM_READ_BYTE((uint8_t PROGMEM_PTR_T)(++p));
    17f8:	31 96       	adiw	r30, 0x01	; 1
    17fa:	84 91       	lpm	r24, Z
	OLED_SCREENT_CLEAR();
	
	// Read spinner string in flash
	uint8_t PROGMEM_PTR_T p = (uint8_t PROGMEM_PTR_T)spinner_choicestrings[results[0]];
	tempchar = PROGMEM_READ_BYTE(p);
	while(tempchar != '\0'){
    17fc:	81 11       	cpse	r24, r1
    17fe:	f3 cf       	rjmp	.-26     	; 0x17e6 <show_spinctrl_result+0x3c>
		temp_str[i++] = tempchar;
		tempchar = PROGMEM_READ_BYTE((uint8_t PROGMEM_PTR_T)(++p));
	}
	
	// Format output
	sprintf(results_str, "Result is:\r\n%s\n%d\r\n%d", temp_str, results[1], results[2]);
    1800:	e2 e3       	ldi	r30, 0x32	; 50
    1802:	f2 e2       	ldi	r31, 0x22	; 34
    1804:	24 81       	ldd	r18, Z+4	; 0x04
    1806:	35 81       	ldd	r19, Z+5	; 0x05
    1808:	82 81       	ldd	r24, Z+2	; 0x02
    180a:	93 81       	ldd	r25, Z+3	; 0x03
    180c:	3f 93       	push	r19
    180e:	2f 93       	push	r18
    1810:	9f 93       	push	r25
    1812:	8f 93       	push	r24
    1814:	ce 01       	movw	r24, r28
    1816:	c3 96       	adiw	r24, 0x33	; 51
    1818:	9f 93       	push	r25
    181a:	8f 93       	push	r24
    181c:	89 e1       	ldi	r24, 0x19	; 25
    181e:	90 e2       	ldi	r25, 0x20	; 32
    1820:	9f 93       	push	r25
    1822:	8f 93       	push	r24
    1824:	8e 01       	movw	r16, r28
    1826:	0f 5f       	subi	r16, 0xFF	; 255
    1828:	1f 4f       	sbci	r17, 0xFF	; 255
    182a:	1f 93       	push	r17
    182c:	0f 93       	push	r16
    182e:	ee d0       	rcall	.+476    	; 0x1a0c <sprintf>
	
	// Display results on OLED
	gfx_mono_draw_string(results_str,0, 0, &sysfont);
    1830:	2a e0       	ldi	r18, 0x0A	; 10
    1832:	30 e2       	ldi	r19, 0x20	; 32
    1834:	40 e0       	ldi	r20, 0x00	; 0
    1836:	60 e0       	ldi	r22, 0x00	; 0
    1838:	c8 01       	movw	r24, r16
    183a:	e1 d9       	rcall	.-3134   	; 0xbfe <gfx_mono_draw_string>
    183c:	cd bf       	out	0x3d, r28	; 61
    183e:	de bf       	out	0x3e, r29	; 62
    1840:	8b ea       	ldi	r24, 0xAB	; 171
    1842:	92 ec       	ldi	r25, 0xC2	; 194
    1844:	a2 ea       	ldi	r26, 0xA2	; 162
    1846:	b0 e0       	ldi	r27, 0x00	; 0
    1848:	01 97       	sbiw	r24, 0x01	; 1
    184a:	a1 09       	sbc	r26, r1
    184c:	b1 09       	sbc	r27, r1
    184e:	e1 f7       	brne	.-8      	; 0x1848 <show_spinctrl_result+0x9e>
	delay_s(2);
	cpu_irq_enable();
    1850:	78 94       	sei
	
}
    1852:	ec 96       	adiw	r28, 0x3c	; 60
    1854:	cd bf       	out	0x3d, r28	; 61
    1856:	de bf       	out	0x3e, r29	; 62
    1858:	df 91       	pop	r29
    185a:	cf 91       	pop	r28
    185c:	1f 91       	pop	r17
    185e:	0f 91       	pop	r16
    1860:	08 95       	ret

00001862 <main>:
{
	gfx_mono_draw_string("My name is\r\nXMEGA-A1U Xplained!\r\nAnd I'm board...",
	0, 0, &sysfont);
}

int main(void){
    1862:	cf 93       	push	r28
    1864:	df 93       	push	r29
    1866:	cd b7       	in	r28, 0x3d	; 61
    1868:	de b7       	in	r29, 0x3e	; 62
    186a:	e6 97       	sbiw	r28, 0x36	; 54
    186c:	cd bf       	out	0x3d, r28	; 61
    186e:	de bf       	out	0x3e, r29	; 62

	board_init();
    1870:	ff dd       	rcall	.-1026   	; 0x1470 <board_init>
	sysclk_init();
    1872:	cc da       	rcall	.-2664   	; 0xe0c <sysclk_init>

	/* Initialize GFX lib. Will configure the display controller and
	 * create a framebuffer in RAM if the controller lack two-way communication
	 */
	gfx_mono_init();
    1874:	04 dd       	rcall	.-1528   	; 0x127e <gfx_mono_ssd1306_init>
	gfx_menu_example();
#endif
		
	// spinctrl widget demo
	//delay_s(5);
	OLED_SCREENT_CLEAR();
    1876:	00 e0       	ldi	r16, 0x00	; 0
    1878:	20 e2       	ldi	r18, 0x20	; 32
    187a:	40 e8       	ldi	r20, 0x80	; 128
    187c:	60 e0       	ldi	r22, 0x00	; 0
    187e:	80 e0       	ldi	r24, 0x00	; 0
    1880:	b3 db       	rcall	.-2202   	; 0xfe8 <gfx_mono_generic_draw_filled_rect>
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    1882:	87 e0       	ldi	r24, 0x07	; 7
    1884:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
 */
static void button_init( void )
{
	pmic_init();
	
	OLED1_BOARD_BUTTON1_PORT.INTCTRL = PORT_INT0LVL_MED_gc;
    1888:	e0 e2       	ldi	r30, 0x20	; 32
    188a:	f7 e0       	ldi	r31, 0x07	; 7
    188c:	82 e0       	ldi	r24, 0x02	; 2
    188e:	81 87       	std	Z+9, r24	; 0x09
	OLED1_BOARD_BUTTON1_PORT.INT0MASK = OLED1_BOARD_BUTTON1_PIN_MASK;
    1890:	94 e0       	ldi	r25, 0x04	; 4
    1892:	92 87       	std	Z+10, r25	; 0x0a
	
	OLED1_BOARD_BUTTON2_PORT.INTCTRL = PORT_INT0LVL_MED_gc;
    1894:	e0 e0       	ldi	r30, 0x00	; 0
    1896:	f6 e0       	ldi	r31, 0x06	; 6
    1898:	81 87       	std	Z+9, r24	; 0x09
	OLED1_BOARD_BUTTON2_PORT.INT0MASK = OLED1_BOARD_BUTTON2_PIN_MASK;
    189a:	88 e0       	ldi	r24, 0x08	; 8
    189c:	82 87       	std	Z+10, r24	; 0x0a
	
	OLED1_BOARD_BUTTON3_PORT.INTCTRL |= PORT_INT1LVL_MED_gc;
    189e:	81 85       	ldd	r24, Z+9	; 0x09
    18a0:	88 60       	ori	r24, 0x08	; 8
    18a2:	81 87       	std	Z+9, r24	; 0x09
	OLED1_BOARD_BUTTON3_PORT.INT1MASK = OLED1_BOARD_BUTTON3_PIN_MASK;
    18a4:	80 e8       	ldi	r24, 0x80	; 128
    18a6:	83 87       	std	Z+11, r24	; 0x0b
	
	cpu_irq_enable();
    18a8:	78 94       	sei

	// Initialize buttons
	button_init();
	
	// Initialize spinners
	gfx_mono_spinctrl_init(&spinner1, SPINTYPE_STRING, spinnertitle,
    18aa:	c1 2c       	mov	r12, r1
    18ac:	0f 2e       	mov	r0, r31
    18ae:	f3 e0       	ldi	r31, 0x03	; 3
    18b0:	ef 2e       	mov	r14, r31
    18b2:	f1 2c       	mov	r15, r1
    18b4:	f0 2d       	mov	r31, r0
    18b6:	00 e0       	ldi	r16, 0x00	; 0
    18b8:	10 e0       	ldi	r17, 0x00	; 0
    18ba:	21 e1       	ldi	r18, 0x11	; 17
    18bc:	30 e2       	ldi	r19, 0x20	; 32
    18be:	4b ec       	ldi	r20, 0xCB	; 203
    18c0:	54 e0       	ldi	r21, 0x04	; 4
    18c2:	60 e0       	ldi	r22, 0x00	; 0
    18c4:	ce 01       	movw	r24, r28
    18c6:	85 96       	adiw	r24, 0x25	; 37
    18c8:	0e 94 8e 03 	call	0x71c	; 0x71c <gfx_mono_spinctrl_init>
	spinner_choicestrings, 0, 3, 0);
	gfx_mono_spinctrl_init(&spinner2, SPINTYPE_INTEGER,
    18cc:	0f 2e       	mov	r0, r31
    18ce:	f7 ed       	ldi	r31, 0xD7	; 215
    18d0:	ef 2e       	mov	r14, r31
    18d2:	ff 24       	eor	r15, r15
    18d4:	fa 94       	dec	r15
    18d6:	f0 2d       	mov	r31, r0
    18d8:	04 ec       	ldi	r16, 0xC4	; 196
    18da:	1f ef       	ldi	r17, 0xFF	; 255
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	42 ec       	ldi	r20, 0xC2	; 194
    18e2:	54 e0       	ldi	r21, 0x04	; 4
    18e4:	61 e0       	ldi	r22, 0x01	; 1
    18e6:	ce 01       	movw	r24, r28
    18e8:	43 96       	adiw	r24, 0x13	; 19
    18ea:	0e 94 8e 03 	call	0x71c	; 0x71c <gfx_mono_spinctrl_init>
	spinnertitle2, NULL, -60, -41, 0);
	gfx_mono_spinctrl_init(&spinner3, SPINTYPE_INTEGER,
    18ee:	0f 2e       	mov	r0, r31
    18f0:	f8 ee       	ldi	r31, 0xE8	; 232
    18f2:	ef 2e       	mov	r14, r31
    18f4:	fe e4       	ldi	r31, 0x4E	; 78
    18f6:	ff 2e       	mov	r15, r31
    18f8:	f0 2d       	mov	r31, r0
    18fa:	0f e1       	ldi	r16, 0x1F	; 31
    18fc:	1e e4       	ldi	r17, 0x4E	; 78
    18fe:	20 e0       	ldi	r18, 0x00	; 0
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	48 eb       	ldi	r20, 0xB8	; 184
    1904:	54 e0       	ldi	r21, 0x04	; 4
    1906:	61 e0       	ldi	r22, 0x01	; 1
    1908:	ce 01       	movw	r24, r28
    190a:	01 96       	adiw	r24, 0x01	; 1
    190c:	0e 94 8e 03 	call	0x71c	; 0x71c <gfx_mono_spinctrl_init>
	spinnertitle3, NULL, 19999, 20200, 0);

	// Initialize spincollection
	gfx_mono_spinctrl_spincollection_init(&spinners);
    1910:	88 e3       	ldi	r24, 0x38	; 56
    1912:	92 e2       	ldi	r25, 0x22	; 34
    1914:	0e 94 ad 03 	call	0x75a	; 0x75a <gfx_mono_spinctrl_spincollection_init>

	// Add spinners to spincollection
	gfx_mono_spinctrl_spincollection_add_spinner(&spinner1, &spinners);
    1918:	68 e3       	ldi	r22, 0x38	; 56
    191a:	72 e2       	ldi	r23, 0x22	; 34
    191c:	ce 01       	movw	r24, r28
    191e:	85 96       	adiw	r24, 0x25	; 37
    1920:	0e 94 b4 03 	call	0x768	; 0x768 <gfx_mono_spinctrl_spincollection_add_spinner>
	gfx_mono_spinctrl_spincollection_add_spinner(&spinner2, &spinners);
    1924:	68 e3       	ldi	r22, 0x38	; 56
    1926:	72 e2       	ldi	r23, 0x22	; 34
    1928:	ce 01       	movw	r24, r28
    192a:	43 96       	adiw	r24, 0x13	; 19
    192c:	0e 94 b4 03 	call	0x768	; 0x768 <gfx_mono_spinctrl_spincollection_add_spinner>
	gfx_mono_spinctrl_spincollection_add_spinner(&spinner3, &spinners);
    1930:	68 e3       	ldi	r22, 0x38	; 56
    1932:	72 e2       	ldi	r23, 0x22	; 34
    1934:	ce 01       	movw	r24, r28
    1936:	01 96       	adiw	r24, 0x01	; 1
    1938:	0e 94 b4 03 	call	0x768	; 0x768 <gfx_mono_spinctrl_spincollection_add_spinner>

	// Show spincollection on screen
	gfx_mono_spinctrl_spincollection_show(&spinners);
    193c:	88 e3       	ldi	r24, 0x38	; 56
    193e:	92 e2       	ldi	r25, 0x22	; 34
    1940:	0e 94 e7 03 	call	0x7ce	; 0x7ce <gfx_mono_spinctrl_spincollection_show>
	OLED_SCREENT_CLEAR();
	gfx_spinctrl_example();
	
	while(true) {
		// display spincollection results when OK button pressed
		if(show_result){
    1944:	80 91 42 22 	lds	r24, 0x2242	; 0x802242 <show_result>
    1948:	88 23       	and	r24, r24
    194a:	e1 f3       	breq	.-8      	; 0x1944 <main+0xe2>
			show_result = false;
    194c:	10 92 42 22 	sts	0x2242, r1	; 0x802242 <show_result>
			// Show spincollection results
			show_spinctrl_result();
    1950:	2c df       	rcall	.-424    	; 0x17aa <show_spinctrl_result>
		
			// Show spincollection on screen
			gfx_mono_spinctrl_spincollection_show(&spinners);
    1952:	88 e3       	ldi	r24, 0x38	; 56
    1954:	92 e2       	ldi	r25, 0x22	; 34
    1956:	0e 94 e7 03 	call	0x7ce	; 0x7ce <gfx_mono_spinctrl_spincollection_show>
    195a:	f4 cf       	rjmp	.-24     	; 0x1944 <main+0xe2>

0000195c <__udivmodsi4>:
    195c:	a1 e2       	ldi	r26, 0x21	; 33
    195e:	1a 2e       	mov	r1, r26
    1960:	aa 1b       	sub	r26, r26
    1962:	bb 1b       	sub	r27, r27
    1964:	fd 01       	movw	r30, r26
    1966:	0d c0       	rjmp	.+26     	; 0x1982 <__udivmodsi4_ep>

00001968 <__udivmodsi4_loop>:
    1968:	aa 1f       	adc	r26, r26
    196a:	bb 1f       	adc	r27, r27
    196c:	ee 1f       	adc	r30, r30
    196e:	ff 1f       	adc	r31, r31
    1970:	a2 17       	cp	r26, r18
    1972:	b3 07       	cpc	r27, r19
    1974:	e4 07       	cpc	r30, r20
    1976:	f5 07       	cpc	r31, r21
    1978:	20 f0       	brcs	.+8      	; 0x1982 <__udivmodsi4_ep>
    197a:	a2 1b       	sub	r26, r18
    197c:	b3 0b       	sbc	r27, r19
    197e:	e4 0b       	sbc	r30, r20
    1980:	f5 0b       	sbc	r31, r21

00001982 <__udivmodsi4_ep>:
    1982:	66 1f       	adc	r22, r22
    1984:	77 1f       	adc	r23, r23
    1986:	88 1f       	adc	r24, r24
    1988:	99 1f       	adc	r25, r25
    198a:	1a 94       	dec	r1
    198c:	69 f7       	brne	.-38     	; 0x1968 <__udivmodsi4_loop>
    198e:	60 95       	com	r22
    1990:	70 95       	com	r23
    1992:	80 95       	com	r24
    1994:	90 95       	com	r25
    1996:	9b 01       	movw	r18, r22
    1998:	ac 01       	movw	r20, r24
    199a:	bd 01       	movw	r22, r26
    199c:	cf 01       	movw	r24, r30
    199e:	08 95       	ret

000019a0 <snprintf>:
    19a0:	0f 93       	push	r16
    19a2:	1f 93       	push	r17
    19a4:	cf 93       	push	r28
    19a6:	df 93       	push	r29
    19a8:	cd b7       	in	r28, 0x3d	; 61
    19aa:	de b7       	in	r29, 0x3e	; 62
    19ac:	2e 97       	sbiw	r28, 0x0e	; 14
    19ae:	cd bf       	out	0x3d, r28	; 61
    19b0:	de bf       	out	0x3e, r29	; 62
    19b2:	0e 89       	ldd	r16, Y+22	; 0x16
    19b4:	1f 89       	ldd	r17, Y+23	; 0x17
    19b6:	88 8d       	ldd	r24, Y+24	; 0x18
    19b8:	99 8d       	ldd	r25, Y+25	; 0x19
    19ba:	26 e0       	ldi	r18, 0x06	; 6
    19bc:	2c 83       	std	Y+4, r18	; 0x04
    19be:	09 83       	std	Y+1, r16	; 0x01
    19c0:	1a 83       	std	Y+2, r17	; 0x02
    19c2:	97 ff       	sbrs	r25, 7
    19c4:	02 c0       	rjmp	.+4      	; 0x19ca <snprintf+0x2a>
    19c6:	80 e0       	ldi	r24, 0x00	; 0
    19c8:	90 e8       	ldi	r25, 0x80	; 128
    19ca:	01 97       	sbiw	r24, 0x01	; 1
    19cc:	8d 83       	std	Y+5, r24	; 0x05
    19ce:	9e 83       	std	Y+6, r25	; 0x06
    19d0:	ae 01       	movw	r20, r28
    19d2:	44 5e       	subi	r20, 0xE4	; 228
    19d4:	5f 4f       	sbci	r21, 0xFF	; 255
    19d6:	6a 8d       	ldd	r22, Y+26	; 0x1a
    19d8:	7b 8d       	ldd	r23, Y+27	; 0x1b
    19da:	ce 01       	movw	r24, r28
    19dc:	01 96       	adiw	r24, 0x01	; 1
    19de:	3f d0       	rcall	.+126    	; 0x1a5e <vfprintf>
    19e0:	4d 81       	ldd	r20, Y+5	; 0x05
    19e2:	5e 81       	ldd	r21, Y+6	; 0x06
    19e4:	57 fd       	sbrc	r21, 7
    19e6:	0a c0       	rjmp	.+20     	; 0x19fc <snprintf+0x5c>
    19e8:	2f 81       	ldd	r18, Y+7	; 0x07
    19ea:	38 85       	ldd	r19, Y+8	; 0x08
    19ec:	42 17       	cp	r20, r18
    19ee:	53 07       	cpc	r21, r19
    19f0:	0c f4       	brge	.+2      	; 0x19f4 <snprintf+0x54>
    19f2:	9a 01       	movw	r18, r20
    19f4:	f8 01       	movw	r30, r16
    19f6:	e2 0f       	add	r30, r18
    19f8:	f3 1f       	adc	r31, r19
    19fa:	10 82       	st	Z, r1
    19fc:	2e 96       	adiw	r28, 0x0e	; 14
    19fe:	cd bf       	out	0x3d, r28	; 61
    1a00:	de bf       	out	0x3e, r29	; 62
    1a02:	df 91       	pop	r29
    1a04:	cf 91       	pop	r28
    1a06:	1f 91       	pop	r17
    1a08:	0f 91       	pop	r16
    1a0a:	08 95       	ret

00001a0c <sprintf>:
    1a0c:	0f 93       	push	r16
    1a0e:	1f 93       	push	r17
    1a10:	cf 93       	push	r28
    1a12:	df 93       	push	r29
    1a14:	cd b7       	in	r28, 0x3d	; 61
    1a16:	de b7       	in	r29, 0x3e	; 62
    1a18:	2e 97       	sbiw	r28, 0x0e	; 14
    1a1a:	cd bf       	out	0x3d, r28	; 61
    1a1c:	de bf       	out	0x3e, r29	; 62
    1a1e:	0e 89       	ldd	r16, Y+22	; 0x16
    1a20:	1f 89       	ldd	r17, Y+23	; 0x17
    1a22:	86 e0       	ldi	r24, 0x06	; 6
    1a24:	8c 83       	std	Y+4, r24	; 0x04
    1a26:	09 83       	std	Y+1, r16	; 0x01
    1a28:	1a 83       	std	Y+2, r17	; 0x02
    1a2a:	8f ef       	ldi	r24, 0xFF	; 255
    1a2c:	9f e7       	ldi	r25, 0x7F	; 127
    1a2e:	8d 83       	std	Y+5, r24	; 0x05
    1a30:	9e 83       	std	Y+6, r25	; 0x06
    1a32:	ae 01       	movw	r20, r28
    1a34:	46 5e       	subi	r20, 0xE6	; 230
    1a36:	5f 4f       	sbci	r21, 0xFF	; 255
    1a38:	68 8d       	ldd	r22, Y+24	; 0x18
    1a3a:	79 8d       	ldd	r23, Y+25	; 0x19
    1a3c:	ce 01       	movw	r24, r28
    1a3e:	01 96       	adiw	r24, 0x01	; 1
    1a40:	0e d0       	rcall	.+28     	; 0x1a5e <vfprintf>
    1a42:	2f 81       	ldd	r18, Y+7	; 0x07
    1a44:	38 85       	ldd	r19, Y+8	; 0x08
    1a46:	f8 01       	movw	r30, r16
    1a48:	e2 0f       	add	r30, r18
    1a4a:	f3 1f       	adc	r31, r19
    1a4c:	10 82       	st	Z, r1
    1a4e:	2e 96       	adiw	r28, 0x0e	; 14
    1a50:	cd bf       	out	0x3d, r28	; 61
    1a52:	de bf       	out	0x3e, r29	; 62
    1a54:	df 91       	pop	r29
    1a56:	cf 91       	pop	r28
    1a58:	1f 91       	pop	r17
    1a5a:	0f 91       	pop	r16
    1a5c:	08 95       	ret

00001a5e <vfprintf>:
    1a5e:	2f 92       	push	r2
    1a60:	3f 92       	push	r3
    1a62:	4f 92       	push	r4
    1a64:	5f 92       	push	r5
    1a66:	6f 92       	push	r6
    1a68:	7f 92       	push	r7
    1a6a:	8f 92       	push	r8
    1a6c:	9f 92       	push	r9
    1a6e:	af 92       	push	r10
    1a70:	bf 92       	push	r11
    1a72:	cf 92       	push	r12
    1a74:	df 92       	push	r13
    1a76:	ef 92       	push	r14
    1a78:	ff 92       	push	r15
    1a7a:	0f 93       	push	r16
    1a7c:	1f 93       	push	r17
    1a7e:	cf 93       	push	r28
    1a80:	df 93       	push	r29
    1a82:	cd b7       	in	r28, 0x3d	; 61
    1a84:	de b7       	in	r29, 0x3e	; 62
    1a86:	2c 97       	sbiw	r28, 0x0c	; 12
    1a88:	cd bf       	out	0x3d, r28	; 61
    1a8a:	de bf       	out	0x3e, r29	; 62
    1a8c:	7c 01       	movw	r14, r24
    1a8e:	6b 01       	movw	r12, r22
    1a90:	8a 01       	movw	r16, r20
    1a92:	fc 01       	movw	r30, r24
    1a94:	16 82       	std	Z+6, r1	; 0x06
    1a96:	17 82       	std	Z+7, r1	; 0x07
    1a98:	83 81       	ldd	r24, Z+3	; 0x03
    1a9a:	81 ff       	sbrs	r24, 1
    1a9c:	b0 c1       	rjmp	.+864    	; 0x1dfe <vfprintf+0x3a0>
    1a9e:	ce 01       	movw	r24, r28
    1aa0:	01 96       	adiw	r24, 0x01	; 1
    1aa2:	4c 01       	movw	r8, r24
    1aa4:	f7 01       	movw	r30, r14
    1aa6:	93 81       	ldd	r25, Z+3	; 0x03
    1aa8:	f6 01       	movw	r30, r12
    1aaa:	93 fd       	sbrc	r25, 3
    1aac:	85 91       	lpm	r24, Z+
    1aae:	93 ff       	sbrs	r25, 3
    1ab0:	81 91       	ld	r24, Z+
    1ab2:	6f 01       	movw	r12, r30
    1ab4:	88 23       	and	r24, r24
    1ab6:	09 f4       	brne	.+2      	; 0x1aba <vfprintf+0x5c>
    1ab8:	9e c1       	rjmp	.+828    	; 0x1df6 <vfprintf+0x398>
    1aba:	85 32       	cpi	r24, 0x25	; 37
    1abc:	39 f4       	brne	.+14     	; 0x1acc <vfprintf+0x6e>
    1abe:	93 fd       	sbrc	r25, 3
    1ac0:	85 91       	lpm	r24, Z+
    1ac2:	93 ff       	sbrs	r25, 3
    1ac4:	81 91       	ld	r24, Z+
    1ac6:	6f 01       	movw	r12, r30
    1ac8:	85 32       	cpi	r24, 0x25	; 37
    1aca:	21 f4       	brne	.+8      	; 0x1ad4 <vfprintf+0x76>
    1acc:	b7 01       	movw	r22, r14
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	c4 d1       	rcall	.+904    	; 0x1e5a <fputc>
    1ad2:	e8 cf       	rjmp	.-48     	; 0x1aa4 <vfprintf+0x46>
    1ad4:	51 2c       	mov	r5, r1
    1ad6:	31 2c       	mov	r3, r1
    1ad8:	20 e0       	ldi	r18, 0x00	; 0
    1ada:	20 32       	cpi	r18, 0x20	; 32
    1adc:	a0 f4       	brcc	.+40     	; 0x1b06 <vfprintf+0xa8>
    1ade:	8b 32       	cpi	r24, 0x2B	; 43
    1ae0:	69 f0       	breq	.+26     	; 0x1afc <vfprintf+0x9e>
    1ae2:	30 f4       	brcc	.+12     	; 0x1af0 <vfprintf+0x92>
    1ae4:	80 32       	cpi	r24, 0x20	; 32
    1ae6:	59 f0       	breq	.+22     	; 0x1afe <vfprintf+0xa0>
    1ae8:	83 32       	cpi	r24, 0x23	; 35
    1aea:	69 f4       	brne	.+26     	; 0x1b06 <vfprintf+0xa8>
    1aec:	20 61       	ori	r18, 0x10	; 16
    1aee:	2c c0       	rjmp	.+88     	; 0x1b48 <vfprintf+0xea>
    1af0:	8d 32       	cpi	r24, 0x2D	; 45
    1af2:	39 f0       	breq	.+14     	; 0x1b02 <vfprintf+0xa4>
    1af4:	80 33       	cpi	r24, 0x30	; 48
    1af6:	39 f4       	brne	.+14     	; 0x1b06 <vfprintf+0xa8>
    1af8:	21 60       	ori	r18, 0x01	; 1
    1afa:	26 c0       	rjmp	.+76     	; 0x1b48 <vfprintf+0xea>
    1afc:	22 60       	ori	r18, 0x02	; 2
    1afe:	24 60       	ori	r18, 0x04	; 4
    1b00:	23 c0       	rjmp	.+70     	; 0x1b48 <vfprintf+0xea>
    1b02:	28 60       	ori	r18, 0x08	; 8
    1b04:	21 c0       	rjmp	.+66     	; 0x1b48 <vfprintf+0xea>
    1b06:	27 fd       	sbrc	r18, 7
    1b08:	27 c0       	rjmp	.+78     	; 0x1b58 <vfprintf+0xfa>
    1b0a:	30 ed       	ldi	r19, 0xD0	; 208
    1b0c:	38 0f       	add	r19, r24
    1b0e:	3a 30       	cpi	r19, 0x0A	; 10
    1b10:	78 f4       	brcc	.+30     	; 0x1b30 <vfprintf+0xd2>
    1b12:	26 ff       	sbrs	r18, 6
    1b14:	06 c0       	rjmp	.+12     	; 0x1b22 <vfprintf+0xc4>
    1b16:	fa e0       	ldi	r31, 0x0A	; 10
    1b18:	5f 9e       	mul	r5, r31
    1b1a:	30 0d       	add	r19, r0
    1b1c:	11 24       	eor	r1, r1
    1b1e:	53 2e       	mov	r5, r19
    1b20:	13 c0       	rjmp	.+38     	; 0x1b48 <vfprintf+0xea>
    1b22:	8a e0       	ldi	r24, 0x0A	; 10
    1b24:	38 9e       	mul	r3, r24
    1b26:	30 0d       	add	r19, r0
    1b28:	11 24       	eor	r1, r1
    1b2a:	33 2e       	mov	r3, r19
    1b2c:	20 62       	ori	r18, 0x20	; 32
    1b2e:	0c c0       	rjmp	.+24     	; 0x1b48 <vfprintf+0xea>
    1b30:	8e 32       	cpi	r24, 0x2E	; 46
    1b32:	21 f4       	brne	.+8      	; 0x1b3c <vfprintf+0xde>
    1b34:	26 fd       	sbrc	r18, 6
    1b36:	5f c1       	rjmp	.+702    	; 0x1df6 <vfprintf+0x398>
    1b38:	20 64       	ori	r18, 0x40	; 64
    1b3a:	06 c0       	rjmp	.+12     	; 0x1b48 <vfprintf+0xea>
    1b3c:	8c 36       	cpi	r24, 0x6C	; 108
    1b3e:	11 f4       	brne	.+4      	; 0x1b44 <vfprintf+0xe6>
    1b40:	20 68       	ori	r18, 0x80	; 128
    1b42:	02 c0       	rjmp	.+4      	; 0x1b48 <vfprintf+0xea>
    1b44:	88 36       	cpi	r24, 0x68	; 104
    1b46:	41 f4       	brne	.+16     	; 0x1b58 <vfprintf+0xfa>
    1b48:	f6 01       	movw	r30, r12
    1b4a:	93 fd       	sbrc	r25, 3
    1b4c:	85 91       	lpm	r24, Z+
    1b4e:	93 ff       	sbrs	r25, 3
    1b50:	81 91       	ld	r24, Z+
    1b52:	6f 01       	movw	r12, r30
    1b54:	81 11       	cpse	r24, r1
    1b56:	c1 cf       	rjmp	.-126    	; 0x1ada <vfprintf+0x7c>
    1b58:	98 2f       	mov	r25, r24
    1b5a:	9f 7d       	andi	r25, 0xDF	; 223
    1b5c:	95 54       	subi	r25, 0x45	; 69
    1b5e:	93 30       	cpi	r25, 0x03	; 3
    1b60:	28 f4       	brcc	.+10     	; 0x1b6c <vfprintf+0x10e>
    1b62:	0c 5f       	subi	r16, 0xFC	; 252
    1b64:	1f 4f       	sbci	r17, 0xFF	; 255
    1b66:	ff e3       	ldi	r31, 0x3F	; 63
    1b68:	f9 83       	std	Y+1, r31	; 0x01
    1b6a:	0d c0       	rjmp	.+26     	; 0x1b86 <vfprintf+0x128>
    1b6c:	83 36       	cpi	r24, 0x63	; 99
    1b6e:	31 f0       	breq	.+12     	; 0x1b7c <vfprintf+0x11e>
    1b70:	83 37       	cpi	r24, 0x73	; 115
    1b72:	71 f0       	breq	.+28     	; 0x1b90 <vfprintf+0x132>
    1b74:	83 35       	cpi	r24, 0x53	; 83
    1b76:	09 f0       	breq	.+2      	; 0x1b7a <vfprintf+0x11c>
    1b78:	57 c0       	rjmp	.+174    	; 0x1c28 <vfprintf+0x1ca>
    1b7a:	21 c0       	rjmp	.+66     	; 0x1bbe <vfprintf+0x160>
    1b7c:	f8 01       	movw	r30, r16
    1b7e:	80 81       	ld	r24, Z
    1b80:	89 83       	std	Y+1, r24	; 0x01
    1b82:	0e 5f       	subi	r16, 0xFE	; 254
    1b84:	1f 4f       	sbci	r17, 0xFF	; 255
    1b86:	44 24       	eor	r4, r4
    1b88:	43 94       	inc	r4
    1b8a:	51 2c       	mov	r5, r1
    1b8c:	54 01       	movw	r10, r8
    1b8e:	14 c0       	rjmp	.+40     	; 0x1bb8 <vfprintf+0x15a>
    1b90:	38 01       	movw	r6, r16
    1b92:	f2 e0       	ldi	r31, 0x02	; 2
    1b94:	6f 0e       	add	r6, r31
    1b96:	71 1c       	adc	r7, r1
    1b98:	f8 01       	movw	r30, r16
    1b9a:	a0 80       	ld	r10, Z
    1b9c:	b1 80       	ldd	r11, Z+1	; 0x01
    1b9e:	26 ff       	sbrs	r18, 6
    1ba0:	03 c0       	rjmp	.+6      	; 0x1ba8 <vfprintf+0x14a>
    1ba2:	65 2d       	mov	r22, r5
    1ba4:	70 e0       	ldi	r23, 0x00	; 0
    1ba6:	02 c0       	rjmp	.+4      	; 0x1bac <vfprintf+0x14e>
    1ba8:	6f ef       	ldi	r22, 0xFF	; 255
    1baa:	7f ef       	ldi	r23, 0xFF	; 255
    1bac:	c5 01       	movw	r24, r10
    1bae:	2c 87       	std	Y+12, r18	; 0x0c
    1bb0:	49 d1       	rcall	.+658    	; 0x1e44 <strnlen>
    1bb2:	2c 01       	movw	r4, r24
    1bb4:	83 01       	movw	r16, r6
    1bb6:	2c 85       	ldd	r18, Y+12	; 0x0c
    1bb8:	2f 77       	andi	r18, 0x7F	; 127
    1bba:	22 2e       	mov	r2, r18
    1bbc:	16 c0       	rjmp	.+44     	; 0x1bea <vfprintf+0x18c>
    1bbe:	38 01       	movw	r6, r16
    1bc0:	f2 e0       	ldi	r31, 0x02	; 2
    1bc2:	6f 0e       	add	r6, r31
    1bc4:	71 1c       	adc	r7, r1
    1bc6:	f8 01       	movw	r30, r16
    1bc8:	a0 80       	ld	r10, Z
    1bca:	b1 80       	ldd	r11, Z+1	; 0x01
    1bcc:	26 ff       	sbrs	r18, 6
    1bce:	03 c0       	rjmp	.+6      	; 0x1bd6 <vfprintf+0x178>
    1bd0:	65 2d       	mov	r22, r5
    1bd2:	70 e0       	ldi	r23, 0x00	; 0
    1bd4:	02 c0       	rjmp	.+4      	; 0x1bda <vfprintf+0x17c>
    1bd6:	6f ef       	ldi	r22, 0xFF	; 255
    1bd8:	7f ef       	ldi	r23, 0xFF	; 255
    1bda:	c5 01       	movw	r24, r10
    1bdc:	2c 87       	std	Y+12, r18	; 0x0c
    1bde:	27 d1       	rcall	.+590    	; 0x1e2e <strnlen_P>
    1be0:	2c 01       	movw	r4, r24
    1be2:	2c 85       	ldd	r18, Y+12	; 0x0c
    1be4:	20 68       	ori	r18, 0x80	; 128
    1be6:	22 2e       	mov	r2, r18
    1be8:	83 01       	movw	r16, r6
    1bea:	23 fc       	sbrc	r2, 3
    1bec:	19 c0       	rjmp	.+50     	; 0x1c20 <vfprintf+0x1c2>
    1bee:	83 2d       	mov	r24, r3
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	48 16       	cp	r4, r24
    1bf4:	59 06       	cpc	r5, r25
    1bf6:	a0 f4       	brcc	.+40     	; 0x1c20 <vfprintf+0x1c2>
    1bf8:	b7 01       	movw	r22, r14
    1bfa:	80 e2       	ldi	r24, 0x20	; 32
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	2d d1       	rcall	.+602    	; 0x1e5a <fputc>
    1c00:	3a 94       	dec	r3
    1c02:	f5 cf       	rjmp	.-22     	; 0x1bee <vfprintf+0x190>
    1c04:	f5 01       	movw	r30, r10
    1c06:	27 fc       	sbrc	r2, 7
    1c08:	85 91       	lpm	r24, Z+
    1c0a:	27 fe       	sbrs	r2, 7
    1c0c:	81 91       	ld	r24, Z+
    1c0e:	5f 01       	movw	r10, r30
    1c10:	b7 01       	movw	r22, r14
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	22 d1       	rcall	.+580    	; 0x1e5a <fputc>
    1c16:	31 10       	cpse	r3, r1
    1c18:	3a 94       	dec	r3
    1c1a:	f1 e0       	ldi	r31, 0x01	; 1
    1c1c:	4f 1a       	sub	r4, r31
    1c1e:	51 08       	sbc	r5, r1
    1c20:	41 14       	cp	r4, r1
    1c22:	51 04       	cpc	r5, r1
    1c24:	79 f7       	brne	.-34     	; 0x1c04 <vfprintf+0x1a6>
    1c26:	de c0       	rjmp	.+444    	; 0x1de4 <vfprintf+0x386>
    1c28:	84 36       	cpi	r24, 0x64	; 100
    1c2a:	11 f0       	breq	.+4      	; 0x1c30 <vfprintf+0x1d2>
    1c2c:	89 36       	cpi	r24, 0x69	; 105
    1c2e:	31 f5       	brne	.+76     	; 0x1c7c <vfprintf+0x21e>
    1c30:	f8 01       	movw	r30, r16
    1c32:	27 ff       	sbrs	r18, 7
    1c34:	07 c0       	rjmp	.+14     	; 0x1c44 <vfprintf+0x1e6>
    1c36:	60 81       	ld	r22, Z
    1c38:	71 81       	ldd	r23, Z+1	; 0x01
    1c3a:	82 81       	ldd	r24, Z+2	; 0x02
    1c3c:	93 81       	ldd	r25, Z+3	; 0x03
    1c3e:	0c 5f       	subi	r16, 0xFC	; 252
    1c40:	1f 4f       	sbci	r17, 0xFF	; 255
    1c42:	08 c0       	rjmp	.+16     	; 0x1c54 <vfprintf+0x1f6>
    1c44:	60 81       	ld	r22, Z
    1c46:	71 81       	ldd	r23, Z+1	; 0x01
    1c48:	07 2e       	mov	r0, r23
    1c4a:	00 0c       	add	r0, r0
    1c4c:	88 0b       	sbc	r24, r24
    1c4e:	99 0b       	sbc	r25, r25
    1c50:	0e 5f       	subi	r16, 0xFE	; 254
    1c52:	1f 4f       	sbci	r17, 0xFF	; 255
    1c54:	2f 76       	andi	r18, 0x6F	; 111
    1c56:	72 2e       	mov	r7, r18
    1c58:	97 ff       	sbrs	r25, 7
    1c5a:	09 c0       	rjmp	.+18     	; 0x1c6e <vfprintf+0x210>
    1c5c:	90 95       	com	r25
    1c5e:	80 95       	com	r24
    1c60:	70 95       	com	r23
    1c62:	61 95       	neg	r22
    1c64:	7f 4f       	sbci	r23, 0xFF	; 255
    1c66:	8f 4f       	sbci	r24, 0xFF	; 255
    1c68:	9f 4f       	sbci	r25, 0xFF	; 255
    1c6a:	20 68       	ori	r18, 0x80	; 128
    1c6c:	72 2e       	mov	r7, r18
    1c6e:	2a e0       	ldi	r18, 0x0A	; 10
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	a4 01       	movw	r20, r8
    1c74:	2a d1       	rcall	.+596    	; 0x1eca <__ultoa_invert>
    1c76:	a8 2e       	mov	r10, r24
    1c78:	a8 18       	sub	r10, r8
    1c7a:	43 c0       	rjmp	.+134    	; 0x1d02 <vfprintf+0x2a4>
    1c7c:	85 37       	cpi	r24, 0x75	; 117
    1c7e:	29 f4       	brne	.+10     	; 0x1c8a <vfprintf+0x22c>
    1c80:	2f 7e       	andi	r18, 0xEF	; 239
    1c82:	b2 2e       	mov	r11, r18
    1c84:	2a e0       	ldi	r18, 0x0A	; 10
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	25 c0       	rjmp	.+74     	; 0x1cd4 <vfprintf+0x276>
    1c8a:	f2 2f       	mov	r31, r18
    1c8c:	f9 7f       	andi	r31, 0xF9	; 249
    1c8e:	bf 2e       	mov	r11, r31
    1c90:	8f 36       	cpi	r24, 0x6F	; 111
    1c92:	c1 f0       	breq	.+48     	; 0x1cc4 <vfprintf+0x266>
    1c94:	18 f4       	brcc	.+6      	; 0x1c9c <vfprintf+0x23e>
    1c96:	88 35       	cpi	r24, 0x58	; 88
    1c98:	79 f0       	breq	.+30     	; 0x1cb8 <vfprintf+0x25a>
    1c9a:	ad c0       	rjmp	.+346    	; 0x1df6 <vfprintf+0x398>
    1c9c:	80 37       	cpi	r24, 0x70	; 112
    1c9e:	19 f0       	breq	.+6      	; 0x1ca6 <vfprintf+0x248>
    1ca0:	88 37       	cpi	r24, 0x78	; 120
    1ca2:	21 f0       	breq	.+8      	; 0x1cac <vfprintf+0x24e>
    1ca4:	a8 c0       	rjmp	.+336    	; 0x1df6 <vfprintf+0x398>
    1ca6:	2f 2f       	mov	r18, r31
    1ca8:	20 61       	ori	r18, 0x10	; 16
    1caa:	b2 2e       	mov	r11, r18
    1cac:	b4 fe       	sbrs	r11, 4
    1cae:	0d c0       	rjmp	.+26     	; 0x1cca <vfprintf+0x26c>
    1cb0:	8b 2d       	mov	r24, r11
    1cb2:	84 60       	ori	r24, 0x04	; 4
    1cb4:	b8 2e       	mov	r11, r24
    1cb6:	09 c0       	rjmp	.+18     	; 0x1cca <vfprintf+0x26c>
    1cb8:	24 ff       	sbrs	r18, 4
    1cba:	0a c0       	rjmp	.+20     	; 0x1cd0 <vfprintf+0x272>
    1cbc:	9f 2f       	mov	r25, r31
    1cbe:	96 60       	ori	r25, 0x06	; 6
    1cc0:	b9 2e       	mov	r11, r25
    1cc2:	06 c0       	rjmp	.+12     	; 0x1cd0 <vfprintf+0x272>
    1cc4:	28 e0       	ldi	r18, 0x08	; 8
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	05 c0       	rjmp	.+10     	; 0x1cd4 <vfprintf+0x276>
    1cca:	20 e1       	ldi	r18, 0x10	; 16
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	02 c0       	rjmp	.+4      	; 0x1cd4 <vfprintf+0x276>
    1cd0:	20 e1       	ldi	r18, 0x10	; 16
    1cd2:	32 e0       	ldi	r19, 0x02	; 2
    1cd4:	f8 01       	movw	r30, r16
    1cd6:	b7 fe       	sbrs	r11, 7
    1cd8:	07 c0       	rjmp	.+14     	; 0x1ce8 <vfprintf+0x28a>
    1cda:	60 81       	ld	r22, Z
    1cdc:	71 81       	ldd	r23, Z+1	; 0x01
    1cde:	82 81       	ldd	r24, Z+2	; 0x02
    1ce0:	93 81       	ldd	r25, Z+3	; 0x03
    1ce2:	0c 5f       	subi	r16, 0xFC	; 252
    1ce4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce6:	06 c0       	rjmp	.+12     	; 0x1cf4 <vfprintf+0x296>
    1ce8:	60 81       	ld	r22, Z
    1cea:	71 81       	ldd	r23, Z+1	; 0x01
    1cec:	80 e0       	ldi	r24, 0x00	; 0
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	0e 5f       	subi	r16, 0xFE	; 254
    1cf2:	1f 4f       	sbci	r17, 0xFF	; 255
    1cf4:	a4 01       	movw	r20, r8
    1cf6:	e9 d0       	rcall	.+466    	; 0x1eca <__ultoa_invert>
    1cf8:	a8 2e       	mov	r10, r24
    1cfa:	a8 18       	sub	r10, r8
    1cfc:	fb 2d       	mov	r31, r11
    1cfe:	ff 77       	andi	r31, 0x7F	; 127
    1d00:	7f 2e       	mov	r7, r31
    1d02:	76 fe       	sbrs	r7, 6
    1d04:	0b c0       	rjmp	.+22     	; 0x1d1c <vfprintf+0x2be>
    1d06:	37 2d       	mov	r19, r7
    1d08:	3e 7f       	andi	r19, 0xFE	; 254
    1d0a:	a5 14       	cp	r10, r5
    1d0c:	50 f4       	brcc	.+20     	; 0x1d22 <vfprintf+0x2c4>
    1d0e:	74 fe       	sbrs	r7, 4
    1d10:	0a c0       	rjmp	.+20     	; 0x1d26 <vfprintf+0x2c8>
    1d12:	72 fc       	sbrc	r7, 2
    1d14:	08 c0       	rjmp	.+16     	; 0x1d26 <vfprintf+0x2c8>
    1d16:	37 2d       	mov	r19, r7
    1d18:	3e 7e       	andi	r19, 0xEE	; 238
    1d1a:	05 c0       	rjmp	.+10     	; 0x1d26 <vfprintf+0x2c8>
    1d1c:	ba 2c       	mov	r11, r10
    1d1e:	37 2d       	mov	r19, r7
    1d20:	03 c0       	rjmp	.+6      	; 0x1d28 <vfprintf+0x2ca>
    1d22:	ba 2c       	mov	r11, r10
    1d24:	01 c0       	rjmp	.+2      	; 0x1d28 <vfprintf+0x2ca>
    1d26:	b5 2c       	mov	r11, r5
    1d28:	34 ff       	sbrs	r19, 4
    1d2a:	0d c0       	rjmp	.+26     	; 0x1d46 <vfprintf+0x2e8>
    1d2c:	fe 01       	movw	r30, r28
    1d2e:	ea 0d       	add	r30, r10
    1d30:	f1 1d       	adc	r31, r1
    1d32:	80 81       	ld	r24, Z
    1d34:	80 33       	cpi	r24, 0x30	; 48
    1d36:	11 f4       	brne	.+4      	; 0x1d3c <vfprintf+0x2de>
    1d38:	39 7e       	andi	r19, 0xE9	; 233
    1d3a:	09 c0       	rjmp	.+18     	; 0x1d4e <vfprintf+0x2f0>
    1d3c:	32 ff       	sbrs	r19, 2
    1d3e:	06 c0       	rjmp	.+12     	; 0x1d4c <vfprintf+0x2ee>
    1d40:	b3 94       	inc	r11
    1d42:	b3 94       	inc	r11
    1d44:	04 c0       	rjmp	.+8      	; 0x1d4e <vfprintf+0x2f0>
    1d46:	83 2f       	mov	r24, r19
    1d48:	86 78       	andi	r24, 0x86	; 134
    1d4a:	09 f0       	breq	.+2      	; 0x1d4e <vfprintf+0x2f0>
    1d4c:	b3 94       	inc	r11
    1d4e:	33 fd       	sbrc	r19, 3
    1d50:	12 c0       	rjmp	.+36     	; 0x1d76 <vfprintf+0x318>
    1d52:	30 ff       	sbrs	r19, 0
    1d54:	06 c0       	rjmp	.+12     	; 0x1d62 <vfprintf+0x304>
    1d56:	5a 2c       	mov	r5, r10
    1d58:	b3 14       	cp	r11, r3
    1d5a:	18 f4       	brcc	.+6      	; 0x1d62 <vfprintf+0x304>
    1d5c:	53 0c       	add	r5, r3
    1d5e:	5b 18       	sub	r5, r11
    1d60:	b3 2c       	mov	r11, r3
    1d62:	b3 14       	cp	r11, r3
    1d64:	60 f4       	brcc	.+24     	; 0x1d7e <vfprintf+0x320>
    1d66:	b7 01       	movw	r22, r14
    1d68:	80 e2       	ldi	r24, 0x20	; 32
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	3c 87       	std	Y+12, r19	; 0x0c
    1d6e:	75 d0       	rcall	.+234    	; 0x1e5a <fputc>
    1d70:	b3 94       	inc	r11
    1d72:	3c 85       	ldd	r19, Y+12	; 0x0c
    1d74:	f6 cf       	rjmp	.-20     	; 0x1d62 <vfprintf+0x304>
    1d76:	b3 14       	cp	r11, r3
    1d78:	10 f4       	brcc	.+4      	; 0x1d7e <vfprintf+0x320>
    1d7a:	3b 18       	sub	r3, r11
    1d7c:	01 c0       	rjmp	.+2      	; 0x1d80 <vfprintf+0x322>
    1d7e:	31 2c       	mov	r3, r1
    1d80:	34 ff       	sbrs	r19, 4
    1d82:	11 c0       	rjmp	.+34     	; 0x1da6 <vfprintf+0x348>
    1d84:	b7 01       	movw	r22, r14
    1d86:	80 e3       	ldi	r24, 0x30	; 48
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	3c 87       	std	Y+12, r19	; 0x0c
    1d8c:	66 d0       	rcall	.+204    	; 0x1e5a <fputc>
    1d8e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1d90:	32 ff       	sbrs	r19, 2
    1d92:	16 c0       	rjmp	.+44     	; 0x1dc0 <vfprintf+0x362>
    1d94:	31 fd       	sbrc	r19, 1
    1d96:	03 c0       	rjmp	.+6      	; 0x1d9e <vfprintf+0x340>
    1d98:	88 e7       	ldi	r24, 0x78	; 120
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	02 c0       	rjmp	.+4      	; 0x1da2 <vfprintf+0x344>
    1d9e:	88 e5       	ldi	r24, 0x58	; 88
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	b7 01       	movw	r22, r14
    1da4:	0c c0       	rjmp	.+24     	; 0x1dbe <vfprintf+0x360>
    1da6:	83 2f       	mov	r24, r19
    1da8:	86 78       	andi	r24, 0x86	; 134
    1daa:	51 f0       	breq	.+20     	; 0x1dc0 <vfprintf+0x362>
    1dac:	31 ff       	sbrs	r19, 1
    1dae:	02 c0       	rjmp	.+4      	; 0x1db4 <vfprintf+0x356>
    1db0:	8b e2       	ldi	r24, 0x2B	; 43
    1db2:	01 c0       	rjmp	.+2      	; 0x1db6 <vfprintf+0x358>
    1db4:	80 e2       	ldi	r24, 0x20	; 32
    1db6:	37 fd       	sbrc	r19, 7
    1db8:	8d e2       	ldi	r24, 0x2D	; 45
    1dba:	b7 01       	movw	r22, r14
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	4d d0       	rcall	.+154    	; 0x1e5a <fputc>
    1dc0:	a5 14       	cp	r10, r5
    1dc2:	30 f4       	brcc	.+12     	; 0x1dd0 <vfprintf+0x372>
    1dc4:	b7 01       	movw	r22, r14
    1dc6:	80 e3       	ldi	r24, 0x30	; 48
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	47 d0       	rcall	.+142    	; 0x1e5a <fputc>
    1dcc:	5a 94       	dec	r5
    1dce:	f8 cf       	rjmp	.-16     	; 0x1dc0 <vfprintf+0x362>
    1dd0:	aa 94       	dec	r10
    1dd2:	f4 01       	movw	r30, r8
    1dd4:	ea 0d       	add	r30, r10
    1dd6:	f1 1d       	adc	r31, r1
    1dd8:	80 81       	ld	r24, Z
    1dda:	b7 01       	movw	r22, r14
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	3d d0       	rcall	.+122    	; 0x1e5a <fputc>
    1de0:	a1 10       	cpse	r10, r1
    1de2:	f6 cf       	rjmp	.-20     	; 0x1dd0 <vfprintf+0x372>
    1de4:	33 20       	and	r3, r3
    1de6:	09 f4       	brne	.+2      	; 0x1dea <vfprintf+0x38c>
    1de8:	5d ce       	rjmp	.-838    	; 0x1aa4 <vfprintf+0x46>
    1dea:	b7 01       	movw	r22, r14
    1dec:	80 e2       	ldi	r24, 0x20	; 32
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	34 d0       	rcall	.+104    	; 0x1e5a <fputc>
    1df2:	3a 94       	dec	r3
    1df4:	f7 cf       	rjmp	.-18     	; 0x1de4 <vfprintf+0x386>
    1df6:	f7 01       	movw	r30, r14
    1df8:	86 81       	ldd	r24, Z+6	; 0x06
    1dfa:	97 81       	ldd	r25, Z+7	; 0x07
    1dfc:	02 c0       	rjmp	.+4      	; 0x1e02 <vfprintf+0x3a4>
    1dfe:	8f ef       	ldi	r24, 0xFF	; 255
    1e00:	9f ef       	ldi	r25, 0xFF	; 255
    1e02:	2c 96       	adiw	r28, 0x0c	; 12
    1e04:	cd bf       	out	0x3d, r28	; 61
    1e06:	de bf       	out	0x3e, r29	; 62
    1e08:	df 91       	pop	r29
    1e0a:	cf 91       	pop	r28
    1e0c:	1f 91       	pop	r17
    1e0e:	0f 91       	pop	r16
    1e10:	ff 90       	pop	r15
    1e12:	ef 90       	pop	r14
    1e14:	df 90       	pop	r13
    1e16:	cf 90       	pop	r12
    1e18:	bf 90       	pop	r11
    1e1a:	af 90       	pop	r10
    1e1c:	9f 90       	pop	r9
    1e1e:	8f 90       	pop	r8
    1e20:	7f 90       	pop	r7
    1e22:	6f 90       	pop	r6
    1e24:	5f 90       	pop	r5
    1e26:	4f 90       	pop	r4
    1e28:	3f 90       	pop	r3
    1e2a:	2f 90       	pop	r2
    1e2c:	08 95       	ret

00001e2e <strnlen_P>:
    1e2e:	fc 01       	movw	r30, r24
    1e30:	05 90       	lpm	r0, Z+
    1e32:	61 50       	subi	r22, 0x01	; 1
    1e34:	70 40       	sbci	r23, 0x00	; 0
    1e36:	01 10       	cpse	r0, r1
    1e38:	d8 f7       	brcc	.-10     	; 0x1e30 <strnlen_P+0x2>
    1e3a:	80 95       	com	r24
    1e3c:	90 95       	com	r25
    1e3e:	8e 0f       	add	r24, r30
    1e40:	9f 1f       	adc	r25, r31
    1e42:	08 95       	ret

00001e44 <strnlen>:
    1e44:	fc 01       	movw	r30, r24
    1e46:	61 50       	subi	r22, 0x01	; 1
    1e48:	70 40       	sbci	r23, 0x00	; 0
    1e4a:	01 90       	ld	r0, Z+
    1e4c:	01 10       	cpse	r0, r1
    1e4e:	d8 f7       	brcc	.-10     	; 0x1e46 <strnlen+0x2>
    1e50:	80 95       	com	r24
    1e52:	90 95       	com	r25
    1e54:	8e 0f       	add	r24, r30
    1e56:	9f 1f       	adc	r25, r31
    1e58:	08 95       	ret

00001e5a <fputc>:
    1e5a:	0f 93       	push	r16
    1e5c:	1f 93       	push	r17
    1e5e:	cf 93       	push	r28
    1e60:	df 93       	push	r29
    1e62:	fb 01       	movw	r30, r22
    1e64:	23 81       	ldd	r18, Z+3	; 0x03
    1e66:	21 fd       	sbrc	r18, 1
    1e68:	03 c0       	rjmp	.+6      	; 0x1e70 <fputc+0x16>
    1e6a:	8f ef       	ldi	r24, 0xFF	; 255
    1e6c:	9f ef       	ldi	r25, 0xFF	; 255
    1e6e:	28 c0       	rjmp	.+80     	; 0x1ec0 <fputc+0x66>
    1e70:	22 ff       	sbrs	r18, 2
    1e72:	16 c0       	rjmp	.+44     	; 0x1ea0 <fputc+0x46>
    1e74:	46 81       	ldd	r20, Z+6	; 0x06
    1e76:	57 81       	ldd	r21, Z+7	; 0x07
    1e78:	24 81       	ldd	r18, Z+4	; 0x04
    1e7a:	35 81       	ldd	r19, Z+5	; 0x05
    1e7c:	42 17       	cp	r20, r18
    1e7e:	53 07       	cpc	r21, r19
    1e80:	44 f4       	brge	.+16     	; 0x1e92 <fputc+0x38>
    1e82:	a0 81       	ld	r26, Z
    1e84:	b1 81       	ldd	r27, Z+1	; 0x01
    1e86:	9d 01       	movw	r18, r26
    1e88:	2f 5f       	subi	r18, 0xFF	; 255
    1e8a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e8c:	20 83       	st	Z, r18
    1e8e:	31 83       	std	Z+1, r19	; 0x01
    1e90:	8c 93       	st	X, r24
    1e92:	26 81       	ldd	r18, Z+6	; 0x06
    1e94:	37 81       	ldd	r19, Z+7	; 0x07
    1e96:	2f 5f       	subi	r18, 0xFF	; 255
    1e98:	3f 4f       	sbci	r19, 0xFF	; 255
    1e9a:	26 83       	std	Z+6, r18	; 0x06
    1e9c:	37 83       	std	Z+7, r19	; 0x07
    1e9e:	10 c0       	rjmp	.+32     	; 0x1ec0 <fputc+0x66>
    1ea0:	eb 01       	movw	r28, r22
    1ea2:	09 2f       	mov	r16, r25
    1ea4:	18 2f       	mov	r17, r24
    1ea6:	00 84       	ldd	r0, Z+8	; 0x08
    1ea8:	f1 85       	ldd	r31, Z+9	; 0x09
    1eaa:	e0 2d       	mov	r30, r0
    1eac:	19 95       	eicall
    1eae:	89 2b       	or	r24, r25
    1eb0:	e1 f6       	brne	.-72     	; 0x1e6a <fputc+0x10>
    1eb2:	8e 81       	ldd	r24, Y+6	; 0x06
    1eb4:	9f 81       	ldd	r25, Y+7	; 0x07
    1eb6:	01 96       	adiw	r24, 0x01	; 1
    1eb8:	8e 83       	std	Y+6, r24	; 0x06
    1eba:	9f 83       	std	Y+7, r25	; 0x07
    1ebc:	81 2f       	mov	r24, r17
    1ebe:	90 2f       	mov	r25, r16
    1ec0:	df 91       	pop	r29
    1ec2:	cf 91       	pop	r28
    1ec4:	1f 91       	pop	r17
    1ec6:	0f 91       	pop	r16
    1ec8:	08 95       	ret

00001eca <__ultoa_invert>:
    1eca:	fa 01       	movw	r30, r20
    1ecc:	aa 27       	eor	r26, r26
    1ece:	28 30       	cpi	r18, 0x08	; 8
    1ed0:	51 f1       	breq	.+84     	; 0x1f26 <__ultoa_invert+0x5c>
    1ed2:	20 31       	cpi	r18, 0x10	; 16
    1ed4:	81 f1       	breq	.+96     	; 0x1f36 <__ultoa_invert+0x6c>
    1ed6:	e8 94       	clt
    1ed8:	6f 93       	push	r22
    1eda:	6e 7f       	andi	r22, 0xFE	; 254
    1edc:	6e 5f       	subi	r22, 0xFE	; 254
    1ede:	7f 4f       	sbci	r23, 0xFF	; 255
    1ee0:	8f 4f       	sbci	r24, 0xFF	; 255
    1ee2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ee4:	af 4f       	sbci	r26, 0xFF	; 255
    1ee6:	b1 e0       	ldi	r27, 0x01	; 1
    1ee8:	3e d0       	rcall	.+124    	; 0x1f66 <__ultoa_invert+0x9c>
    1eea:	b4 e0       	ldi	r27, 0x04	; 4
    1eec:	3c d0       	rcall	.+120    	; 0x1f66 <__ultoa_invert+0x9c>
    1eee:	67 0f       	add	r22, r23
    1ef0:	78 1f       	adc	r23, r24
    1ef2:	89 1f       	adc	r24, r25
    1ef4:	9a 1f       	adc	r25, r26
    1ef6:	a1 1d       	adc	r26, r1
    1ef8:	68 0f       	add	r22, r24
    1efa:	79 1f       	adc	r23, r25
    1efc:	8a 1f       	adc	r24, r26
    1efe:	91 1d       	adc	r25, r1
    1f00:	a1 1d       	adc	r26, r1
    1f02:	6a 0f       	add	r22, r26
    1f04:	71 1d       	adc	r23, r1
    1f06:	81 1d       	adc	r24, r1
    1f08:	91 1d       	adc	r25, r1
    1f0a:	a1 1d       	adc	r26, r1
    1f0c:	20 d0       	rcall	.+64     	; 0x1f4e <__ultoa_invert+0x84>
    1f0e:	09 f4       	brne	.+2      	; 0x1f12 <__ultoa_invert+0x48>
    1f10:	68 94       	set
    1f12:	3f 91       	pop	r19
    1f14:	2a e0       	ldi	r18, 0x0A	; 10
    1f16:	26 9f       	mul	r18, r22
    1f18:	11 24       	eor	r1, r1
    1f1a:	30 19       	sub	r19, r0
    1f1c:	30 5d       	subi	r19, 0xD0	; 208
    1f1e:	31 93       	st	Z+, r19
    1f20:	de f6       	brtc	.-74     	; 0x1ed8 <__ultoa_invert+0xe>
    1f22:	cf 01       	movw	r24, r30
    1f24:	08 95       	ret
    1f26:	46 2f       	mov	r20, r22
    1f28:	47 70       	andi	r20, 0x07	; 7
    1f2a:	40 5d       	subi	r20, 0xD0	; 208
    1f2c:	41 93       	st	Z+, r20
    1f2e:	b3 e0       	ldi	r27, 0x03	; 3
    1f30:	0f d0       	rcall	.+30     	; 0x1f50 <__ultoa_invert+0x86>
    1f32:	c9 f7       	brne	.-14     	; 0x1f26 <__ultoa_invert+0x5c>
    1f34:	f6 cf       	rjmp	.-20     	; 0x1f22 <__ultoa_invert+0x58>
    1f36:	46 2f       	mov	r20, r22
    1f38:	4f 70       	andi	r20, 0x0F	; 15
    1f3a:	40 5d       	subi	r20, 0xD0	; 208
    1f3c:	4a 33       	cpi	r20, 0x3A	; 58
    1f3e:	18 f0       	brcs	.+6      	; 0x1f46 <__ultoa_invert+0x7c>
    1f40:	49 5d       	subi	r20, 0xD9	; 217
    1f42:	31 fd       	sbrc	r19, 1
    1f44:	40 52       	subi	r20, 0x20	; 32
    1f46:	41 93       	st	Z+, r20
    1f48:	02 d0       	rcall	.+4      	; 0x1f4e <__ultoa_invert+0x84>
    1f4a:	a9 f7       	brne	.-22     	; 0x1f36 <__ultoa_invert+0x6c>
    1f4c:	ea cf       	rjmp	.-44     	; 0x1f22 <__ultoa_invert+0x58>
    1f4e:	b4 e0       	ldi	r27, 0x04	; 4
    1f50:	a6 95       	lsr	r26
    1f52:	97 95       	ror	r25
    1f54:	87 95       	ror	r24
    1f56:	77 95       	ror	r23
    1f58:	67 95       	ror	r22
    1f5a:	ba 95       	dec	r27
    1f5c:	c9 f7       	brne	.-14     	; 0x1f50 <__ultoa_invert+0x86>
    1f5e:	00 97       	sbiw	r24, 0x00	; 0
    1f60:	61 05       	cpc	r22, r1
    1f62:	71 05       	cpc	r23, r1
    1f64:	08 95       	ret
    1f66:	9b 01       	movw	r18, r22
    1f68:	ac 01       	movw	r20, r24
    1f6a:	0a 2e       	mov	r0, r26
    1f6c:	06 94       	lsr	r0
    1f6e:	57 95       	ror	r21
    1f70:	47 95       	ror	r20
    1f72:	37 95       	ror	r19
    1f74:	27 95       	ror	r18
    1f76:	ba 95       	dec	r27
    1f78:	c9 f7       	brne	.-14     	; 0x1f6c <__ultoa_invert+0xa2>
    1f7a:	62 0f       	add	r22, r18
    1f7c:	73 1f       	adc	r23, r19
    1f7e:	84 1f       	adc	r24, r20
    1f80:	95 1f       	adc	r25, r21
    1f82:	a0 1d       	adc	r26, r0
    1f84:	08 95       	ret

00001f86 <_exit>:
    1f86:	f8 94       	cli

00001f88 <__stop_program>:
    1f88:	ff cf       	rjmp	.-2      	; 0x1f88 <__stop_program>
